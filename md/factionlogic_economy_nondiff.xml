<?xml version="1.0" encoding="utf-8"?>
<mdscript name="FactionLogic_Economy"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
  <cues>

    <!--TODO @Owen - if traffic levels for a station are at a sustained high level, build a dock area-->

    <!--Helper libraries-->

    <library name="UpdateSectorNeighbourTable">
      <actions>
        <assert value="$Faction? and $SectorNeighbourTable?" text="'Variable $Faction or $SectorNeighbourTable not set. [Owen]'" break="1"/>
        <do_if value="$Faction? and $SectorNeighbourTable?">
          <clear_table table="$SectorNeighbourTable"/>

          <!--Find all sectors with stations owned by this faction-->
          <set_value name="$Sectors" exact="[]"/>
          <find_station_by_true_owner name="$OwnedStations" faction="$Faction" space="player.galaxy" multiple="true"/>
          <do_for_each in="$OwnedStations">
            <do_if value="not $Sectors.indexof.{loop.element.sector}">
              <append_to_list name="$Sectors" exact="loop.element.sector"/>
            </do_if>
          </do_for_each>

          <do_for_each in="$Sectors" name="$Sector" reverse="true">
            <do_if value="not $SectorNeighbourTable.{$Sector}?">
              <set_value name="$SectorNeighbourTable.{$Sector}" exact="table[{0} = [$Sector]]"/>
            </do_if>
            <do_elseif value="not $SectorNeighbourTable.{$Sector}.{0}?">
              <set_value name="$SectorNeighbourTable.{$Sector}.{0}" exact="[$Sector]"/>
            </do_elseif>
            <do_else>
              <append_to_list name="$SectorNeighbourTable.{$Sector}.{0}" exact="$Sector"/>
            </do_else>
            <!--
            Removed optimisation. Prior to the Terran DLC we had no sectors connected with a single super highway, so we could calculate the distance once and use it for both sectors.
            <remove_value name="$Sectors.{loop.index}" /> -->

            <find_sector_in_range distances="$DistanceTable" object="$Sector" maxdistance="5" multiple="true"/>
            <do_for_each in="$Sectors" name="$OtherSector">
              <do_if value="$Sector != $OtherSector and $DistanceTable.{$OtherSector}?">
                <set_value name="$JumpDistance" exact="$DistanceTable.{$OtherSector}"/>
                <!--Prepare the tables to store these two sectors-->
                <do_if value="not $SectorNeighbourTable.{$Sector}.{$JumpDistance}?">
                  <set_value name="$SectorNeighbourTable.{$Sector}.{$JumpDistance}" exact="[]"/>
                </do_if>

                <do_if value="not $SectorNeighbourTable.{$OtherSector}?">
                  <set_value name="$SectorNeighbourTable.{$OtherSector}" exact="table[{$JumpDistance} = []]"/>
                </do_if>
                <do_elseif value="not $SectorNeighbourTable.{$OtherSector}.{$JumpDistance}?">
                  <set_value name="$SectorNeighbourTable.{$OtherSector}.{$JumpDistance}" exact="[]"/>
                </do_elseif>

                <append_to_list name="$SectorNeighbourTable.{$Sector}.{$JumpDistance}" exact="$OtherSector"/>
              </do_if>
            </do_for_each>
          </do_for_each>
          <remove_value name="$Sectors"/>
          <remove_value name="$OwnedStations"/>
          <remove_value name="$DistanceTable"/>
        </do_if>
      </actions>
    </library>

    <!--Factories created by economic faction logic do not initially have habitation modules to prevent them complaining about workforce wares before they've even started successfully producing
    When a factory in $Factories finishes their first production they will attempt to add a habitation module to their construction plan-->
    <cue name="Habitation_Helper" namespace="this">
      <actions>
        <create_group groupname="$Factories"/>
      </actions>
      <cues>
        <cue name="Habitation_Helper_Production_Finished" instantiate="true" namespace="this">
          <conditions>
            <event_object_production_finished group="parent.$Factories"/>
          </conditions>
          <actions>
            <set_value name="$Station" exact="event.object"/>
            <set_value name="$ModuleSet" exact="$Station.modulesets.{1}" />
            <set_value name="$DebugChance" exact="0"/>

            <remove_from_group group="parent.$Factories" object="$Station"/>

            <set_value name="$CurrentPlan" exact="$Station.plannedconstruction.sequence"/>
            <debug_text text="'Stations current plan has ' + $CurrentPlan.count + ' entries'" chance="$DebugChance"/>

            <set_value name="$PlannedModules" exact="[]"/>
            <do_all exact="$CurrentPlan.count" counter="$i">
              <append_to_list name="$PlannedModules" exact="$CurrentPlan.{$i}.macro"/>
            </do_all>

            <!--Run FinaliseStations library-->
            <set_value name="$DebugFileName" exact="md.$SystemTimeAtGamestart + '_' + $Station + '_hab_extension'" comment="The name of the file to which the log will be saved. This is 'faction_logic.txt'" />
            <set_value name="$DebugDirectory" exact="'faction_logic'" comment="The directory under which log files should be kept" />
            <set_value name="$DebugOutput" exact="false" comment="Should the log file also be printed to VS output? - Make sure this is false for release builds" />

            <set_value name="$AddModules" exact="table[]" />
            <set_value name="$Hab_UseForeignModules" exact="false" />
            <set_value name="$Hab_ValidRaces" exact="[race.argon, race.paranid, race.teladi, race.split, race.terran]" />
            <include_actions ref="md.FinaliseStations.DefaultCalculateHabitation"/>

            <set_value name="$NewModules" exact="[]"/>
            <do_for_each name="$Module" valuename="$ModuleCount" in="$AddModules">
              <do_all exact="$ModuleCount">
                <append_to_list name="$NewModules" exact="$Module" />
              </do_all>
            </do_for_each>
            <debug_text text="'New modules: ' + $NewModules" chance="$DebugChance"/>

            <do_if value="$NewModules.count">
              <get_module_definition macro="$ViableConnectionModules" faction="$Station.owner" tags="[tag.connection, tag.module]" set="$ModuleSet" multiple="true" />
              <create_construction_sequence station="$Station" base="$Station.plannedconstruction.sequence" macros="$NewModules" connectors="$ViableConnectionModules" />
              <debug_text text="player.age + ' Beginning construction sequence generation for: ' + $Station + ' ' + $Station.knownname" chance="$DebugChance"/>
            </do_if>
            <do_else>
              <cancel_cue cue="this"/>
            </do_else>
          </actions>
          <cues>
            <cue name="Habitation_Helper_Generation_Finished">
              <conditions>
                <event_object_construction_sequence_created object="$Station" />
              </conditions>
              <actions>
                <debug_text text="player.age + ' Generated construction sequence for: ' + $Station + ' sequence: ' + event.param + ' success: '+ event.param2" chance="$DebugChance"/>
                <do_if value="event.param and event.param2">
                  <!--Successful construction sequence generation-->
                  <add_build_to_expand_station result="$BuildTask" buildobject="$Station" object="$Station.buildstorage" constructionplan="event.param"/>
                </do_if>

                <cancel_cue cue="namespace"/>
              </actions>
            </cue>

            <cue name="Habitation_Helper_Generation_Aborted">
              <conditions>
                <event_game_loaded/>
              </conditions>
              <actions>
                <!-- a pending construction sequence generation would be lost, add to group again and try later -->
                <add_to_group groupname="namespace.parent.$Factories" object="$Station"/>
                <cancel_cue cue="namespace"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </cue>

    <!--Note: Does not check if faction has a valid module production definition-->
    <library name="Check_Production_Location_Suitablility" purpose="run_actions">
      <params>
        <param name="Sector"/>
        <param name="Ware"/>
        <param name="Faction"/>
      </params>
      <actions>
        <do_if value="$Ware == ware.energycells and $Sector.sunlight lt 0.4f">
          <return value="false"/>
        </do_if>
        <do_if value="$Sector.containsthewave">
          <get_module_definition reference="$ProductionDefinition" ware="$Ware" faction="$Faction" tags="tag.condensate"/>
          <do_if value="not $ProductionDefinition">
            <return value="false"/>
          </do_if>
        </do_if>
        <return value="true"/>
      </actions>
    </library>

    <!--Faction economy library-->
    <library name="Econ_Manager" namespace="this" version="6">
      <params>
        <param name="FactionManagerCue"/>
        <param name="Faction"/>
        <param name="ConsumedFactions" default="[]"/>
        <param name="DebugChance" default="0"/>
      </params>
      <actions>
        <set_value name="$DebugText" exact="'(' + $Faction.id + ') Econ_Manager - '"/>
        <set_value name="$Reports" exact="table[]"/>

        <!--Table of actions the faction has attemtped to fix economic problems.-->
        <!--Key is by sector, value is the list of actions-->
        <set_value name="$ActionReports" exact="table[]"/>

        <!--Table of sectors within 1 jump of the sector (including itself)-->
        <set_value name="$SectorNeighbourTable" exact="table[]"/>
        <include_actions ref="md.FactionLogic_Economy.UpdateSectorNeighbourTable"/>

        <set_value name="$InsufficientProductsTable" exact="table[]"/>
        <set_value name="$ShortageProductsTable" exact="table[]"/>
        <set_value name="$OverflowProductsTable" exact="table[]"/>
        <set_value name="$InsufficientWorkforceTable" exact="table[]"/>
        <set_value name="$ShortageWorkforceTable" exact="table[]"/>
        <set_value name="$InsufficientBuildTable" exact="table[]"/>
        <set_value name="$ShortageBuildTable" exact="table[]"/>
        <set_value name="$BuyOfferAmountsTable" exact="table[]"/>
        <set_value name="$SellOfferAmountsTable" exact="table[]"/>

        <!--Aggregated tables have the Ware as key and the value is the aggregated time of all reports for that ware-->
        <set_value name="$AggregatedInsufficientProductsTable" exact="table[]"/>
        <set_value name="$AggregatedShortageProductsTable" exact="table[]"/>
        <set_value name="$AggregatedOverflowProductsTable" exact="table[]"/>
        <set_value name="$AggregatedInsufficientWorkforceTable" exact="table[]"/>
        <set_value name="$AggregatedShortageWorkforceTable" exact="table[]"/>
        <set_value name="$AggregatedInsufficientBuildTable" exact="table[]"/>
        <set_value name="$AggregatedShortageBuildTable" exact="table[]"/>
        <set_value name="$AggregatedBuyOfferAmountsTable" exact="table[]"/>
        <set_value name="$AggregatedSellOfferAmountsTable" exact="table[]"/>

        <!--Table of sectors which contain ware tables of aggregated report values-->
        <set_value name="$SectorInsufficientProductsTable" exact="table[]"/>
        <set_value name="$SectorShortageProductsTable" exact="table[]"/>
        <set_value name="$SectorOverflowProductsTable" exact="table[]"/>
        <set_value name="$SectorInsufficientWorkforceTable" exact="table[]"/>
        <set_value name="$SectorShortageWorkforceTable" exact="table[]"/>
        <set_value name="$SectorInsufficientBuildTable" exact="table[]"/>
        <set_value name="$SectorShortageBuildTable" exact="table[]"/>
        <set_value name="$SectorBuyOfferAmountsTable" exact="table[]"/>
        <set_value name="$SectorSellOfferAmountsTable" exact="table[]"/>
      </actions>
      <patch sinceversion="2" state="complete">
        <set_value name="$BuyOfferAmountsTable" exact="table[]"/>
        <set_value name="$SellOfferAmountsTable" exact="table[]"/>
        <set_value name="$AggregatedBuyOfferAmountsTable" exact="table[]"/>
        <set_value name="$AggregatedSellOfferAmountsTable" exact="table[]"/>
        <set_value name="$SectorBuyOfferAmountsTable" exact="table[]"/>
        <set_value name="$SectorSellOfferAmountsTable" exact="table[]"/>
      </patch>
      <patch sinceversion="3" state="complete">
        <set_value name="$OverflowProductsTable" exact="table[]"/>
        <set_value name="$AggregatedOverflowProductsTable" exact="table[]"/>
        <set_value name="$SectorOverflowProductsTable" exact="table[]"/>
      </patch>
      <patch sinceversion="4" state="complete">
        <include_actions ref="md.FactionLogic_Economy.UpdateSectorNeighbourTable"/>
      </patch>
      <patch sinceversion="5" state="complete">
        <do_if value="$Faction == faction.trinity">
          <set_value name="$ConsumedFactions" exact="[faction.paranid, faction.holyorder]"/>
        </do_if>
        <do_else>
          <set_value name="$ConsumedFactions" exact="[]"/>
        </do_else>
      </patch>
      <patch sinceversion="6" state="complete">
        <!--Find paused productions which have been forgotten by the Econ_Manager-->
        <find_station_by_true_owner name="$StationsWithPausedModules" faction="$Faction" space="player.galaxy" checkoperational="true" canequipships="false" tradestation="false" headquarters="false" multiple="true">
          <match_child class="class.production" pausedmanually="true" />
        </find_station_by_true_owner>

        <do_if value="$StationsWithPausedModules.count">
          <set_value name="$PauseActionModules" exact="[]"/>
          <do_for_each valuename="$ActionReportList" in="$ActionReports">
            <do_for_each name="$ActionReport" in="$ActionReportList">
              <set_value name="$ActionReportDef" exact="$ActionReport.$ActionDef"/>

              <do_if value="$ActionReportDef.$Type == '$pause_production' and $ActionReportDef.$PauseModule.exists">
                <append_to_list name="$PauseActionModules" exact="$ActionReportDef.$PauseModule"/>
              </do_if>
            </do_for_each>
          </do_for_each>

          <do_for_each name="$PausedModuleStation" in="$StationsWithPausedModules">
            <find_object_component name="$PausedModules" object="$PausedModuleStation" class="class.production" pausedmanually="true" excluded="$PauseActionModules" multiple="true"/>
            <do_for_each name="$PausedModule" in="$PausedModules">
              <debug_text text="'Production module ' + $PausedModule + ' ' + $PausedModule.knownname + ' was paused but no longer had a matching pause request. Unpausing'" filter="savegame"/>
              <set_production_paused object="$PausedModule" paused="false"/>
            </do_for_each>
          </do_for_each>
        </do_if>
        <remove_value name="$PauseActionModules"/>
        <remove_value name="$StationsWithPausedModules"/>
      </patch>
      <cues>
        <!--Library to check if running actions should be disregarded or escalated-->
        <library name="CheckRunningActions" purpose="run_actions">
          <params>
            <param name="Faction"/>
            <param name="ActionReports" comment="Action reports table to process"/>
            <param name="DisregardedActions" comment="List to populate with disregarded actions"/>
            <param name="EscalatedActions" comment="List to populate with escalated actions"/>
            <param name="Remove_Factory_Cue" default="null" comment="Static cue to signal for an escalating RemoveFactory action"/>
            <param name="DebugChance" default="0"/>
          </params>
          <actions>
            <set_value name="$Request_Commandeerable_Freighter_Release_Time" exact="90min" comment="Time after which the ship will be released"/>

            <set_value name="$Request_Freighter_Spawn_Wait_Time" exact="20min" comment="Time to allow the freighter to start being placed in a shipyard"/>
            <set_value name="$Request_Freighter_Build_Wait_Time" exact="1h" comment="Fallback time to allow the freighter to be built by the shipyard after spawning.
                                                                                         Spawning usually only happens when all resources are present and building can start."/>

            <set_value name="$Request_Pri_Freighter_Spawn_Wait_Time" exact="30min" comment="Time to allow the freighter to start being placed in a shipyard"/>
            <set_value name="$Request_Pri_Freighter_Build_Wait_Time" exact="1h" comment="Fallback time to allow the freighter to be built by the shipyard after spawning.
                                                                                             Spawning usually only happens when all resources are present and building can start."/>

            <set_value name="$Dismantle_Station_Timeout" exact="12h" comment="Time after which to consider dismantling a station if all productions are paused"/>
            <set_value name="$Pause_Production_Timeout" exact="24h" comment="Time to monitor a paused production"/>

            <set_value name="$Request_Production_Build_Wait_Time" exact="5h" comment="Time to allow the building to start"/>
            <set_value name="$Request_Production_Build_Timeout" exact="5h" comment="Time to allow the build to progress before disregarding"/>
            <set_value name="$Request_Production_Working_Timeout" exact="5h" comment="Time to allow the factory to work before disregarding"/>

            <set_value name="$Request_Factory_Build_Wait_Time" exact="15h" comment="Time to allow the building to start, where any module is operational or buildmodule is building"/>
            <set_value name="$Request_Factory_Build_Timeout" exact="10h" comment="Time to allow the build to progress before disregarding"/>
            <set_value name="$Request_Factory_Working_Timeout" exact="5h" comment="Time to allow the factory to work before disregarding"/>

            <do_for_each valuename="$ActionReportList" in="$ActionReports">
              <do_for_each name="$ActionReport" in="$ActionReportList" counter="$ARL_i" reverse="true">
                <set_value name="$DisregardAction" exact="false"/>
                <set_value name="$DisregardReason" exact="'UNKNOWN'" chance="$DebugChance"/>
                <set_value name="$DisregardObject" exact="null"/>
                <set_value name="$DisregardParam" exact="null"/>

                <set_value name="$ActionReportDef" exact="$ActionReport.$ActionDef"/>

                <!--CHECK REQUEST_COMMANDEERABLE_FREIGHTER and REQUEST_PRIO_COMMANDEERABLE_FREIGHTER ACTIONS-->
                <do_if value="$ActionReportDef.$Type == '$request_commandeerable_freighter' or $ActionReportDef.$Type == '$request_prio_commandeerable_freighter'">
                  <set_value name="$CommandeeredShip" exact="$ActionReportDef.$Ship"/>
                  <do_if value="$CommandeeredShip.isoperational and $CommandeeredShip.isjobship and not @$ActionReportDef.$Disregard" comment="$ActionReportDef.$Disregard can be set in the action handler itself">
                    <!--Ship is still an existing job ship-->
                    <do_if value="player.age ge $ActionReportDef.$CommandeerTime + $Request_Commandeerable_Freighter_Release_Time">
                      <!--Ship is no longer a requested ship. Disregard action report-->
                      <set_value name="$DisregardAction" exact="true"/>
                      <set_value name="$DisregardReason" exact="'Ship is to be released as a commandeered freighter'" chance="$DebugChance"/>
                      <set_value name="$DisregardObject" exact="$CommandeeredShip"/>
                    </do_if>
                  </do_if>
                  <do_else>
                    <!--Ship is no longer a requested ship. Disregard action report-->
                    <set_value name="$DisregardAction" exact="true"/>
                    <set_value name="$DisregardReason" exact="'Ship is no longer a suitable job ship'" chance="$DebugChance"/>
                    <set_value name="$DisregardObject" exact="$CommandeeredShip"/>
                  </do_else>
                  <remove_value name="$CommandeeredShip"/>
                </do_if>

                <!--CHECK REQUEST_FREIGHTER ACTION-->
                <do_elseif value="$ActionReportDef.$Type == '$request_freighter'">
                  <set_value name="$RequestedShip" exact="$ActionReportDef.$Ship"/>
                  <do_if value="($RequestedShip.exists or @$RequestedShip.state == componentstate.operational) and $RequestedShip.isrequestedjobship">
                    <!--Ship is still an existing requested job ship or is an operational ship waiting to be built somewhere-->
                    <!--TODO @Owen - parameters for things such as how long to wait for requested ships-->
                    <do_if value="not $RequestedShip.exists and not $RequestedShip.build">
                      <do_if value="$ActionReport.$StartTime lt player.age - $Request_Freighter_Spawn_Wait_Time">
                        <!--DISREGARD-->
                        <!--However, the ship still does not exist and it was requested some time ago. Kill and try something else-->
                        <destroy_object object="$RequestedShip"/>
                        <set_value name="$DisregardAction" exact="true"/>
                        <set_value name="$DisregardReason" exact="'Time elapsed and it never existed'" chance="$DebugChance"/>
                      </do_if>
                    </do_if>
                    <do_elseif value="$RequestedShip.isoperational">
                      <!--TODO @Owen, check if actually doing something. Any trade runs?-->
                      <!--<do_elseif value="$ActionReportDef.$LaunchTime lt xxxxs and the situation is around the same or worse">
                          try another freighter or a more drastic measure?
                          </do_elseif>-->
                    </do_elseif>
                    <do_elseif value="$RequestedShip.isconstruction">
                      <do_if value="@$ActionReportDef.$SpawnTime lt player.age - $Request_Freighter_Build_Wait_Time">
                        <!--DISREGARD-->
                        <!--Ship has not been built yet-->
                        <!--TODO @Owen. Check state of the build. Is it close to finishing? Allow a bit more time?-->
                        <!--TODO @Owen Recycle-->
                        <destroy_object object="$RequestedShip"/>
                        <set_value name="$DisregardAction" exact="true"/>
                        <set_value name="$DisregardReason" exact="'Ship took too long to finish building'" chance="$DebugChance"/>
                      </do_if>
                    </do_elseif>
                    <do_elseif value="$RequestedShip.iswreck">
                      <!--DISREGARD-->
                      <!--Requested job ship is destroyed-->
                      <set_value name="$DisregardAction" exact="true"/>
                      <set_value name="$DisregardReason" exact="'Ship is destroyed.'" chance="$DebugChance"/>
                      <set_value name="$DisregardObject" exact="$RequestedShip"/>
                    </do_elseif>
                  </do_if>
                  <do_else>
                    <!--Ship is no longer a requested ship. Disregard action report-->
                    <set_value name="$DisregardAction" exact="true"/>
                    <set_value name="$DisregardReason" exact="'Ship is no longer a requested job ship'" chance="$DebugChance"/>
                    <set_value name="$DisregardObject" exact="$RequestedShip"/>
                  </do_else>
                  <remove_value name="$RequestedShip"/>
                </do_elseif>

                <!--CHECK REQUEST_PRIORITY_FREIGHTER ACTION-->
                <do_elseif value="$ActionReportDef.$Type == '$request_priority_freighter'">
                  <set_value name="$RequestedShip" exact="$ActionReportDef.$Ship"/>
                  <do_if value="($RequestedShip.exists or @$RequestedShip.state == componentstate.operational) and $RequestedShip.isrequestedjobship">
                    <!--Ship is still an existing requested job ship or is an operational ship waiting to be built somewhere-->
                    <!--TODO @Owen - parameters for things such as how long to wait for requested ships-->
                    <do_if value="not $RequestedShip.exists and not $RequestedShip.build">
                      <do_if value="$ActionReport.$StartTime lt player.age - $Request_Pri_Freighter_Spawn_Wait_Time">
                        <!--DISREGARD-->
                        <!--However, the ship still does not exist and it was requested some time ago. Kill and try something else-->
                        <destroy_object object="$RequestedShip"/>
                        <set_value name="$DisregardAction" exact="true"/>
                        <set_value name="$DisregardReason" exact="'Time elapsed and it never existed'" chance="$DebugChance"/>
                      </do_if>
                    </do_if>
                    <do_elseif value="$RequestedShip.isoperational">
                      <!--TODO @Owen, check if actually doing something. Any trade runs?-->
                      <!--<do_elseif value="$ActionReportDef.$LaunchTime lt xxxxs and the situation is around the same or worse">
                          try another freighter or a more drastic measure?
                          </do_elseif>-->
                    </do_elseif>
                    <do_elseif value="$RequestedShip.isconstruction">
                      <do_if value="@$ActionReportDef.$SpawnTime lt player.age - $Request_Pri_Freighter_Build_Wait_Time">
                        <!--DISREGARD-->
                        <!--Ship has not been built yet-->
                        <!--TODO @Owen. Check state of the build. Is it close to finishing? Allow a bit more time?-->
                        <!--TODO @Owen Recycle-->
                        <destroy_object object="$RequestedShip"/>
                        <set_value name="$DisregardAction" exact="true"/>
                        <set_value name="$DisregardReason" exact="'Ship took too long to finish building'" chance="$DebugChance"/>
                      </do_if>
                    </do_elseif>
                    <do_elseif value="$RequestedShip.iswreck">
                      <!--DISREGARD-->
                      <!--Requested job ship is destroyed-->
                      <set_value name="$DisregardAction" exact="true"/>
                      <set_value name="$DisregardReason" exact="'Ship is destroyed.'" chance="$DebugChance"/>
                      <set_value name="$DisregardObject" exact="$RequestedShip"/>
                    </do_elseif>
                  </do_if>
                  <do_else>
                    <set_value name="$DisregardAction" exact="true"/>
                    <set_value name="$DisregardReason" exact="'Ship is no longer a requested job ship'" chance="$DebugChance"/>
                    <set_value name="$DisregardObject" exact="$RequestedShip"/>
                  </do_else>
                  <remove_value name="$RequestedShip"/>
                </do_elseif>

                <!--CHECK PAUSE_PRODUCTION ACTION-->
                <do_elseif value="$ActionReportDef.$Type == '$pause_production'">
                  <set_value name="$Station" exact="$ActionReportDef.$Station"/>
                  <do_if value="not $Station.exists">
                    <!--DISREGARD-->
                    <!--The station no longer exists-->
                    <set_value name="$DisregardAction" exact="true"/>
                    <set_value name="$DisregardReason" exact="'Station no longer exists'" chance="$DebugChance"/>
                  </do_if>
                  <do_elseif value="not $ActionReportDef.$PauseModule.isoperational">
                    <!--DISREGARD-->
                    <!--Paused production is no longer operational-->
                    <set_value name="$DisregardAction" exact="true"/>
                    <set_value name="$DisregardReason" exact="'Paused production module is no longer operational'" chance="$DebugChance"/>
                    <set_value name="$DisregardObject" exact="$Station"/>
                    <set_value name="$DisregardParam" exact="$ActionReportDef.$PauseModule"/>
                  </do_elseif>
                  <do_elseif value="not $ActionReportDef.$PauseModule.ispausedmanually">
                    <!--DISREGARD-->
                    <!--Production is no longer paused-->
                    <set_value name="$DisregardAction" exact="true"/>
                    <set_value name="$DisregardReason" exact="'Production module is no longer paused'" chance="$DebugChance"/>
                    <set_value name="$DisregardObject" exact="$Station"/>
                    <set_value name="$DisregardParam" exact="$ActionReportDef.$PauseModule"/>
                  </do_elseif>
                  <do_else>
                    <!--Production paused - if the station is already ownerless it'll be dismantled soon, so ignore -->
                    <do_if value="$Faction.isactive and $Remove_Factory_Cue and $Station.owner != faction.ownerless and ($ActionReportDef.$PauseTime lt (player.age - $Dismantle_Station_Timeout))">
                      <!-- productions have been paused for a long time, try to dismantle station -->
                      <set_value name="$NewActionDef" exact="table[]"/>
                      <set_value name="$NewActionDef.$Type" exact="'$remove_factory'"/>
                      <set_value name="$Sector" exact="$Station.sector"/>
                      <signal_cue_instantly cue="$Remove_Factory_Cue" param="[$NewActionDef, $Sector, null, $Station]"/>
                      <do_if value="$NewActionDef.$Station?">
                        <set_value name="$NewActionDef.$Sector" exact="$Sector"/>
                        <set_value name="$NewAction" exact="table[]" />
                        <set_value name="$NewAction.$ActionDef" exact="$NewActionDef"/>
                        <set_value name="$NewAction.$StartTime" exact="player.age"/>
                        <set_value name="$NewAction.$Sector" exact="$Sector"/>
                        <set_value name="$NewAction.$Ware" exact="$ActionReport.$Ware"/>
                        <set_value name="$NewAction.$AggregatedValue" exact="$ActionReport.$AggregatedValue"/>
                        <append_to_list name="$EscalatedActions" exact="$NewAction" />
                        <!-- we are escalating -->
                        <set_value name="$DisregardAction" exact="true"/>
                        <set_value name="$DisregardReason" exact="'Factory %1 (%2, %3) has been scheduled for deconstruction, beginning evacuation.'.[$Station.knownname, $Station, $Station.idcode]" chance="$DebugChance"/>
                        <set_value name="$DisregardObject" exact="$Station"/>
                        <set_value name="$DisregardParam" exact="$ActionReportDef.$PauseModule"/>
                      </do_if>
                    </do_if>
                    <do_if value="not $DisregardAction and $ActionReportDef.$PauseTime lt (player.age - $Pause_Production_Timeout)">
                      <!--DISREGARD-->
                      <!--Production has been paused for some time and we cannot dismantle the factory, disregard the action which will lead it to resume production. -->
                      <set_value name="$DisregardAction" exact="true"/>
                      <set_value name="$DisregardReason" exact="'Factory has had paused production %1 (%2) for %3'.[$ActionReportDef.$PauseModule.knownname, $ActionReportDef.$PauseModule, $Pause_Production_Timeout]" chance="$DebugChance"/>
                      <set_value name="$DisregardObject" exact="$Station"/>
                      <set_value name="$DisregardParam" exact="$ActionReportDef.$PauseModule"/>
                      <debug_text filter="economy_verbose" text="'#FLE#;%1;UnpauseProduction_Timeout;%2;%3;%4;%5;%6;%7'.[player.age, $Station.knownname, $Station, $Station.idcode, $Station.sector.knownname, $Faction.id, $ActionReport.$Ware, '', '']" context="false"/>
                    </do_if>
                  </do_else>
                  <remove_value name="$Station"/>
                </do_elseif>

                <!--CHECK REQUEST_PRODUCTION ACTION-->
                <do_elseif value="$ActionReportDef.$Type == '$request_production'">
                  <set_value name="$Station" exact="$ActionReportDef.$Station"/>
                  <do_if value="not $Station.exists">
                    <!--DISREGARD-->
                    <!--The station no longer exists-->
                    <set_value name="$DisregardAction" exact="true"/>
                    <set_value name="$DisregardReason" exact="'Station no longer exists'" chance="$DebugChance"/>
                  </do_if>
                  <do_elseif value="@$ActionReportDef.$BuiltTime">
                    <!--All productions were finished-->
                    <!--TODO @Owen check if the factory is actually producing?-->
                    <do_if value="$ActionReportDef.$BuiltTime lt player.age - $Request_Production_Working_Timeout">
                      <!--DISREGARD-->
                      <!--Productions have been complete for some time.-->
                      <set_value name="$DisregardAction" exact="true"/>
                      <set_value name="$DisregardReason" exact="'Factory has had the new productions for ' + $Request_Production_Working_Timeout" chance="$DebugChance"/>
                      <set_value name="$DisregardObject" exact="$Station"/>
                    </do_if>
                  </do_elseif>
                  <do_elseif value="@$ActionReportDef.$StartBuildTime or @$ActionReportDef.$LastBuildTime">
                    <!--Some module has begun construction-->
                    <do_if value="[$ActionReportDef.$StartBuildTime, @$ActionReportDef.$LastBuildTime].max lt player.age - $Request_Production_Build_Timeout">
                      <!--DISREGARD-->
                      <!--Factory has been expanding for a long time.-->
                      <set_value name="$DisregardAction" exact="true"/>
                      <set_value name="$DisregardReason" exact="'Factory has been expanding for ' + $Request_Production_Build_Timeout" chance="$DebugChance"/>
                      <set_value name="$DisregardObject" exact="$Station"/>
                    </do_if>
                  </do_elseif>
                  <do_else>
                    <!--Building has not started yet-->
                    <do_if value="$ActionReport.$StartTime lt player.age - $Request_Production_Build_Wait_Time">
                      <!--DISREGARD-->
                      <!--Construction has not started on the factory for a long time.-->
                      <set_value name="$DisregardAction" exact="true"/>
                      <set_value name="$DisregardReason" exact="'Expansion has not started on factory for' + $Request_Production_Build_Wait_Time" chance="$DebugChance"/>
                      <set_value name="$DisregardObject" exact="$Station"/>
                    </do_if>
                  </do_else>
                  <remove_value name="$Station"/>
                </do_elseif>
                <!--CHECK REQUEST_FACTORY ACTION-->
                <do_elseif value="$ActionReportDef.$Type == '$request_factory'">
                  <set_value name="$Station" exact="$ActionReportDef.$Station"/>
                  <do_if value="not $Station.exists or $Station.iswreck">
                    <!--DISREGARD-->
                    <!--The module did exist, but no longer-->
                    <set_value name="$DisregardAction" exact="true"/>
                    <set_value name="$DisregardReason" exact="'Station no longer exists'" chance="$DebugChance"/>
                  </do_if>
                  <do_elseif value="@$ActionReportDef.$UnpausedProduction">
                    <!--The request to construct a factory resulted in unpausing a module-->
                    <do_if value="$ActionReportDef.$BuiltTime lt player.age - $Request_Factory_Working_Timeout">
                      <!--DISREGARD-->
                      <!--Module was been unpaused for a while-->
                      <set_value name="$DisregardAction" exact="true"/>
                      <set_value name="$DisregardReason" exact="'Unpaused module has been working for ' + $Request_Factory_Working_Timeout" chance="$DebugChance"/>
                      <set_value name="$DisregardObject" exact="$Station"/>
                    </do_if>
                  </do_elseif>
                  <do_elseif value="@$ActionReportDef.$BuiltTime">
                    <!--Build has finished-->
                    <!--TODO @Owen check if the factory is actually producing?-->
                    <do_if value="$ActionReportDef.$BuiltTime lt player.age - $Request_Factory_Working_Timeout">
                      <!--DISREGARD-->
                      <!--Factory has been complete for some time.-->
                      <set_value name="$DisregardAction" exact="true"/>
                      <set_value name="$DisregardReason" exact="'Factory has been working for ' + $Request_Factory_Working_Timeout" chance="$DebugChance"/>
                      <set_value name="$DisregardObject" exact="$Station"/>
                    </do_if>
                  </do_elseif>
                  <do_elseif value="@$ActionReportDef.$StartBuildTime">
                    <!--Build has started-->
                    <do_if value="$ActionReportDef.$StartBuildTime lt player.age - $Request_Factory_Build_Timeout">
                      <!--DISREGARD-->
                      <!--Factory has been building for a long time.-->
                      <set_value name="$DisregardAction" exact="true"/>
                      <set_value name="$DisregardReason" exact="'Factory has been building for ' + $Request_Factory_Build_Timeout" chance="$DebugChance"/>
                      <set_value name="$DisregardObject" exact="$Station"/>
                      <set_value name="$ActionReportDef.$RemoveFactory" exact="true"/>
                    </do_if>
                  </do_elseif>
                  <do_else>
                    <!--Building has not started yet-->
                    <do_if value="$ActionReport.$StartTime lt player.age - $Request_Factory_Build_Wait_Time">
                      <!--DISREGARD-->
                      <!--Construction has not started on the factory for a long time.-->
                      <set_value name="$DisregardAction" exact="true"/>
                      <set_value name="$DisregardReason" exact="'Construction has not started on factory for' + $Request_Factory_Build_Timeout" chance="$DebugChance"/>
                      <set_value name="$DisregardObject" exact="$Station"/>
                      <set_value name="$ActionReportDef.$RemoveFactory" exact="true"/>
                    </do_if>
                  </do_else>
                  <remove_value name="$Station"/>
                </do_elseif>
                <!--CHECK REMOVE_FACTORY ACTION-->
                <do_elseif value="$ActionReportDef.$Type == '$remove_factory'">
                  <set_value name="$Station" exact="$ActionReportDef.$Station"/>
                  <do_if value="not $Station.exists">
                    <!--DISREGARD-->
                    <!--The station did exist, but no longer-->
                    <set_value name="$DisregardAction" exact="true"/>
                    <set_value name="$DisregardReason" exact="'Station no longer exists'" chance="$DebugChance"/>
                  </do_if>
                  <!-- TODO: do we need to bother with other checks? Once the recycling has started there is no going back anyway -->
                  <remove_value name="$Station"/>
                </do_elseif>
                <do_else>
                  <assert value="false" text="'Unknown action type ' + $ActionReportDef.$Type + ' [Owen]'" break="1"/>
                </do_else>

                <do_if value="$DisregardAction">
                  <debug_text text="'Disregarding action with reason: ' + $DisregardReason + ' Action: ' + $ActionReport" context="false" chance="$DebugChance"/>
                  <do_if value="$DisregardObject and $DisregardObject.isclass.component">
                    <!--.isclass.component check as $DisregardObject may be disconnected and .exists may not work-->
                    <signal_objects object="$DisregardObject" param="'factionlogic_econ_disregard'" param2="$ActionReportDef.$Type" param3="$DisregardParam"/>
                  </do_if>
                  <!-- also clear any sub-action this action may have had -->
                  <do_if value="$ActionReportDef.$SubActionDefs?">
                    <do_all exact="$ActionReportDef.$SubActionDefs.count" counter="$sa">
                      <set_value name="$SubActionDef" exact="$ActionReportDef.$SubActionDefs.{$sa}"/>
                      <set_value name="$DisregardObject" exact="if $SubActionDef.$Ship then $SubActionDef.$Ship else $SubActionDef.$Station"/>
                      <do_if value="$DisregardObject and $DisregardObject.isclass.component">
                        <!--.isclass.component check as $DisregardObject may be disconnected and .exists may not work-->
                        <debug_text text="'Disregarding sub-action with reason: Primary action disregarded Action: ' + $SubActionDef" context="false" chance="$DebugChance"/>
                        <signal_objects object="$DisregardObject" param="'factionlogic_econ_disregard'" param2="$SubActionDef.$Type"/>
                      </do_if>
                    </do_all>
                  </do_if>

                  <append_to_list name="$DisregardedActions" exact="$ActionReport"/>
                  <remove_value name="$ActionReportList.{$ARL_i}"/>
                </do_if>
              </do_for_each>
            </do_for_each>
          </actions>
        </library>

        <cue name="RespondToShortageData" instantiate="true">
          <conditions>
            <event_cue_signalled cue="md.FactionLogic_Economy.ShortageDataGenerated"/>
          </conditions>
          <delay min="1s" max="5s"/>
          <actions>
            <signal_cue cue="EvaluateShortages" check="false"/>
          </actions>
        </cue>

        <cue name="EvaluateShortages" version="2">
          <conditions>
            <event_cue_signalled/>
            <check_value value="md.FactionLogic_Economy.GenerateShortageData.state == cuestate.waiting"/>
          </conditions>
          <actions>
            <set_value name="$DebugChance" exact="0"/>

            <debug_text text="'STARTING EVALUATION ' + $Faction" chance="$DebugChance"/>

            <include_actions ref="md.FactionLogic_Economy.UpdateSectorNeighbourTable"/>

            <set_value name="$HadReports" exact="false"/>
            <do_if value="@md.FactionLogic_Economy.GlobalStorageData.$Reports">
              <set_value name="$OwnerReports" exact="@md.FactionLogic_Economy.GlobalStorageData.$Reports.{$Faction}"/>
              <do_if value="$OwnerReports">
                <set_value name="$HadReports" exact="true"/>

                <clear_table table="$InsufficientProductsTable"/>
                <clear_table table="$ShortageProductsTable"/>
                <clear_table table="$OverflowProductsTable"/>
                <clear_table table="$InsufficientWorkforceTable"/>
                <clear_table table="$ShortageWorkforceTable"/>
                <clear_table table="$InsufficientBuildTable"/>
                <clear_table table="$ShortageBuildTable"/>
                <clear_table table="$BuyOfferAmountsTable"/>
                <clear_table table="$SellOfferAmountsTable"/>

                <!--Aggregated tables have the Ware as key and the value is the aggregated time of all reports for that ware-->
                <clear_table table="$AggregatedInsufficientProductsTable"/>
                <clear_table table="$AggregatedShortageProductsTable"/>
                <clear_table table="$AggregatedOverflowProductsTable"/>
                <clear_table table="$AggregatedInsufficientWorkforceTable"/>
                <clear_table table="$AggregatedShortageWorkforceTable"/>
                <clear_table table="$AggregatedInsufficientBuildTable"/>
                <clear_table table="$AggregatedShortageBuildTable"/>
                <clear_table table="$AggregatedBuyOfferAmountsTable"/>
                <clear_table table="$AggregatedSellOfferAmountsTable"/>

                <!--Table of sectors which contain ware tables of aggregated report values-->
                <clear_table table="$SectorInsufficientProductsTable"/>
                <clear_table table="$SectorShortageProductsTable"/>
                <clear_table table="$SectorOverflowProductsTable"/>
                <clear_table table="$SectorInsufficientWorkforceTable"/>
                <clear_table table="$SectorShortageWorkforceTable"/>
                <clear_table table="$SectorInsufficientBuildTable"/>
                <clear_table table="$SectorShortageBuildTable"/>
                <clear_table table="$SectorBuyOfferAmountsTable"/>
                <clear_table table="$SectorSellOfferAmountsTable"/>

                <set_value name="$TableRef" exact="null"/>
                <set_value name="$TableRefKeys" exact="null"/>
                <set_value name="$ReportKeys" exact="$OwnerReports.keys.list"/>
                <do_all exact="$ReportKeys.count" counter="$i">
                  <set_value name="$Station" exact="$ReportKeys.{$i}"/>
                  <do_if value="$Station.exists">
                    <set_value name="$Sector" exact="$Station.sector"/>

                    <!--Insufficient Production Wares-->
                    <do_if value="$OwnerReports.{$Station}.$InsufficientProductionWares?">
                      <set_value name="$TableRef" exact="$OwnerReports.{$Station}.$InsufficientProductionWares"/>
                      <set_value name="$TableRefKeys" exact="$TableRef.keys.list"/>
                      <do_all exact="$TableRefKeys.count" counter="$k">
                        <set_value name="$Ware" exact="$TableRefKeys.{$k}"/>
                        <set_value name="$ReportValue" exact="$TableRef.{$Ware}"/>
                        <do_if value="not $SectorInsufficientProductsTable.{$Sector}?">
                          <set_value name="$SectorInsufficientProductsTable.{$Sector}" exact="table[]"/>
                        </do_if>
                        <set_value name="$SectorInsufficientProductsTable.{$Sector}.{$Ware}" exact="$ReportValue" operation="add"/>
                        <do_if value="$DebugChance == 100">
                          <set_value name="$AggregatedInsufficientProductsTable.{$Ware}" exact="$ReportValue" operation="add" />
                          <!--Avoid clashes by adding a little to the report value-->
                          <do_while value="$InsufficientProductsTable.{$ReportValue}?">
                            <set_value name="$ReportValue" exact="1" operation="add"/>
                          </do_while>
                          <set_value name="$InsufficientProductsTable.{$ReportValue}" exact="table[$Station = $Station, $Ware = $Ware]"/>
                        </do_if>
                      </do_all>
                    </do_if>

                    <!--Production wares in short supply-->
                    <!--<do_if value="$OwnerReports.{$Station}.$ShortageProductionWares?">
                      <set_value name="$TableRef" exact="$OwnerReports.{$Station}.$ShortageProductionWares"/>
                      <set_value name="$TableRefKeys" exact="$TableRef.keys.list"/>
                      <do_all exact="$TableRefKeys.count" counter="$k">
                        <set_value name="$Ware" exact="$TableRefKeys.{$k}"/>
                        <set_value name="$ReportValue" exact="$TableRef.{$Ware}"/>
                        <do_if value="not $SectorShortageProductsTable.{$Sector}?">
                          <set_value name="$SectorShortageProductsTable.{$Sector}" exact="table[]"/>
                        </do_if>
                        <set_value name="$SectorShortageProductsTable.{$Sector}.{$Ware}" exact="$ReportValue" operation="add"/>
                        <do_if value="$DebugChance == 100">
                        <set_value name="$AggregatedShortageProductsTable.{$Ware}" exact="$ReportValue" operation="add" />
                          <do_while value="$ShortageProductsTable.{$ReportValue}?">
                            <set_value name="$ReportValue" exact="1" operation="add"/>
                          </do_while>
                          <set_value name="$ShortageProductsTable.{$ReportValue}" exact="table[$Station = $Station, $Ware = $Ware]"/>
                        </do_if>
                      </do_all>
                    </do_if>-->

                    <!--Production wares in overflow-->
                    <do_if value="$OwnerReports.{$Station}.$OverflowProductionWares?">
                      <set_value name="$TableRef" exact="$OwnerReports.{$Station}.$OverflowProductionWares"/>
                      <set_value name="$TableRefKeys" exact="$TableRef.keys.list"/>
                      <do_all exact="$TableRefKeys.count" counter="$k">
                        <set_value name="$Ware" exact="$TableRefKeys.{$k}"/>
                        <set_value name="$ReportValue" exact="$TableRef.{$Ware}"/>
                        <do_if value="not $SectorOverflowProductsTable.{$Sector}?">
                          <set_value name="$SectorOverflowProductsTable.{$Sector}" exact="table[]"/>
                        </do_if>
                        <set_value name="$SectorOverflowProductsTable.{$Sector}.{$Ware}" exact="$ReportValue" operation="add"/>
                        <do_if value="$DebugChance == 100">
                          <set_value name="$AggregatedOverflowProductsTable.{$Ware}" exact="$ReportValue" operation="add" />
                          <!--Avoid clashes by adding a little to the report value-->
                          <do_while value="$OverflowProductsTable.{$ReportValue}?">
                            <set_value name="$ReportValue" exact="1" operation="add"/>
                          </do_while>
                          <set_value name="$OverflowProductsTable.{$ReportValue}" exact="table[$Station = $Station, $Ware = $Ware]"/>
                        </do_if>
                      </do_all>
                    </do_if>

                    <!--Insufficient Workforce Wares-->
                    <do_if value="$OwnerReports.{$Station}.$InsufficientWorkforceWares?">
                      <set_value name="$TableRef" exact="$OwnerReports.{$Station}.$InsufficientWorkforceWares"/>
                      <set_value name="$TableRefKeys" exact="$TableRef.keys.list"/>
                      <do_all exact="$TableRefKeys.count" counter="$k">
                        <set_value name="$Ware" exact="$TableRefKeys.{$k}"/>
                        <set_value name="$ReportValue" exact="$TableRef.{$Ware}"/>
                        <do_if value="not $SectorInsufficientWorkforceTable.{$Sector}?">
                          <set_value name="$SectorInsufficientWorkforceTable.{$Sector}" exact="table[]"/>
                        </do_if>
                        <set_value name="$SectorInsufficientWorkforceTable.{$Sector}.{$Ware}" exact="$ReportValue" operation="add"/>
                        <do_if value="$DebugChance == 100">
                          <set_value name="$AggregatedInsufficientWorkforceTable.{$Ware}" exact="$ReportValue" operation="add" />
                          <!--Avoid clashes by adding a little to the report value-->
                          <do_while value="$InsufficientWorkforceTable.{$ReportValue}?">
                            <set_value name="$ReportValue" exact="1" operation="add"/>
                          </do_while>
                          <set_value name="$InsufficientWorkforceTable.{$ReportValue}" exact="table[$Station = $Station, $Ware = $Ware]"/>
                        </do_if>
                      </do_all>
                    </do_if>

                    <!--Workforce wares in short supply-->
                    <!--<do_if value="$OwnerReports.{$Station}.$ShortageWorkforceWares?">
                      <set_value name="$TableRef" exact="$OwnerReports.{$Station}.$ShortageWorkforceWares"/>
                      <set_value name="$TableRefKeys" exact="$TableRef.keys.list"/>
                      <do_all exact="$TableRefKeys.count" counter="$k">
                        <set_value name="$Ware" exact="$TableRefKeys.{$k}"/>
                        <set_value name="$ReportValue" exact="$TableRef.{$Ware}"/>
                        <do_if value="not $SectorShortageWorkforceTable.{$Sector}?">
                          <set_value name="$SectorShortageWorkforceTable.{$Sector}" exact="table[]"/>
                        </do_if>
                        <set_value name="$SectorShortageWorkforceTable.{$Sector}.{$Ware}" exact="$ReportValue" operation="add"/>
                        <do_if value="$DebugChance == 100">
                        <set_value name="$AggregatedShortageWorkforceTable.{$Ware}" exact="$ReportValue" operation="add" />
                          <do_while value="$ShortageWorkforceTable.{$ReportValue}?">
                            <set_value name="$ReportValue" exact="1" operation="add"/>
                          </do_while>
                          <set_value name="$ShortageWorkforceTable.{$ReportValue}" exact="table[$Station = $Station, $Ware = $Ware]"/>
                        </do_if>
                      </do_all>
                    </do_if>-->

                    <!--Insufficient Build Wares-->
                    <do_if value="$OwnerReports.{$Station}.$InsufficientBuildWares?">
                      <set_value name="$TableRef" exact="$OwnerReports.{$Station}.$InsufficientBuildWares"/>
                      <set_value name="$TableRefKeys" exact="$TableRef.keys.list"/>
                      <do_all exact="$TableRefKeys.count" counter="$k">
                        <set_value name="$Ware" exact="$TableRefKeys.{$k}"/>
                        <!--treat insufficient build wares as higher priority?-->
                        <!--TODO @Owen move to params-->
                        <set_value name="$ReportValue" exact="$TableRef.{$Ware} * 1"/>
                        <do_if value="not $SectorInsufficientBuildTable.{$Sector}?">
                          <set_value name="$SectorInsufficientBuildTable.{$Sector}" exact="table[]"/>
                        </do_if>
                        <set_value name="$SectorInsufficientBuildTable.{$Sector}.{$Ware}" exact="$ReportValue" operation="add"/>
                        <do_if value="$DebugChance == 100">
                          <set_value name="$AggregatedInsufficientBuildTable.{$Ware}" exact="$ReportValue" operation="add" />
                          <!--Avoid clashes by adding a little to the report value-->
                          <do_while value="$InsufficientBuildTable.{$ReportValue}?">
                            <set_value name="$ReportValue" exact="1" operation="add"/>
                          </do_while>
                          <set_value name="$InsufficientBuildTable.{$ReportValue}" exact="table[$Station = $Station, $Ware = $Ware]"/>
                        </do_if>
                      </do_all>
                    </do_if>

                    <!--Build wares in short supply-->
                    <!--<do_if value="$OwnerReports.{$Station}.$ShortageBuildWares?">
                      <set_value name="$TableRef" exact="$OwnerReports.{$Station}.$ShortageBuildWares"/>
                      <set_value name="$TableRefKeys" exact="$TableRef.keys.list"/>
                      <do_all exact="$TableRefKeys.count" counter="$k">
                        <set_value name="$Ware" exact="$TableRefKeys.{$k}"/>
                        <set_value name="$ReportValue" exact="$TableRef.{$Ware} * 1.5"/>
                        <do_if value="not $SectorShortageBuildTable.{$Sector}?">
                          <set_value name="$SectorShortageBuildTable.{$Sector}" exact="table[]"/>
                        </do_if>
                        <set_value name="$SectorShortageBuildTable.{$Sector}.{$Ware}" exact="$ReportValue" operation="add"/>
                        <set_value name="$AggregatedShortageBuildTable.{$Ware}" exact="$ReportValue" operation="add"/>
                        <do_if value="$DebugChance == 100">
                          <do_while value="$ShortageBuildTable.{$ReportValue}?">
                            <set_value name="$ReportValue" exact="1" operation="add"/>
                          </do_while>
                          <set_value name="$ShortageBuildTable.{$ReportValue}" exact="table[$Station = $Station, $Ware = $Ware]"/>
                        </do_if>
                      </do_all>
                    </do_if>-->

                    <!--Buy offers-->
                    <do_if value="$OwnerReports.{$Station}.$BuyOfferAmounts?">
                      <set_value name="$TableRef" exact="$OwnerReports.{$Station}.$BuyOfferAmounts"/>
                      <set_value name="$TableRefKeys" exact="$TableRef.keys.list"/>
                      <do_all exact="$TableRefKeys.count" counter="$k">
                        <set_value name="$Ware" exact="$TableRefKeys.{$k}"/>
                        <set_value name="$ReportValue" exact="$TableRef.{$Ware}"/>
                        <do_if value="not $SectorBuyOfferAmountsTable.{$Sector}?">
                          <set_value name="$SectorBuyOfferAmountsTable.{$Sector}" exact="table[]"/>
                        </do_if>
                        <set_value name="$SectorBuyOfferAmountsTable.{$Sector}.{$Ware}" exact="$ReportValue" operation="add"/>
                        <do_if value="$DebugChance == 100">
                          <set_value name="$AggregatedBuyOfferAmountsTable.{$Ware}" exact="$ReportValue" operation="add"/>
                          <!--Avoid clashes by adding a little to the report value-->
                          <do_while value="$BuyOfferAmountsTable.{$ReportValue}?">
                            <set_value name="$ReportValue" exact="1" operation="add"/>
                          </do_while>
                          <set_value name="$BuyOfferAmountsTable.{$ReportValue}" exact="table[$Station = $Station, $Ware = $Ware]"/>
                        </do_if>
                      </do_all>
                    </do_if>

                    <!--Sell offers-->
                    <do_if value="$OwnerReports.{$Station}.$SellOfferAmounts?">
                      <set_value name="$TableRef" exact="$OwnerReports.{$Station}.$SellOfferAmounts"/>
                      <set_value name="$TableRefKeys" exact="$TableRef.keys.list"/>
                      <do_all exact="$TableRefKeys.count" counter="$k">
                        <set_value name="$Ware" exact="$TableRefKeys.{$k}"/>
                        <set_value name="$ReportValue" exact="$TableRef.{$Ware}"/>
                        <do_if value="not $SectorSellOfferAmountsTable.{$Sector}?">
                          <set_value name="$SectorSellOfferAmountsTable.{$Sector}" exact="table[]"/>
                        </do_if>
                        <set_value name="$SectorSellOfferAmountsTable.{$Sector}.{$Ware}" exact="$ReportValue" operation="add"/>
                        <do_if value="$DebugChance == 100">
                          <set_value name="$AggregatedSellOfferAmountsTable.{$Ware}" exact="$ReportValue" operation="add"/>
                          <!--Avoid clashes by adding a little to the report value-->
                          <do_while value="$SellOfferAmountsTable.{$ReportValue}?">
                            <set_value name="$ReportValue" exact="1" operation="add"/>
                          </do_while>
                          <set_value name="$SellOfferAmountsTable.{$ReportValue}" exact="table[$Station = $Station, $Ware = $Ware]"/>
                        </do_if>
                      </do_all>
                    </do_if>

                  </do_if>
                </do_all>
                <remove_value name="$ReportKeys"/>
                <remove_value name="$OwnerReports"/>

                <do_if value="$DebugChance == 100">
                  <debug_text text="'Insufficient production wares'" context="false"/>
                  <set_value name="$TableRef" exact="$AggregatedInsufficientProductsTable"/>
                  <include_actions ref="AggregatedReportTableHelper"/>

                  <!--<debug_text text="'Production ware shortages'" context="false"/>
                  <set_value name="$TableRef" exact="$AggregatedShortageProductsTable"/>
                  <include_actions ref="AggregatedReportTableHelper"/>-->

                  <debug_text text="'Production ware overflow'" context="false"/>
                  <set_value name="$TableRef" exact="$AggregatedOverflowProductsTable"/>
                  <include_actions ref="AggregatedReportTableHelper"/>

                  <debug_text text="'Insufficient workforce res.'" context="false"/>
                  <set_value name="$TableRef" exact="$AggregatedInsufficientWorkforceTable"/>
                  <include_actions ref="AggregatedReportTableHelper"/>

                  <!--<debug_text text="'Workforce ware shortages'" context="false"/>
                  <set_value name="$TableRef" exact="$AggregatedShortageWorkforceTable"/>
                  <include_actions ref="AggregatedReportTableHelper"/>-->

                  <debug_text text="'Insufficient build res.'" context="false"/>
                  <set_value name="$TableRef" exact="$AggregatedInsufficientBuildTable"/>
                  <include_actions ref="AggregatedReportTableHelper"/>

                  <!--<debug_text text="'Build ware shortages'" context="false"/>
                  <set_value name="$TableRef" exact="$AggregatedShortageBuildTable"/>
                  <include_actions ref="AggregatedReportTableHelper"/>-->

                  <debug_text text="'Buy offers'" context="false"/>
                  <set_value name="$TableRef" exact="$AggregatedBuyOfferAmountsTable"/>
                  <include_actions ref="AggregatedReportTableHelper"/>

                  <debug_text text="'Sell offers'" context="false"/>
                  <set_value name="$TableRef" exact="$AggregatedSellOfferAmountsTable"/>
                  <include_actions ref="AggregatedReportTableHelper"/>

                  <set_value name="$TableRef" exact="$InsufficientProductsTable"/>
                  <debug_text text="'Worst insufficient production ware reports (of ' + $TableRef.keys.count + ')'" context="false"/>
                  <set_value name="$DebugReportType" exact="'insufficient'"/>
                  <include_actions ref="SortedReportTableHelper"/>

                  <!--<set_value name="$TableRef" exact="$ShortageProductsTable"/>
                  <debug_text text="'Worst production ware shortage reports (of ' + $TableRef.keys.count + ')'" context="false"/>
                  <set_value name="$DebugReportType" exact="'short'"/>
                  <include_actions ref="SortedReportTableHelper"/>-->

                  <set_value name="$TableRef" exact="$OverflowProductsTable"/>
                  <debug_text text="'Worst production ware overflow reports (of ' + $TableRef.keys.count + ')'" context="false"/>
                  <set_value name="$DebugReportType" exact="'overflowing'"/>
                  <include_actions ref="SortedReportTableHelper"/>

                  <set_value name="$TableRef" exact="$InsufficientWorkforceTable"/>
                  <debug_text text="'Worst insufficient workforce ware reports (of ' + $TableRef.keys.count + ')'" context="false"/>
                  <set_value name="$DebugReportType" exact="'insufficient'"/>
                  <include_actions ref="SortedReportTableHelper"/>

                  <!--<set_value name="$TableRef" exact="$ShortageWorkforceTable"/>
                  <debug_text text="'Worst workforce ware shortage reports (of ' + $TableRef.keys.count + ')'" context="false"/>
                  <set_value name="$DebugReportType" exact="'short'"/>
                  <include_actions ref="SortedReportTableHelper"/>-->

                  <set_value name="$TableRef" exact="$InsufficientBuildTable"/>
                  <debug_text text="'Worst insufficient build ware reports (of ' + $TableRef.keys.count + ')'" context="false"/>
                  <set_value name="$DebugReportType" exact="'insufficient'"/>
                  <include_actions ref="SortedReportTableHelper"/>

                  <!--<set_value name="$TableRef" exact="$ShortageBuildTable"/>
                  <debug_text text="'Worst build ware shortage reports (of ' + $TableRef.keys.count + ')'" context="false"/>
                  <set_value name="$DebugReportType" exact="'short'"/>
                  <include_actions ref="SortedReportTableHelper"/>-->

                  <set_value name="$TableRef" exact="$BuyOfferAmountsTable"/>
                  <debug_text text="'Largest amount of buy offers (of ' + $TableRef.keys.count + ')'" context="false"/>
                  <set_value name="$DebugReportType" exact="'buyoffers'"/>
                  <include_actions ref="SortedReportTableHelper"/>

                  <set_value name="$TableRef" exact="$SellOfferAmountsTable"/>
                  <debug_text text="'Largest amount of sell offers (of ' + $TableRef.keys.count + ')'" context="false"/>
                  <set_value name="$DebugReportType" exact="'selloffers'"/>
                  <include_actions ref="SortedReportTableHelper"/>

                  <set_value name="$TableRef" exact="$SectorInsufficientProductsTable"/>
                  <debug_text text="'Aggregated insufficient production ware reports by sector'" context="false"/>
                  <set_value name="$DebugReportType" exact="'insufficient'"/>
                  <include_actions ref="SectorReportTableHelper"/>

                  <!--<set_value name="$TableRef" exact="$SectorShortageProductsTable"/>
                  <debug_text text="'Aggregated production ware shortage reports by sector'" context="false"/>
                  <set_value name="$DebugReportType" exact="'shortage'"/>
                  <include_actions ref="SectorReportTableHelper"/>-->

                  <set_value name="$TableRef" exact="$SectorOverflowProductsTable"/>
                  <debug_text text="'Aggregated production ware overflow reports by sector'" context="false"/>
                  <set_value name="$DebugReportType" exact="'overflow'"/>
                  <include_actions ref="SectorReportTableHelper"/>

                  <set_value name="$TableRef" exact="$SectorInsufficientWorkforceTable"/>
                  <debug_text text="'Aggregated insufficient workforce ware reports by sector'" context="false"/>
                  <set_value name="$DebugReportType" exact="'insufficient'"/>
                  <include_actions ref="SectorReportTableHelper"/>

                  <!--<set_value name="$TableRef" exact="$SectorShortageWorkforceTable"/>
                  <debug_text text="'Aggregated workforce ware shortage reports by sector'" context="false"/>
                  <set_value name="$DebugReportType" exact="'shortage'"/>
                  <include_actions ref="SectorReportTableHelper"/>-->

                  <set_value name="$TableRef" exact="$SectorInsufficientBuildTable"/>
                  <debug_text text="'Aggregated insufficient build ware reports by sector'" context="false"/>
                  <set_value name="$DebugReportType" exact="'insufficient'"/>
                  <include_actions ref="SectorReportTableHelper"/>

                  <!--<set_value name="$TableRef" exact="$SectorShortageBuildTable"/>
                  <debug_text text="'Aggregated build ware shortage reports by sector'" context="false"/>
                  <set_value name="$DebugReportType" exact="'shortage'"/>
                  <include_actions ref="SectorReportTableHelper"/>-->

                  <set_value name="$TableRef" exact="$SectorBuyOfferAmountsTable"/>
                  <debug_text text="'Aggregated buy offer amounts by sector'" context="false"/>
                  <set_value name="$DebugReportType" exact="'buyoffers'"/>
                  <include_actions ref="SectorReportTableHelper"/>

                  <set_value name="$TableRef" exact="$SectorSellOfferAmountsTable"/>
                  <debug_text text="'Aggregated sell offer amounts by sector'" context="false"/>
                  <set_value name="$DebugReportType" exact="'selloffers'"/>
                  <include_actions ref="SectorReportTableHelper"/>
                </do_if>

                <!--Decide which reports to act on-->
                <set_value name="$TransportationThresholds" exact="table[]"/>
                <set_value name="$TransportationThresholds.$request_commandeerable_freighter" exact="3000"/>
                <set_value name="$TransportationThresholds.$request_freighter" exact="6000"/>
                <set_value name="$TransportationThresholds.$request_prio_commandeerable_freighter" exact="10000"/>
                <set_value name="$TransportationThresholds.$request_priority_freighter" exact="17000"/>
                <set_value name="$TransportationThresholdsKeys" exact="$TransportationThresholds.keys.sorted"/>

                <set_value name="$ProductionThresholds" exact="table[]"/>
                <set_value name="$ProductionThresholds.$request_production" exact="14400"/>
                <set_value name="$ProductionThresholds.$request_factory" exact="57600"/>
                <set_value name="$ProductionThresholds.$not_viable" exact="230400"/>
                <set_value name="$ProductionThresholdsKeys" exact="$ProductionThresholds.keys.sorted"/>

                <set_value name="$OverflowWareThreshold" exact="7200"/>
                <set_value name="$OverflowInsufficientWareThreshold" exact="20000"/>

                <set_value name="$InsufficientNeighbourMultiplier" exact="0.2" comment="Factor of which to take neighbouring insufficient resources into account"/>
                <set_value name="$TradeOfferNeighbourMultiplier" exact="0.75" comment="Factor of which to take neighbouring trade offers into account"/>
                <set_value name="$NeighbourActionMultiplier" exact="0.5" comment="Factor of which to take the action score of neighbouring sectors for this ware into account"/>
                <set_value name="$NewProductionInsufficientResourceLimit" exact="600" comment="Insufficient ware score which must not be exceeded by resource wares when building new productions. Higher values increase the tolerance and may lead to more productions."/>

                <!--Check the exising actions to see if any should be disregarded-->
                <set_value name="$EscalatedActions" exact="[]"/>
                <set_value name="$DisregardedActions" exact="[]"/>
                <run_actions ref="CheckRunningActions">
                  <param name="Faction" value="$Faction"/>
                  <param name="ActionReports" value="$ActionReports"/>
                  <param name="DisregardedActions" value="$DisregardedActions"/>
                  <param name="EscalatedActions" value="$EscalatedActions"/>
                  <param name="Remove_Factory_Cue" value="Remove_Factory"/>
                  <param name="DebugChance" value="$DebugChance"/>
                </run_actions>

                <!--If any disregarded actions involved building a station, check if it should be removed-->
                <do_for_each name="$DisregardedAction" in="$DisregardedActions">
                  <set_value name="$DisregardedActionDef" exact="$DisregardedAction.$ActionDef"/>
                  <do_if value="$DisregardedActionDef.$Type == '$request_factory' and @$DisregardedActionDef.$RemoveFactory and $DisregardedActionDef.$Station.exists">
                    <set_value name="$Sector" exact="$DisregardedAction.$Sector"/>
                    <set_value name="$NewActionDef" exact="table[]"/>
                    <set_value name="$NewActionDef.$Type" exact="'$remove_factory'"/>
                    <signal_cue_instantly cue="Remove_Factory" param="[$NewActionDef, $DisregardedAction.$Sector, $DisregardedAction.$Ware, $DisregardedActionDef.$Station]"/>
                    <do_if value="$NewActionDef.$Station?">
                      <!--curtime, object_name, object_id, object_idcode, sector_name, faction_id, ware, station_id, station_idcode-->
                      <debug_text filter="economy_verbose" text="'#FLE#;%1;RemoveFactory;%2;%3;%4;%5;%6;%7'.[player.age, $NewActionDef.$Station.knownname, $NewActionDef.$Station, $NewActionDef.$Station.idcode, $Sector.knownname, $Faction.id, $DisregardedAction.$Ware, '', '']" context="false"/>
                      <set_value name="$NewAction" exact="table[]" />
                      <set_value name="$NewAction.$ActionDef" exact="$NewActionDef"/>
                      <set_value name="$NewAction.$StartTime" exact="player.age"/>
                      <set_value name="$NewAction.$Sector" exact="$Sector"/>
                      <set_value name="$NewAction.$Ware" exact="$DisregardedAction.$Ware"/>
                      <set_value name="$NewAction.$AggregatedValue" exact="$DisregardedAction.$AggregatedValue"/>
                      <debug_text text="'Successfully added new action ' + $NewAction" context="false" chance="$DebugChance"/>
                      <do_if value="not $ActionReports.{$Sector}?">
                        <set_value name="$ActionReports.{$Sector}" exact="[]"/>
                      </do_if>
                      <append_to_list name="$ActionReports.{$Sector}" exact="$NewAction"/>
                      <debug_text text="'Faction now has econ related actions in ' + $ActionReports.keys.count + ' sector(s). '+ $ActionReports.{$Sector}.count +' action(s) in sector ' + $Sector.knownname" context="false" chance="$DebugChance"/>
                    </do_if>
                  </do_if>
                </do_for_each>
                <remove_value name="$DisregardedActionDef"/>

                <!--shortage table data is currently not collected or processed-->
                <set_value name="$ReportTablesToProcess" exact="[$SectorInsufficientProductsTable, $SectorInsufficientWorkforceTable, $SectorInsufficientBuildTable]"/>

                <!-- Find overflowing factories and pause productions as needed -->
                <do_if value="$Faction.isactive and $SectorOverflowProductsTable.keys.count">
                  <set_value name="$SectorOverflowProductsKeys" exact="$SectorOverflowProductsTable.keys.list"/>
                  <do_all exact="$SectorOverflowProductsKeys.count" counter="$k">
                    <set_value name="$Sector" exact="$SectorOverflowProductsKeys.{$k}"/>
                    <set_value name="$OverflowWares" exact="$SectorOverflowProductsTable.{$Sector}"/>
                    <set_value name="$OverflowWareKeys" exact="$OverflowWares.keys.list"/>
                    <debug_text text="'processing %1 overflowing wares in sector %2'.[$OverflowWareKeys.count, $Sector.knownname]" context="false" chance="$DebugChance"/>
                    <do_all exact="$OverflowWareKeys.count" counter="$o" reverse="true">
                      <set_value name="$Ware" exact="$OverflowWareKeys.{$o}"/>
                      <set_value name="$SectorValue" exact="$OverflowWares.{$Ware}"/>

                      <do_if value="$SectorValue gt $OverflowWareThreshold">
                        <set_value name="$WareIsInsufficient" exact="false"/>
                        <!--Do not pause productions here if the product is insufficient for this sector unless it is very extreme.-->
                        <do_if value="$SectorValue lt $OverflowInsufficientWareThreshold">
                          <do_for_each name="$ReportTable" in="$ReportTablesToProcess">
                            <do_if value="$ReportTable.{$Sector}.{$Ware}?">
                              <set_value name="$WareIsInsufficient" exact="true"/>
                              <break/>
                            </do_if>
                          </do_for_each>
                        </do_if>
                        <do_if value="not $WareIsInsufficient">
                          <set_value name="$NewActionDef" exact="table[]"/>
                          <set_value name="$NewActionDef.$Type" exact="'$pause_production'"/>
                          <signal_cue_instantly cue="Pause_Production_Module" param="[$NewActionDef, $Sector, $Ware, null]"/>
                          <do_if value="$NewActionDef.$Station?">
                            <!--curtime, object_name, object_id, object_idcode, sector_name, faction_id, ware, station_id, station_idcode-->
                            <debug_text filter="economy_verbose" text="'#FLE#;%1;PauseProduction;%2;%3;%4;%5;%6;%7'.[player.age, $NewActionDef.$Station.knownname, $NewActionDef.$Station, $NewActionDef.$Station.idcode, $Sector.knownname, $Faction.id, $Ware, '', '']" context="false"/>
                            <set_value name="$NewAction" exact="table[]" />
                            <set_value name="$NewAction.$ActionDef" exact="$NewActionDef"/>
                            <set_value name="$NewAction.$StartTime" exact="player.age"/>
                            <set_value name="$NewAction.$Sector" exact="$Sector"/>
                            <set_value name="$NewAction.$Ware" exact="$Ware"/>
                            <set_value name="$NewAction.$AggregatedValue" exact="$SectorValue"/>
                            <debug_text text="'Successfully added new action ' + $NewAction" context="false" chance="$DebugChance"/>
                            <do_if value="not $ActionReports.{$Sector}?">
                              <set_value name="$ActionReports.{$Sector}" exact="[]"/>
                            </do_if>
                            <append_to_list name="$ActionReports.{$Sector}" exact="$NewAction"/>
                            <debug_text text="'Faction now has econ related actions in ' + $ActionReports.keys.count + ' sector(s). '+ $ActionReports.{$Sector}.count +' action(s) in sector ' + $Sector.knownname" context="false" chance="$DebugChance"/>
                          </do_if>
                        </do_if>
                      </do_if>
                    </do_all>
                  </do_all>
                  <remove_value name="$SectorOverflowProductsKeys"/>
                  <remove_value name="$WareIsInsufficient"/>
                </do_if>

                <!-- process any escalated actions and insert them into the appropriate ActionReports -->
                <assert value="$Faction.isactive or $EscalatedActions.count == 0" text="$Faction + ' is inactive and should not be escalating actions [Owen]'"/>
                <do_all exact="$EscalatedActions.count" counter="$e">
                  <set_value name="$NewAction" exact="$EscalatedActions.{$e}"/>
                  <debug_text text="'Successfully added escalated action ' + $NewAction" context="false" chance="$DebugChance"/>
                  <do_if value="not $ActionReports.{$NewAction.$Sector}?">
                    <set_value name="$ActionReports.{$NewAction.$Sector}" exact="[]"/>
                  </do_if>
                  <append_to_list name="$ActionReports.{$NewAction.$Sector}" exact="$NewAction"/>
                  <debug_text text="'Faction now has econ related actions in ' + $ActionReports.keys.count + ' sector(s). '+ $ActionReports.{$NewAction.$Sector}.count +' action(s) in sector ' + $NewAction.$Sector.knownname" context="false" chance="$DebugChance"/>
                </do_all>

                <!--Check the insufficient production resources-->
                <set_value name="$ReportTablesIndex" exact="1"/>
                <set_value name="$TableRefIndex" exact="1"/>
              </do_if>
            </do_if>

            <do_if value="not $HadReports">
              <!--We need to check the running actions but don't need to store disregarded actions. Only escalate if the faction is active.-->
              <debug_text text="$Faction + ' had no reports. Checking if any actions are to be disregarded'" chance="$DebugChance"/>
              <run_actions ref="CheckRunningActions">
                <param name="Faction" value="$Faction"/>
                <param name="ActionReports" value="$ActionReports"/>
                <param name="DisregardedActions" value="[]"/>
                <param name="EscalatedActions" value="[]" comment=""/>
                <param name="DebugChance" value="$DebugChance"/>
              </run_actions>
              <reset_cue cue="EvaluateShortages"/>
            </do_if>
            <!-- start with a clean group for this run so we do not have leftover entries from last time -->
            <create_group groupname="$BusyStations"/>
          </actions>
          <patch sinceversion="2">
            <set_value name="$NewProductionInsufficientResourceLimit" exact="600"/>
            <set_value name="$OverflowInsufficientWareThreshold" exact="20000"/>
          </patch>
          <cues>
            <cue name="EvaluateSectorShortage" onfail="cancel">
              <conditions>
                <check_value value="@$ReportTablesIndex gt 0 and $ReportTablesIndex le $ReportTablesToProcess.count"/>
                <check_value value="@$TableRefIndex gt 0"/>
              </conditions>
              <delay min="100ms" max="250ms"/>
              <actions>
                <set_value name="$TableRef" exact="$ReportTablesToProcess.{$ReportTablesIndex}"/>
                <!--TableRef keys are sectors-->
                <set_value name="$TableRefKeys" exact="$TableRef.keys.list"/>
                <do_if value="$TableRefIndex le $TableRefKeys.count">
                  <set_value name="$Sector" exact="$TableRefKeys.{$TableRefIndex}"/>
                  <debug_text text="'\n' + $DebugText + 'Checking sector ' + $Sector + ' ' + $Sector.knownname" context="false" chance="$DebugChance"/>
                  <set_value name="$SubTable" exact="$TableRef.{$Sector}"/>
                  <set_value name="$SubTableRefKeys" exact="$SubTable.keys.list"/>
                  <do_all exact="$SubTableRefKeys.count" counter="$k" reverse="true">
                    <set_value name="$Ware" exact="$SubTableRefKeys.{$k}"/>
                    <set_value name="$SectorValue" exact="$SubTable.{$Ware}"/>
                    <debug_text text="'Sector ' + $Sector + ' ' + $Sector.knownname + ' has insufficient ware ' + $Ware + ' at value ' + $SectorValue" context="false" chance="$DebugChance"/>

                    <set_value name="$SectorBuyOfferValue" exact="@$SectorBuyOfferAmountsTable.{$Sector}.{$Ware}"/>
                    <set_value name="$SectorSellOfferValue" exact="@$SectorSellOfferAmountsTable.{$Sector}.{$Ware}"/>

                    <do_if value="$SectorNeighbourTable.{$Sector}?">
                      <set_value name="$NeighbouringSectorTable" exact="$SectorNeighbourTable.{$Sector}"/>
                    </do_if>
                    <do_else>
                      <!--TODO @Owen This sector is not currently owned by $Faction but has stations reporting about wares (contested?)-->
                      <set_value name="$NeighbouringSectorTable" exact="table[{0} = [$Sector]]"/>
                    </do_else>

                    <!--Check if the neighboring sectors have reports for the same ware. Take them into account but with the $NeighbourFactor and respecting the $NeighbourCap-->
                    <!--TODO @Owen - only if positive?-->
                    <set_value name="$NeighbouringSectorDistanceKeys" exact="$NeighbouringSectorTable.keys.list"/>
                    <do_all exact="$NeighbouringSectorDistanceKeys.count" counter="$NSDK_i">
                      <set_value name="$JumpDist" exact="$NeighbouringSectorDistanceKeys.{$NSDK_i}"/>
                      <set_value name="$NeighbourScoreFactor" exact="1.0 / (($JumpDist)f + 1.0)"/>
                      <set_value name="$NeighbourOfferFactor" exact="1.0 / ((($JumpDist)f / 3) + 1.0)"/>
                      <set_value name="$NeighbourCap" exact="if $JumpDist then 69000 / ($JumpDist * 1.2) else -1"/>
                      <do_all exact="$NeighbouringSectorTable.{$JumpDist}.count" counter="$sector_i">
                        <set_value name="$NeighbourSector" exact="$NeighbouringSectorTable.{$JumpDist}.{$sector_i}"/>
                        <do_if value="$NeighbourSector != $Sector">
                          <do_if value="$TableRef.{$NeighbourSector}?">
                            <!-- check insufficient state in neighbour sectors -->
                            <set_value name="$NeighbourSubTable" exact="$TableRef.{$NeighbourSector}"/>
                            <do_if value="$NeighbourSubTable.{$Ware}?">
                              <do_if value="$NeighbourCap gt 0">
                                <set_value name="$NeighbourValue" exact="[$NeighbourSubTable.{$Ware} * $NeighbourScoreFactor, $NeighbourCap].min"/>
                              </do_if>
                              <do_else>
                                <set_value name="$NeighbourValue" exact="$NeighbourSubTable.{$Ware} * $NeighbourScoreFactor"/>
                              </do_else>
                              <set_value name="$SectorValue" exact="$NeighbourValue" operation="add"/>
                              <debug_text text="'Neighbouring sector ' + $NeighbourSector + ' ' + $NeighbourSector.knownname + ' at dist ' + $JumpDist + ' also has insufficient ware ' + $Ware + ' with value ' + $NeighbourSubTable.{$Ware} + ' and will add ' + $NeighbourValue + ' for a new value of ' + $SectorValue" context="false" chance="$DebugChance"/>
                            </do_if>
                          </do_if>
                          <do_if value="$SectorBuyOfferAmountsTable.{$NeighbourSector}?">
                            <!-- check buy offers in neighbour sectors -->
                            <set_value name="$NeighbourSubTable" exact="$SectorBuyOfferAmountsTable.{$NeighbourSector}"/>
                            <do_if value="$NeighbourSubTable.{$Ware}?">
                              <debug_text text="$NeighbourSector.knownname + ' buy offer score: ' + $NeighbourSubTable.{$Ware} * $NeighbourOfferFactor" chance="$DebugChance"/>
                              <set_value name="$SectorBuyOfferValue" exact="$NeighbourSubTable.{$Ware} * $NeighbourOfferFactor" operation="add"/>
                            </do_if>
                          </do_if>
                          <do_if value="$SectorSellOfferAmountsTable.{$NeighbourSector}?">
                            <!-- check sell offers in neighbour sectors -->
                            <set_value name="$NeighbourSubTable" exact="$SectorSellOfferAmountsTable.{$NeighbourSector}"/>
                            <do_if value="$NeighbourSubTable.{$Ware}?">
                              <debug_text text="$NeighbourSector.knownname + ' sell offer score: ' + $NeighbourSubTable.{$Ware} * $NeighbourOfferFactor" chance="$DebugChance"/>
                              <set_value name="$SectorSellOfferValue" exact="$NeighbourSubTable.{$Ware} * $NeighbourOfferFactor" operation="add"/>
                            </do_if>
                          </do_if>
                        </do_if>
                      </do_all>
                    </do_all>
                    <remove_value name="$JumpDist"/>
                    <remove_value name="$NeighbourScoreFactor"/>
                    <remove_value name="$NeighbourOfferFactor"/>
                    <remove_value name="$NeighbourCap"/>

                    <!--Is this ware also overflowing?-->
                    <set_value name="$OverflowValue" exact="@$SectorOverflowProductsTable.{$Sector}.{$Ware}"/>

                    <debug_text text="'total buy val ' + $SectorBuyOfferValue" chance="$DebugChance"/>
                    <debug_text text="'total sell val ' + $SectorSellOfferValue" chance="$DebugChance"/>

                    <do_if value="not $CanProduceTable?">
                      <set_value name="$CanProduceTable" exact="table[]"/>
                    </do_if>
                    <do_if value="not $CanProduceTable.{$Ware}?">
                      <set_value name="$CanProduceTable.{$Ware}" exact="false"/>
                      <do_if value="not $Ware.hastag.minable and not $Ware.isprocessed">
                        <get_module_definition reference="this.$ProductionDefinition" ware="$Ware" faction="$Faction"/>
                        <set_value name="$CanProduceTable.{$Ware}" exact="this.$ProductionDefinition != null"/>
                      </do_if>
                    </do_if>
                    <set_value name="$IsProductionIssue" exact="$CanProduceTable.{$Ware} and $SectorSellOfferValue lt ($SectorBuyOfferValue * 0.6f) and not $OverflowValue"/>
                    <do_if value="$IsProductionIssue">
                      <run_actions ref="Check_Production_Location_Suitablility" result="$IsProductionIssue">
                        <param name="Sector" value="$Sector"/>
                        <param name="Ware" value="$Ware"/>
                        <param name="Faction" value="$Faction"/>
                      </run_actions>
                    </do_if>
                    <do_if value="$IsProductionIssue">
                      <!-- we are dealing with a production problem (minable resources cannot have a production problem and need to be treated as a transportation problem, mining ships will be requested instead) -->
                      <set_value name="$ActionThresholds" exact="$ProductionThresholds"/>
                      <set_value name="$ActionThresholdsKeys" exact="$ProductionThresholdsKeys"/>
                      <set_value name="$OtherActionThresholds" exact="$TransportationThresholds"/>
                      <set_value name="$OtherActionThresholdsKeys" exact="$TransportationThresholdsKeys"/>
                      <debug_text text="'Sector %1 (and neighbours) seem to have a PRODUCTION PROBLEM of %2 at time %3'.[$Sector.knownname, $Ware, player.age]" context="false" chance="$DebugChance"/>
                    </do_if>
                    <do_else>
                      <!-- we are dealing with a transportation problem -->
                      <set_value name="$ActionThresholds" exact="$TransportationThresholds"/>
                      <set_value name="$ActionThresholdsKeys" exact="$TransportationThresholdsKeys"/>
                      <set_value name="$OtherActionThresholds" exact="$ProductionThresholds"/>
                      <set_value name="$OtherActionThresholdsKeys" exact="$ProductionThresholdsKeys"/>
                      <debug_text text="'Sector %1 (and neighbours) seem to have a TRANSPORTATION PROBLEM of %2 at time %3'.[$Sector.knownname, $Ware, player.age]" context="false" chance="$DebugChance"/>
                    </do_else>

                    <set_value name="$HighestActionCost" exact="0"/>
                    <set_value name="$HighestDisregardedActionCost" exact="0"/>
                    <do_all exact="$DisregardedActions.count" counter="$o">
                      <do_if value="$DisregardedActions.{$o}.$Sector == $Sector and $DisregardedActions.{$o}.$Ware == $Ware">
                        <set_value name="$ActionType" exact="$DisregardedActions.{$o}.$ActionDef.$Type" />
                        <do_if value="$ActionThresholds.{$ActionType}? and $ActionThresholds.{$ActionType} gt $HighestDisregardedActionCost">
                          <!--This was a disregarded action for this sector, remember how much worth it had so an action of higher worth can be queued
                          Note: We do not need to check against $OtherActionThresholds as we're looking to try a different set of actions-->
                          <set_value name="$HighestDisregardedActionCost" exact="$ActionThresholds.{$ActionType}"/>
                          <debug_text text="'Disregarded action had the highest cost so far of ' + $HighestDisregardedActionCost" context="false" chance="$DebugChance"/>
                        </do_if>
                      </do_if>
                    </do_all>

                    <set_value name="$ExistingActionsCost" exact="0"/>
                    <set_value name="$PursueNewAction" exact="true"/>
                    <!--Related action reports are those undertaken by this $Faction and any $ConsumedFaction-->
                    <set_value name="$RelatedActionReportsList" exact="[$ActionReports, $Faction]"/>
                    <do_for_each name="$ConsumedFaction" in="$ConsumedFactions">
                      <set_value name="$ComsumedFactionActionsTable" exact="table[]"/>
                      <signal_cue_instantly cue="md.FactionLogic.FactionSignalled" param="[$ConsumedFaction, 'get_economic_actions', $ComsumedFactionActionsTable]"/>
                      <append_to_list name="$RelatedActionReportsList" exact="$ComsumedFactionActionsTable"/>
                      <append_to_list name="$RelatedActionReportsList" exact="$ConsumedFaction"/>
                    </do_for_each>
                    <do_for_each name="$RelatedActionReports" in="$RelatedActionReportsList" counter="$RARL_i">
                      <do_if value="typeof $RelatedActionReports == datatype.table">
                        <set_value name="$RelatedReportFaction" exact="$RelatedActionReportsList.{$RARL_i + 1}"/>
                        <debug_text text="'Faction ' + $Faction + ' is checking for existing actions for ' + $Ware + ' by faction ' + $RelatedReportFaction" context="false" chance="$DebugChance"/>
                        <set_value name="$ActionReportKeys" exact="$RelatedActionReports.keys.list"/>
                        <do_all exact="$ActionReportKeys.count" counter="$ARK_i">
                          <set_value name="$ActionReportList" exact="$RelatedActionReports.{$ActionReportKeys.{$ARK_i}}"/>
                          <do_all exact="$ActionReportList.count" counter="$ARL_i">
                            <do_if value="$ActionReportList.{$ARL_i}.$Ware == $Ware">
                              <set_value name="$SectorMatch" exact="false"/>
                              <!-- do the sectors that are no more than 3 jumps away have reported actions for the same ware? -->
                              <do_all exact="[$NeighbouringSectorDistanceKeys.count, 3].min" counter="$NSDK_j">
                                <set_value name="$JumpDist" exact="$NeighbouringSectorDistanceKeys.{$NSDK_j}"/>
                                <do_if value="$NeighbouringSectorTable.{$JumpDist}.indexof.{$ActionReportKeys.{$ARK_i}}">
                                  <set_value name="$SectorMatch" exact="true"/>
                                  <break/>
                                </do_if>
                              </do_all>
                              <do_if value="$SectorMatch">
                                <set_value name="$ActionReport" exact="$ActionReportList.{$ARL_i}"/>
                                <set_value name="$ActionReportDef" exact="$ActionReport.$ActionDef"/>
                                <set_value name="$ExistingActionCost" exact="if $ActionThresholds.{$ActionReportDef.$Type}? then $ActionThresholds.{$ActionReportDef.$Type} else @$OtherActionThresholds.{$ActionReportDef.$Type}"/>
                                <do_if value="$ExistingActionCost">
                                  <!--The action still has time to help fix the issue-->
                                  <do_if value="$ActionReport.$Sector == $Sector">
                                    <do_if value="$ExistingActionCost gt $HighestActionCost">
                                      <!--If this was a disregarded action for this sector, remember how much worth it had so an action of higher worth can be queued-->
                                      <set_value name="$HighestActionCost" exact="$ExistingActionCost"/>
                                    </do_if>
                                    <set_value name="$ExistingActionsCost" exact="$ExistingActionCost" operation="subtract"/>
                                    <debug_text text="'Action ' + $ActionReportDef.$Type + ' based in ' + $ActionReport.$Sector.knownname + ' is allowed to continue as it may still aid this situation. $ExistingActionCost: ' + $ExistingActionCost + ' - Action ' + $ActionReport" context="false" chance="$DebugChance"/>
                                  </do_if>
                                  <do_else>
                                    <set_value name="$ExistingActionsCost" exact="$ExistingActionCost * $NeighbourActionMultiplier" operation="subtract"/>
                                    <debug_text text="'Action ' + $ActionReportDef.$Type + ' based in ' + $ActionReport.$Sector.knownname + ' is allowed to continue as it may still aid this situation. $ExistingActionCost: ' + ($ExistingActionCost * $NeighbourActionMultiplier) + ' - Action ' + $ActionReport" context="false" chance="$DebugChance"/>
                                  </do_else>
                                </do_if>
                                <do_else>
                                  <debug_text text="'Action ' + $ActionReportDef.$Type + ' based in ' + $ActionReport.$Sector.knownname + ' is ignored as the action category has changed. Action ' + $ActionReport" context="false" chance="$DebugChance"/>
                                </do_else>
                              </do_if>
                            </do_if>
                          </do_all>
                        </do_all>
                        <debug_text text="'$ExistingActionsCost ' + $ExistingActionsCost" context="false" chance="$DebugChance"/>
                      </do_if>
                    </do_for_each>
                    <remove_value name="$RelatedReportFaction"/>
                    <remove_value name="$ExistingActionCost"/>

                    <set_value name="$AdjustedSectorValue" exact="$SectorValue + $ExistingActionsCost"/>

                    <do_if value="$IsProductionIssue">
                      <debug_text filter="economy_verbose" text="'#ECO#;%1;%2;EvaluateSector_Production;%3;%4;%5;%6;%7;%8;%9'.[player.age, null, null, null, null, $Sector.knownname, $Faction.id, $Ware, $AdjustedSectorValue]" context="false"/>
                    </do_if>
                    <do_else>
                      <debug_text filter="economy_verbose" text="'#ECO#;%1;%2;EvaluateSector_Transport;%3;%4;%5;%6;%7;%8;%9'.[player.age, null, null, null, null, $Sector.knownname, $Faction.id, $Ware, $AdjustedSectorValue]" context="false"/>
                    </do_else>

                    <do_if value="$AdjustedSectorValue le 0">
                      <set_value name="$PursueNewAction" exact="false"/>
                    </do_if>
                    <!--Even if there is an action happening in the sector, if $AdjustedSectorValue gets too high, do something else about it-->
                    <!--TODO @Owen review.-->
                    <!--TODO @Owen move this factor to params-->
                    <do_elseif value="$AdjustedSectorValue lt $HighestActionCost * 2">
                      <set_value name="$PursueNewAction" exact="false"/>
                    </do_elseif>

                    <set_value name="$NewActionValid" exact="false"/>
                    <do_if value="$PursueNewAction">
                      <set_value name="$ChosenAction" exact="null"/>

                      <!--Check if the resources for this ware are also insufficient. This may have some actions not be chosen.-->
                      <set_value name="$ResourcesInsufficient" exact="false"/>
                      <do_for_each name="$WareResource" in="$Ware.raceresources.{$Faction.primaryrace}.list">
                        <!--TODO @Owen check if the resources are a shortage in another table-->
                        <do_if value="@$SubTable.{$WareResource} gt $NewProductionInsufficientResourceLimit">
                          <debug_text text="'Sector ' + $Sector + ' ' + $Sector.knownname + ' has insufficient resource ' + $WareResource + ' to produce ' + $Ware + '. This may result in new productions not being considered.'" chance="$DebugChance"/>
                          <set_value name="$ResourcesInsufficient" exact="true"/>
                          <break/>
                        </do_if>
                      </do_for_each>

                      <do_all exact="$ActionThresholdsKeys.count" counter="$ATK_i" reverse="true">
                        <set_value name="$ActionCost" exact="$ActionThresholds.{$ActionThresholdsKeys.{$ATK_i}}"/>
                        <do_if value="$ActionCost le $HighestDisregardedActionCost">
                          <debug_text text="'No viable action to take as a more high-cost action was already attempted'" context="false" chance="$DebugChance"/>
                          <break/>
                        </do_if>
                        <!--Adjusted sector value is high enouth to justify this action and this action is as high or higher cost than the previously disregarded action
                            The highest cost actions are evaluated first, so the most drastic action is taken-->
                        <do_elseif value="$AdjustedSectorValue ge $ActionCost">
                          <set_value name="$ChosenAction" exact="$ActionThresholdsKeys.{$ATK_i}"/>
                          <do_if value="$ChosenAction">
                            <debug_text text="'ACTION: Sector ' + $Sector + ' ' + $Sector.knownname + ' will see if it can solve issues with ware ' + $Ware + ' (priority: ' + $AdjustedSectorValue + ') with action ' + $ChosenAction" context="false" chance="$DebugChance"/>
                            <set_value name="$NewAction" exact="table[]"/>
                            <do_if value="$ChosenAction == '$request_commandeerable_freighter'">
                              <set_value name="$NewActionDef" exact="table[]"/>
                              <set_value name="$NewActionDef.$Type" exact="$ChosenAction"/>
                              <signal_cue_instantly cue="Request_Commandeerable_Freighter" param="[$NewActionDef, $Sector, $Ware, false]"/>
                              <do_if value="$NewActionDef.$Ship?">
                                <!--curtime, object_name, object_id, object_idcode, sector_name, faction_id, ware, station_id, station_idcode-->
                                <debug_text filter="economy_verbose" text="'#FLE#;%1;RequestCommandeerableFreighter;%2;%3;%4;%5;%6;%7'.[player.age, $NewActionDef.$Ship.knownname, $NewActionDef.$Ship, $NewActionDef.$Ship.idcode, $Sector.knownname, $Faction.id, $Ware, '', '']" context="false"/>
                                <set_value name="$NewAction.$ActionDef" exact="$NewActionDef"/>
                                <set_value name="$NewActionValid" exact="true"/>
                              </do_if>
                            </do_if>
                            <do_elseif value="$ChosenAction == '$request_prio_commandeerable_freighter'">
                              <set_value name="$NewActionDef" exact="table[]"/>
                              <set_value name="$NewActionDef.$Type" exact="$ChosenAction"/>
                              <signal_cue_instantly cue="Request_Commandeerable_Freighter" param="[$NewActionDef, $Sector, $Ware, true]"/>
                              <do_if value="$NewActionDef.$Ship?">
                                <!--curtime, object_name, object_id, object_idcode, sector_name, faction_id, ware, station_id, station_idcode-->
                                <debug_text filter="economy_verbose" text="'#FLE#;%1;RequestPrioCommandeerableFreighter;%2;%3;%4;%5;%6;%7'.[player.age, $NewActionDef.$Ship.knownname, $NewActionDef.$Ship, $NewActionDef.$Ship.idcode, $Sector.knownname, $Faction.id, $Ware, '', '']" context="false"/>
                                <set_value name="$NewAction.$ActionDef" exact="$NewActionDef"/>
                                <set_value name="$NewActionValid" exact="true"/>
                              </do_if>
                            </do_elseif>
                            <do_elseif value="$ChosenAction == '$request_freighter'">
                              <set_value name="$NewActionDef" exact="table[]"/>
                              <set_value name="$NewActionDef.$Type" exact="$ChosenAction"/>
                              <signal_cue_instantly cue="Request_Freighter" param="[$NewActionDef, $Sector, $Ware, false, null]"/>
                              <do_if value="$NewActionDef.$Ship?">
                                <!--curtime, object_name, object_id, object_idcode, sector_name, faction_id, ware, station_id, station_idcode-->
                                <debug_text filter="economy_verbose" text="'#FLE#;%1;RequestGenericTransporter;%2;%3;%4;%5;%6;%7'.[player.age, $NewActionDef.$Ship.knownname, $NewActionDef.$Ship, $NewActionDef.$Ship.idcode, $Sector.knownname, $Faction.id, $Ware, '', '']" context="false"/>
                                <set_value name="$NewAction.$ActionDef" exact="$NewActionDef"/>
                                <set_value name="$NewActionValid" exact="true"/>
                              </do_if>
                            </do_elseif>
                            <do_elseif value="$ChosenAction == '$request_priority_freighter'">
                              <set_value name="$NewActionDef" exact="table[]"/>
                              <set_value name="$NewActionDef.$Type" exact="$ChosenAction"/>
                              <signal_cue_instantly cue="Request_Freighter" param="[$NewActionDef, $Sector, $Ware, true, null]"/>
                              <do_if value="$NewActionDef.$Ship?">
                                <!--curtime, object_name, object_id, object_idcode, sector_name, faction_id, ware, station_id, station_idcode-->
                                <debug_text filter="economy_verbose" text="'#FLE#;%1;RequestSpecialisedTransporter;%2;%3;%4;%5;%6;%7'.[player.age, $NewActionDef.$Ship.knownname, $NewActionDef.$Ship, $NewActionDef.$Ship.idcode, $Sector.knownname, $Faction.id, $Ware, '', '']" context="false"/>
                                <set_value name="$NewAction.$ActionDef" exact="$NewActionDef"/>
                                <set_value name="$NewActionValid" exact="true"/>
                              </do_if>
                            </do_elseif>
                            <do_elseif value="$ChosenAction == '$request_production'">
                              <do_if value="$ResourcesInsufficient">
                                <debug_text text="'Sector ' + $Sector + ' ' + $Sector.knownname + ' wanted to add a production for ' + $Ware + ' but also has insufficient resources to produce it. Will attempt to solve another way.'" chance="$DebugChance"/>
                              </do_if>
                              <do_elseif value="$SectorSellOfferValue gt ($SectorBuyOfferValue * 0.9f)">
                                <debug_text text="'Sector ' + $Sector + ' ' + $Sector.knownname + ' wanted to add a production for ' + $Ware + ' but there are already %1 being sold and only %2 being bought - production is not the problem. Will attempt to solve another way.'.[$SectorSellOfferValue, $SectorBuyOfferValue]" chance="$DebugChance"/>
                              </do_elseif>
                              <do_else>
                                <set_value name="$NewActionDef" exact="table[]"/>
                                <set_value name="$NewActionDef.$Type" exact="$ChosenAction"/>
                                <signal_cue_instantly cue="Request_Production_Module" param="[$NewActionDef, $Sector, $Ware, $NeighbouringSectorTable, null]"/>
                                <do_if value="$NewActionDef.$Station?">
                                  <!--curtime, object_name, object_id, object_idcode, sector_name, faction_id, ware, station_id, station_idcode-->
                                  <do_if value="$NewActionDef.$UnpausedProduction?">
                                    <debug_text filter="economy_verbose" text="'#FLE#;%1;RequestNewProduction_UnpauseProduction;%2;%3;%4;%5;%6;%7'.[player.age, $NewActionDef.$Station.knownname, $NewActionDef.$Station, $NewActionDef.$Station.idcode, $Sector.knownname, $Faction.id, $Ware, '', '']" context="false"/>
                                  </do_if>
                                  <set_value name="$NewAction.$ActionDef" exact="$NewActionDef"/>
                                  <set_value name="$NewActionValid" exact="true"/>
                                </do_if>
                              </do_else>
                            </do_elseif>
                            <do_elseif value="$ChosenAction == '$request_factory'">
                              <do_if value="$ResourcesInsufficient">
                                <debug_text text="'Sector ' + $Sector + ' ' + $Sector.knownname + ' wanted to add a factory for ' + $Ware + ' but also has insufficient resources to produce it. Will attempt to solve another way.'" chance="$DebugChance"/>
                              </do_if>
                              <do_elseif value="$SectorSellOfferValue gt ($SectorBuyOfferValue * 0.9f)">
                                <debug_text text="'Sector ' + $Sector + ' ' + $Sector.knownname + ' wanted to add a factory for ' + $Ware + ' but there are already %1 being sold and only %2 being bought - production is not the problem. Will attempt to solve another way.'.[$SectorSellOfferValue, $SectorBuyOfferValue]" chance="$DebugChance"/>
                              </do_elseif>
                              <do_else>
                                <set_value name="$NewActionDef" exact="table[]"/>
                                <set_value name="$NewActionDef.$Type" exact="$ChosenAction"/>
                                <signal_cue_instantly cue="Request_Factory" param="[$NewActionDef, $Sector, $Ware, $NeighbouringSectorTable, null]"/>
                                <do_if value="$NewActionDef.$Station?">
                                  <!--curtime, object_name, object_id, object_idcode, sector_name, faction_id, ware, station_id, station_idcode-->
                                  <do_if value="$NewActionDef.$UnpausedProduction?">
                                    <debug_text filter="economy_verbose" text="'#FLE#;%1;RequestNewFactory_UnpauseProduction;%2;%3;%4;%5;%6;%7'.[player.age, $NewActionDef.$Station.knownname, $NewActionDef.$Station, $NewActionDef.$Station.idcode, $Sector.knownname, $Faction.id, $Ware, '', '']" context="false"/>
                                  </do_if>
                                  <do_else>
                                    <debug_text filter="economy_verbose" text="'#FLE#;%1;RequestNewFactory;%2;%3;%4;%5;%6;%7'.[player.age, $NewActionDef.$Station.knownname, $NewActionDef.$Station, $NewActionDef.$Station.idcode, $Sector.knownname, $Faction.id, $Ware, '', '']" context="false"/>
                                  </do_else>
                                  <set_value name="$NewAction.$ActionDef" exact="$NewActionDef"/>
                                  <set_value name="$NewActionValid" exact="true"/>
                                </do_if>
                              </do_else>
                            </do_elseif>
                            <do_elseif value="$ChosenAction == '$not_viable'">
                              <!--TODO @Owen - find a station to remove the production of-->
                              <!--<debug_text filter="economy_verbose" text="'$FlagProductionNotViable;%1;%2;%3;component.{%4};%5;%6;component.{%7}'.[player.age, $Ware, $Sector.knownname, $Sector, $Faction.knownname, $NewActionDef.$Station.knownname, $NewActionDef.$Station]"/>-->
                              <do_if value="$SectorSellOfferValue gt ($SectorBuyOfferValue * 1.2f)">
                                <debug_text text="'Sector ' + $Sector + ' ' + $Sector.knownname + ' wanted to remove a factory for ' + $Ware + ' but there is still demand for %1 while only %2 are being sold - removing productions will not help. Will attempt to solve another way.'.[$SectorBuyOfferValue, $SectorSellOfferValue]" chance="$DebugChance"/>
                              </do_if>
                              <do_else>
                                <do_if value="true">
                                  <debug_text filter="economy_verbose" text="'#FLE#;%1;FakeRemoveFactory;%2;%3;%4;%5;%6;%7'.[player.age, null, null, null, $Sector.knownname, $Faction.id, $Ware, '', '']" context="false"/>
                                </do_if>
                                <do_else>
                                  <set_value name="$NewActionDef" exact="table[]"/>
                                  <set_value name="$NewActionDef.$Type" exact="$ChosenAction"/>
                                  <signal_cue_instantly cue="Remove_Factory" param="[$NewActionDef, $Sector, $Ware]"/>
                                  <do_if value="$NewActionDef.$Station?">
                                    <!--curtime, object_name, object_id, object_idcode, sector_name, faction_id, ware, station_id, station_idcode-->
                                    <debug_text filter="economy_verbose" text="'#FLE#;%1;RemoveFactory;%2;%3;%4;%5;%6;%7'.[player.age, $NewActionDef.$Station.knownname, $NewActionDef.$Station, $NewActionDef.$Station.idcode, $Sector.knownname, $Faction.id, $Ware, '', '']" context="false"/>
                                    <set_value name="$NewAction.$ActionDef" exact="$NewActionDef"/>
                                    <set_value name="$NewActionValid" exact="true"/>
                                  </do_if>
                                </do_else>
                              </do_else>
                            </do_elseif>
                            <do_else>
                              <debug_text text="'Unknown economic action: ' + $ChosenAction" filter="error"/>
                            </do_else>

                            <do_if value="$NewActionValid">
                              <set_value name="$NewAction.$StartTime" exact="player.age"/>
                              <set_value name="$NewAction.$Sector" exact="$Sector"/>
                              <set_value name="$NewAction.$Ware" exact="$Ware"/>
                              <set_value name="$NewAction.$AggregatedValue" exact="$AdjustedSectorValue"/>
                              <debug_text text="'Successfully added new action ' + $NewAction" context="false" chance="$DebugChance"/>
                              <do_if value="not $ActionReports.{$Sector}?">
                                <set_value name="$ActionReports.{$Sector}" exact="[]"/>
                              </do_if>
                              <append_to_list name="$ActionReports.{$Sector}" exact="$NewAction"/>
                              <debug_text text="'Faction now has econ related actions in ' + $ActionReports.keys.count + ' sector(s). '+ $ActionReports.{$Sector}.count +' action(s) in sector ' + $Sector.knownname" context="false" chance="$DebugChance"/>
                              <break/>
                            </do_if>
                            <do_elseif value="$ChosenAction == '$not_viable'">
                              <do_all chance="50">
                                <debug_text text="'Situation for ware has been deemed not viable. Not taking action.'" context="false" chance="$DebugChance"/>
                                <break/>
                              </do_all>
                            </do_elseif>
                          </do_if>
                        </do_elseif>
                      </do_all>
                    </do_if>

                    <do_if value="not $NewActionValid">
                      <debug_text text="'NO ACTION: Sector ' + $Sector + ' ' + $Sector.knownname + ' decided to take no action for ware ' + $Ware + ' (priority: ' + $AdjustedSectorValue + ')'" context="false" chance="$DebugChance"/>
                    </do_if>
                  </do_all>
                </do_if>

                <!-- increment $TableRefIndex -->
                <set_value name="$TableRefIndex" operation="add" />
                <do_if value="$TableRefIndex gt $TableRef.keys.count">
                  <!-- reached the end of $TableRef, increment $ReportTablesIndex -->
                  <set_value name="$ReportTablesIndex" operation="add" />
                  <do_if value="$ReportTablesIndex gt $ReportTablesToProcess.count">
                    <!-- we are done processing everything -->

                    <!-- cleanup -->
                    <remove_value name="$ReportTablesIndex"/>
                    <remove_value name="$TableRefIndex"/>
                    <remove_value name="$DisregardedActions"/>
                    <remove_value name="$ReportTablesToProcess"/>
                    <remove_value name="$TableRefKeys"/>
                    <remove_value name="$TableRef"/>
                    <remove_value name="$SubTableRefKeys"/>
                    <remove_value name="$SubTable"/>
                    <remove_value name="$ActionThresholdsKeys"/>
                    <remove_value name="$ActionThresholds"/>
                    <remove_value name="$OtherActionThresholdsKeys"/>
                    <remove_value name="$OtherActionThresholds"/>
                    <remove_value name="$IsProductionIssue"/>
                    <remove_value name="$NeighbourSector"/>
                    <remove_value name="$NeighbourSubTable"/>
                    <remove_value name="$NeighbouringSectorTable"/>
                    <remove_value name="$NeighbouringSectorDistanceKeys"/>
                    <remove_value name="$NewAction"/>
                    <remove_value name="$NewActionDef"/>
                    <remove_value name="$CanProduceTable"/>

                    <!-- inform listeners that we have evaluated data -->
                    <signal_cue_instantly cue="md.FactionLogic.FactionSignalled" param="[$Faction, 'shortages evaluated', Econ_Manager]"/>
                    <reset_cue cue="EvaluateShortages"/>
                  </do_if>
                  <do_else>
                    <!-- another round of sector processing with a new $ReportTablesIndex, reset $TableRefIndex -->
                    <set_value name="$TableRefIndex" exact="1" />
                  </do_else>
                </do_if>
                <do_if value="@$ReportTablesIndex and @$TableRefIndex">
                  <reset_cue cue="EvaluateSectorShortage" />
                </do_if>
              </actions>
            </cue>
          </cues>
        </cue>

        <library name="AggregatedReportTableHelper">
          <actions>
            <do_if value="$DebugChance == 100">
              <set_value name="$TableRefKeys" exact="$TableRef.keys.sorted"/>
              <do_all exact="$TableRefKeys.count" counter="$arth_i" reverse="true">
                <debug_text text="'Ware: ' + $TableRefKeys.{$arth_i} + ' value: ' + $TableRef.{$TableRefKeys.{$arth_i}}" context="false"/>
              </do_all>
            </do_if>
          </actions>
        </library>

        <library name="SortedReportTableHelper">
          <actions>
            <do_if value="$DebugChance == 100">
              <do_if value="$TableRef.keys.count">
                <set_value name="$TableRefKeys" exact="$TableRef.keys.list"/>
                <do_all exact="$TableRefKeys.count" counter="$srt_i" reverse="true">
                  <debug_text text="'Ware ' + $TableRef.{$TableRefKeys.{$srt_i}}.$Ware + ' was reported ' + $DebugReportType + ' for ' + $TableRefKeys.{$srt_i} + ' seconds by station: ' + $TableRef.{$TableRefKeys.{$srt_i}}.$Station + ' ' + $TableRef.{$TableRefKeys.{$srt_i}}.$Station.knownname + ' in ' + $TableRef.{$TableRefKeys.{$srt_i}}.$Station.sector.knownname" context="false"/>
                  <do_if value="$srt_i le $TableRefKeys.count - 15">
                    <break/>
                  </do_if>
                </do_all>
                <remove_value name="$TableRefKeys"/>
              </do_if>
            </do_if>
          </actions>
        </library>

        <library name="SectorReportTableHelper">
          <actions>
            <do_if value="$DebugChance == 100">
              <do_if value="$TableRef.keys.count">
                <set_value name="$TableRefKeys" exact="$TableRef.keys.list"/>
                <do_all exact="$TableRefKeys.count" counter="$srt_i">
                  <set_value name="$SubTable" exact="$TableRef.{$TableRefKeys.{$srt_i}}"/>
                  <set_value name="$SubTableRefKeys" exact="$SubTable.keys.list"/>
                  <do_all exact="$SubTableRefKeys.count" counter="$srt_k" reverse="true">
                    <debug_text text="'Sector ' + $TableRefKeys.{$srt_i} + ' ' + $TableRefKeys.{$srt_i}.knownname + ' has ' + $DebugReportType + ' of ware ' + $SubTableRefKeys.{$srt_k} + ' of value ' + $SubTable.{$SubTableRefKeys.{$srt_k}}" context="false"/>
                  </do_all>
                </do_all>
              </do_if>
            </do_if>
          </actions>
        </library>

        <cue name="ReportActions" instantiate="true">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <set_value name="$ActionReportKeys" exact="$ActionReports.keys.list"/>
            <debug_text text="'\n' + player.age + ' ' + $DebugText + 'Action reports for ' + $ActionReportKeys.count + ' sectors'" context="false"/>
            <do_all exact="$ActionReportKeys.count" counter="$i">
              <set_value name="$Sector" exact="$ActionReportKeys.{$i}"/>
              <debug_text text="'\nAction reports for sector ' + $Sector.knownname + ' ' + $Sector + ' (' + $ActionReports.{$Sector}.count + ' reports)'" context="false"/>
              <set_value name="$Actions" exact="$ActionReports.{$Sector}"/>
              <do_all exact="$Actions.count" counter="$k">
                <set_value name="$Action" exact="$Actions.{$k}"/>
                <set_value name="$ActionDef" exact="$Action.$ActionDef"/>
                <debug_text text="'Action ' + $ActionDef.$Type + ' was started at ' + $Action.$StartTime + ' for ware ' + $Action.$Ware + ' (priority: ' + $Action.$AggregatedValue +') in sector ' + $Action.$Sector.knownname + ' ' + $Action.$Sector" context="false"/>
                <do_if value="$ActionDef.$Type == '$request_commandeerable_freighter'">
                  <set_value name="$Ship" exact="$ActionDef.$Ship"/>
                  <do_if value="$Ship.exists">
                    <debug_text text="'- Commandeer freighter request: Ship: ' + $Ship.knownname + ' ' + $Ship + ' in sector ' + $Ship.sector.knownname + ' commandeertime: ' + @$Action.$CommandeerTime" context="false"/>
                  </do_if>
                  <do_else>
                    <debug_text text="'- Ship is no longer valid.'" context="false"/>
                  </do_else>
                </do_if>
                <do_elseif value="$ActionDef.$Type == '$request_prio_commandeerable_freighter'">
                  <set_value name="$Ship" exact="$ActionDef.$Ship"/>
                  <do_if value="$Ship.exists">
                    <debug_text text="'- Commandeer priority freighter request: Ship: ' + $Ship.knownname + ' ' + $Ship + ' in sector ' + $Ship.sector.knownname" context="false"/>
                  </do_if>
                  <do_else>
                    <debug_text text="'- Ship is no longer valid.'" context="false"/>
                  </do_else>
                </do_elseif>
                <do_elseif value="$ActionDef.$Type == '$request_freighter'">
                  <set_value name="$Ship" exact="$ActionDef.$Ship"/>
                  <do_if value="$Ship.exists">
                    <debug_text text="'- Build freighter request: Ship: ' + $Ship.knownname + ' ' + $Ship
                              + ' in sector ' + $Ship.sector.knownname + '. Spawned at: ' + @$ActionDef.$SpawnTime + '. Built at: ' + @$ActionDef.$LaunchTime" context="false"/>
                  </do_if>
                  <do_elseif value="$ActionDef.$SpawnTime?">
                    <debug_text text="'- Freighter request: Ship is invalid. It was spawned at: ' + @$ActionDef.$SpawnTime + ' but no longer exists. Built at: ' + @$ActionDef.$LaunchTime" context="false"/>
                  </do_elseif>
                  <do_elseif value="$Ship.isrealclass.ship">
                    <debug_text text="'- Ship ' + $Ship.knownname + ' ' + $Ship + ' is waiting to be spawned in a shipyard'" context="false"/>
                  </do_elseif>
                  <do_else>
                    <debug_text text="'- Ship is not valid and was never spawned.'" context="false"/>
                  </do_else>
                </do_elseif>
                <do_elseif value="$ActionDef.$Type == '$request_priority_freighter'">
                  <set_value name="$Ship" exact="$ActionDef.$Ship"/>
                  <do_if value="$Ship.exists">
                    <debug_text text="'- Build priority freighter request: Ship: ' + $Ship.knownname + ' ' + $Ship
                              + ' in sector ' + $Ship.sector.knownname + '. Spawned at: ' + @$ActionDef.$SpawnTime + '. Built at: ' + @$ActionDef.$LaunchTime" context="false"/>
                  </do_if>
                  <do_elseif value="$ActionDef.$SpawnTime?">
                    <debug_text text="'- Freighter request: Ship is invalid. It was spawned at: ' + @$ActionDef.$SpawnTime + ' but no longer exists. Built at: ' + @$ActionDef.$LaunchTime" context="false"/>
                  </do_elseif>
                  <do_elseif value="$Ship.isrealclass.ship">
                    <debug_text text="'- Ship ' + $Ship.knownname + ' ' + $Ship + ' is waiting to be spawned in a shipyard'" context="false"/>
                  </do_elseif>
                  <do_else>
                    <debug_text text="'- Ship is not valid and was never spawned.'" context="false"/>
                  </do_else>
                </do_elseif>
                <do_elseif value="$ActionDef.$Type == '$request_production'">
                  <set_value name="$Station" exact="$ActionDef.$Station"/>
                  <do_if value="$Station.exists">
                    <do_if value="$ActionDef.$UnpausedProduction?">
                      <debug_text text="'- Production module request: Station: ' + $Station.knownname + ' ' + $Station
                              + ' in sector ' + $Station.sector.knownname + '. Unpaused ' + @$ActionDef.$ProductionEntries.count + ' productions'" context="false"/>
                    </do_if>
                    <do_else>
                      <debug_text text="'- Production module request: Station: ' + $Station.knownname + ' ' + $Station
                              + ' in sector ' + $Station.sector.knownname + '. Requested ' + @$ActionDef.$ProductionEntries.count + ' productions'" context="false"/>
                    </do_else>
                  </do_if>
                  <do_else>
                    <debug_text text="'- Station does not exist.'" context="false"/>
                  </do_else>
                </do_elseif>
                <do_elseif value="$ActionDef.$Type == '$request_factory'">
                  <set_value name="$Station" exact="$ActionDef.$Station"/>
                  <do_if value="$Station.exists">
                    <debug_text text="'- New factory request: Factory: ' + $Station.knownname + ' ' + $Station
                              + ' in sector ' + $Station.sector.knownname + '. Spawned at: ' + @$ActionDef.$SpawnTime + '. Built at: ' + @$ActionDef.$BuiltTime" context="false"/>
                  </do_if>
                  <do_else>
                    <debug_text text="'- Station does not exist'" context="false"/>
                  </do_else>
                </do_elseif>
                <do_elseif value="$ActionDef.$Type == '$not_viable'">
                  <set_value name="$Station" exact="$ActionDef.$Station"/>
                  <do_if value="$Station.exists">
                    <debug_text text="'- Factory removal request: Factory: ' + $Station.knownname + ' ' + $Station
                              + ' in sector ' + $Station.sector.knownname + '. Spawned at: ' + @$ActionDef.$SpawnTime + '. Built at: ' + @$ActionDef.$BuiltTime" context="false"/>
                  </do_if>
                  <do_else>
                    <debug_text text="'- Station does not exist'" context="false"/>
                  </do_else>
                </do_elseif>
                <do_elseif value="$ActionDef.$Type == '$pause_production'">
                  <set_value name="$Station" exact="$ActionDef.$Station"/>
                  <set_value name="$Module" exact="$ActionDef.$PauseModule"/>
                  <do_if value="$Station.exists and $Module.exists">
                    <debug_text text="'- Production pause request: Factory: ' + $Station.knownname + ' ' + $Station + ' Module: ' + $Module + ' ' + $Module.knownname
                              + ' in sector ' + $Station.sector.knownname + '. Paused at: ' + @$ActionDef.$PauseTime" context="false"/>
                  </do_if>
                  <do_else>
                    <debug_text text="'- Station or module does not exist'" context="false"/>
                  </do_else>
                </do_elseif>
                <do_elseif value="$ActionDef.$Type == '$remove_factory'">
                  <set_value name="$Station" exact="$ActionDef.$Station"/>
                  <do_if value="$Station.exists">
                    <debug_text text="'- Factory removal request: Factory: ' + $Station.knownname + ' ' + $Station
                              + ' in sector ' + $Station.sector.knownname + '. Evac started at: ' + @$ActionDef.$EvacStartTime + '. Evac ended at: ' + @$ActionDef.$EvacFinishTime + '. Recycle stated at: ' + @$ActionDef.$RecycleStartTime" context="false"/>
                  </do_if>
                  <do_else>
                    <debug_text text="'- Station does not exist'" context="false"/>
                  </do_else>
                </do_elseif>
                <do_else>
                  <debug_text text="'- Unknown economic action: ' + $ActionDef"/>
                </do_else>
              </do_all>
            </do_all>
            <remove_value name="$ActionReportKeys"/>
          </actions>
        </cue>

        <!--event.param [$ActionDef, $Requester object/sector, $Ware, $Priority]-->
        <cue name="Request_Commandeerable_Freighter" instantiate="true" namespace="this" version="4">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>

            <set_value name="$DebugChance" exact="0"/>
            <set_value name="$AIDebugChance" exact="0"/>
            <set_value name="$ActionDefinition" exact="event.param.{1}"/>
            <set_value name="$Requester" exact="event.param.{2}"/>
            <set_value name="$Ware" exact="event.param.{3}"/>
            <set_value name="$Priority" exact="event.param.{4}"/>
            <set_value name="$Faction" exact="parent.$Faction"/>

            <do_if value="$Requester.isclass.sector">
              <set_value name="$RequestSector" exact="$Requester"/>
            </do_if>
            <do_else>
              <set_value name="$RequestSector" exact="$Requester.sector"/>
            </do_else>

            <set_value name="$Miner" exact="$Ware.hastag.minable"/>
            <set_value name="$IsMineral" exact="$Miner and $Ware.hastag.mineral"/>
            <set_value name="$DebugText" exact="parent.$DebugText + '(Request_Commandeerable_Freighter) '" chance="$DebugChance"/>

            <debug_text text="$DebugText + player.age + ': Sector ' + $RequestSector + ' ' + $RequestSector.knownname + ' requested a commandeerable ' + (if $Miner then 'miner' else 'transporter') + ' for ' + $Ware + '. Priority: ' + $Priority + '. Requester: ' + $Requester" context="false" chance="$DebugChance"/>

            <set_value name="$Ship" exact="null"/>

            <!--Early out check for factions with no suitable job ships-->
            <get_suitable_job result="$TestJob" tags="[tag.factionlogic, tag.freighter]" faction="$Faction"/>
            <do_if value="$TestJob">
              <remove_value name="$TestJob"/>
              <find_cluster_in_range distances="$LocalClusterDistances" object="$RequestSector" maxdistance="if $Priority then 5 else 3" multiple="true"/>
              <set_value name="$LocalClusters" exact="$LocalClusterDistances.keys.sorted"/>
              <do_all exact="$LocalClusters.count" counter="$i">
                <do_if value="$Priority">
                  <!--TODO @Owen filter if the ship can carry the ware-->
                  <set_value name="$PotentialShips" exact="[]"/>
                  <find_ship_by_true_owner name="$Temp_PotentialShips" faction="$Faction" commandeerable="true" requestedjobship="false" jobtags="[tag.factionlogic, tag.freighter]" space="$LocalClusters.{$i}" multiple="true"/>
                  <do_all exact="$Temp_PotentialShips.count" counter="$k">
                    <!--Prioritise ships with the ware in their basket-->
                    <do_if value="$Temp_PotentialShips.{$k}.warebasket.{$Ware}.exists">
                      <set_value name="$PotentialShips.{1}" operation="insert" exact="$Temp_PotentialShips.{$k}"/>
                    </do_if>
                    <do_elseif value="$Temp_PotentialShips.{$k}.cargo.{$Ware}.max">
                      <append_to_list name="$PotentialShips" exact="$Temp_PotentialShips.{$k}"/>
                    </do_elseif>
                  </do_all>
                  <remove_value name="$Temp_PotentialShips"/>
                </do_if>
                <do_else>
                  <find_ship_by_true_owner name="$PotentialShips" faction="$Faction" commandeerable="true" requestedjobship="false" jobtags="[tag.factionlogic, tag.freighter]" space="$LocalClusters.{$i}" multiple="true">
                    <match_basket_wares wares="$Ware"/>
                  </find_ship_by_true_owner>
                </do_else>
                <debug_text text="'found ' + $PotentialShips.count + ' in ' + $LocalClusters.{$i}.knownname + ' at dist ' + $LocalClusterDistances.{$LocalClusters.{$i}}" chance="$DebugChance"/>
                <do_all exact="$PotentialShips.count" counter="$k">
                  <set_value name="$PotentialShip" exact="$PotentialShips.{$k}"/>
                  <do_if value="$IsMineral">
                    <find_object_component name="$MiningLaser" weaponmode="weaponmode.mining" checkoperational="true" object="$PotentialShip"/>
                    <do_if value="not $MiningLaser">
                      <!--No mining laser, try next ship-->
                      <remove_value name="$MiningLaser"/>
                      <continue/>
                    </do_if>
                    <remove_value name="$MiningLaser"/>
                  </do_if>
                  <do_if value="$PotentialShip.tradeorders.count == 0">
                    <!--Ship currently not performing a trade-->
                    <set_value name="$Ship" exact="$PotentialShip"/>
                    <break/>
                  </do_if>
                  <do_elseif value="$LocalClusterDistances.{$LocalClusters.{$i}} le 3 and $PotentialShip.tradeorders.count == 1 and (@$PotentialShip.tradeorders.{1}.trade.seller == $PotentialShip or not @$PotentialShip.tradeorders.{1}.trade.seller)">
                    <!--Ship is a bit more distant but is finishing a trade run-->
                    <set_value name="$Ship" exact="$PotentialShip"/>
                    <break/>
                  </do_elseif>
                </do_all>
                <do_if value="$Ship">
                  <break/>
                </do_if>
              </do_all>
              <remove_value name="$LocalClusterDistances"/>
              <remove_value name="$LocalClusters"/>
              <remove_value name="$PotentialShips"/>
              <remove_value name="$PotentialShip"/>
              <remove_value name="$IsMineral"/>

              <do_if value="$Ship.exists">
                <set_value name="$ActionDefinition.$Ship" exact="$Ship"/>
                <set_value name="$ActionDefinition.$CommandeerTime" exact="player.age"/>
                <commandeer_object object="$Ship"/>
                <debug_text text="$DebugText + 'Ship ' + $Ship + ' ' + $Ship.knownname + ' commandeered'" context="false" chance="$DebugChance"/>
                <set_value name="$Duration" exact="if $Priority then 3h else 1.5h"/>
                <set_value name="$Timeout" exact="player.age + $Duration"/>
                <do_if value="$Priority and $Requester.isclass.container">
                  <!--Set commander -->
                  <create_order id="'AssignCommander'" object="$Ship">
                    <param name="commander" value="$Requester"/>
                    <param name="assignment" value="if $Miner then assignment.mining else assignment.trade"/>
                    <param name="cancelorders" value="false"/>
                    <param name="debugchance" value="$AIDebugChance"/>
                  </create_order>
                </do_if>
                <do_if value="$Miner">
                  <!-- Miner -->
                  <create_order id="'MiningRoutine'" object="$Ship">
                    <param name="warebasket" value="[$Ware]"/>
                    <param name="range" value="$RequestSector"/>
                    <param name="minbuy" value="0" />
                    <param name="maxbuy" value="5" />
                    <param name="minsell" value="0" />
                    <param name="maxsell" value="0" />
                    <param name="endtime" value="$Timeout"/>
                    <param name="debugchance" value="$AIDebugChance"/>
                  </create_order>
                </do_if>
                <do_else>
                  <!-- Trader -->
                  <create_order id="'TradeRoutine'" object="$Ship">
                    <param name="warebasket" value="[$Ware]"/>
                    <param name="range" value="$RequestSector"/>
                    <param name="maxbuy" value="5"/>
                    <param name="endtime" value="$Timeout"/>
                    <param name="debugchance" value="$AIDebugChance"/>
                  </create_order>
                </do_else>
                <do_if value="$Priority and $Requester.isclass.container">
                  <!--Queue up order to remove commander when task is done -->
                  <create_order id="'AssignCommander'" object="$Ship">
                    <param name="cancelorders" value="false"/>
                    <param name="debugchance" value="$AIDebugChance"/>
                  </create_order>
                </do_if>
              </do_if>
              <do_else>
                <debug_text text="$DebugText + ' No suitable ships found for this purpose. Abort'" context="false" chance="$DebugChance"/>
                <cancel_cue cue="Request_Commandeerable_Freighter"/>
              </do_else>
            </do_if>
            <do_else>
              <debug_text text="$DebugText + ' No suitable job ship definitions for this purpose. Abort'" context="false" chance="$DebugChance"/>
              <cancel_cue cue="Request_Commandeerable_Freighter"/>
            </do_else>
          </actions>
          <patch sinceversion="3">
            <do_if value="not $Requester?">
              <set_value name="$Requester" exact="$RequestSector"/>
            </do_if>
          </patch>
          <patch sinceversion="4">
            <do_if value="not $Timeout?">
              <set_value name="$Timeout" exact="this.time + 5h"/>
            </do_if>
          </patch>
          <cues>
            <!--TODO @Owen changed owner?-->
            <cue name="Request_Commandeerable_Freighter_Disregard_Patch" checkinterval="30min">
              <conditions>
                <check_value value="player.age ge $Timeout"/>
              </conditions>
              <!--Give the Faction Logic enough time to clean it up properly as new cleanup logic was added-->
              <delay exact="30min"/>
              <actions>
                <!--This is to patch these actions which may have been forgotten by the Faction Logic.-->
                <set_value name="$ActionDefinition.$Disregard" exact="true"/>
                <do_if value="$Priority and $Ship.commander.exists and ($Ship.commander == $Requester)">
                  <!-- make sure we clear the commander again -->
                  <remove_object_commander object="$Ship"/>
                </do_if>
                <!--<do_else>
                  <debug_text text="'Removing commandeerable freighter action for ' + $Ship + ' ' + $Ship.knownname + ' as it appears to have been forgotten by ' + $Faction + ' - expected to hit during build 0.8 [Owen]'" filter="error"/>
                </do_else>-->
                <release_commandeered_object object="$Ship"/>
                <cancel_cue cue="Request_Commandeerable_Freighter"/>
              </actions>
            </cue>
            <cue name="Request_Commandeerable_Freighter_Disregarded">
              <conditions>
                <event_object_signalled object="$Ship" param="'factionlogic_econ_disregard'"/>
                <check_value value="event.param2 == '$request_commandeerable_freighter' or event.param2 == '$request_prio_commandeerable_freighter'"/>
              </conditions>
              <actions>
                <debug_text text="$DebugText + ' Commandeered ship ' + $Ship.knownname + ' ' + $Ship  + ' for ware ' + $Ware + ' was disregarded by economic faction logic'" context="false" chance="$DebugChance"/>
                <release_commandeered_object object="$Ship"/>
                <cancel_cue cue="Request_Commandeerable_Freighter"/>
              </actions>
            </cue>
            <cue name="Request_Commandeerable_Freighter_Destroyed">
              <conditions>
                <event_object_destroyed object="$Ship"/>
              </conditions>
              <actions>
                <debug_text text="$DebugText + ' Commandeered ship ' + $Ship.knownname + ' ' + $Ship  + ' for ware ' + $Ware + ' was destroyed by ' + event.param + ' ' + @event.param.knownname + ' (' + event.param2 + ') in ' + $Ship.sector.knownname + ' ' + $Ship.sector" context="false" chance="$DebugChance"/>
                <cancel_cue cue="Request_Commandeerable_Freighter"/>
              </actions>
            </cue>
          </cues>
        </cue>

        <!--event.param [$ActionDef, $Sector, $Ware, $Priority, $Zone(optional)]-->
        <cue name="Request_Freighter" instantiate="true" namespace="this" version="3">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>

            <set_value name="$DebugChance" exact="0"/>
            <set_value name="$AIDebugChance" exact="0"/>
            <set_value name="$ActionDefinition" exact="event.param.{1}"/>
            <set_value name="$Requester" exact="event.param.{2}"/>
            <set_value name="$Ware" exact="event.param.{3}"/>
            <set_value name="$Priority" exact="event.param.{4}"/>
            <set_value name="$Faction" exact="parent.$Faction"/>
            <set_value name="$JobZone" exact="null"/>
            <do_if value="$Requester.isclass.sector">
              <set_value name="$RequestSector" exact="$Requester"/>
            </do_if>
            <do_else>
              <set_value name="$RequestSector" exact="$Requester.sector"/>
            </do_else>
            <do_if value="@event.param.{5}">
              <set_value name="$JobZone" exact="event.param.{5}"/>
            </do_if>
            <do_elseif value="$Requester.isclass.station">
              <set_value name="$JobZone" exact="$Requester.zone"/>
            </do_elseif>
            <do_elseif value="$RequestSector.isclass.sector">
              <find_zone name="$JobZone" space="$RequestSector">
                <match_child class="class.station" owner="$Faction" checkoperational="true"/>
              </find_zone>
              <do_if value="not $JobZone">
                <!--Just default to any zone with a station-->
                <find_zone name="$JobZone" space="$RequestSector">
                  <match_child class="class.station" checkoperational="true"/>
                </find_zone>
              </do_if>
            </do_elseif>
            <do_else>
              <assert value="false" text="'No valid Requester for Request_Freighter cue, aborting!\nRequester is %1 (class %2) [Michael]'.[$Requester, @$Requester.class]" break="1"/>
              <cancel_cue cue="Request_Freighter"/>
            </do_else>

            <set_value name="$Salvager" exact="false"/>
            <set_value name="$Miner" exact="$Ware.hastag.minable"/>
            <assert value="not $Miner or not ($Ware.isprocessed and $Ware.hastag.recycling)" text="'Ware is tagged for both mining and recycling processing. Unknown case for faction logic to solve [Owen]'"/>
            <do_if value="not $Miner">
              <set_value name="$Salvager" exact="$Ware.isprocessed and $Ware.hastag.recycling"/>
            </do_if>
            <!--TODO: cancel_requested_ship ship="$waitingship"-->
            <!--TODO @Owen pass in space as 'requester' and have the job find the object by context to that space. Requester remains the object. How slow is this?-->
            <do_if value="$DebugChance == 100">
              <set_value name="$DebugText" exact="parent.$DebugText + '(Request_Freighter) '"/>
              <debug_text text="$DebugText + player.age + ': Sector ' + $RequestSector + ' ' + $RequestSector.knownname + ' requested a ' + (if $Miner then 'miner' else (if $Salvager then 'tug' else 'transporter')) + ' for ' + $Ware + ' ' + if $Priority then ' PRIORITY ' else ' NON-PRIORITY'" context="false"/>
              <find_requested_job_ship name="$PreviousRequested" requester="$RequestSector" ware="$Ware" multiple="true"/>
              <do_if value="$PreviousRequested.count">
                <debug_text text="$PreviousRequested.count + ' ships have already been requested for this purpose'" context="false"/>
              </do_if>
              <do_else>
                <debug_text text="'No ships have currently been requested for this purpose'" context="false"/>
              </do_else>
            </do_if>
            <do_if value="$Miner">
              <get_suitable_job result="$Jobs" faction="$Faction" tags="[tag.factionlogic, tag.miner]" ware="$Ware" multiple="true"/>
            </do_if>
            <do_elseif value="$Salvager">
              <!--TODO @Owen - tug or compactor?-->
              <get_suitable_job result="$Jobs" faction="$Faction" tags="[tag.factionlogic, tag.tug]" ware="$Ware" multiple="true"/>
            </do_elseif>
            <do_else>
              <get_suitable_job result="$Jobs" faction="$Faction" tags="[tag.factionlogic, tag.trader]" ware="$Ware" multiple="true"/>
            </do_else>
            <set_value name="$Ship" exact="null"/>
            <do_if value="$Jobs.count">
              <shuffle_list list="$Jobs"/>
              <do_while value="$Jobs.count">
                <request_job_ship name="$Ship" job="$Jobs.{1}" requester="$RequestSector" ware="$Ware" zone="$JobZone"/>
                <do_if value="$Ship">
                  <!--Set a base timeout several hours from now-->
                  <set_requested_job_ship_timeout ship="$Ship" timeout="player.age + (if $Priority then 4h else 2h)"/>
                  <debug_text text="$DebugText + 'Ship ' + $Ship + ' ' + $Ship.knownname + ' requested from job ' + $Jobs.{1}" context="false" chance="$DebugChance"/>
                  <break/>
                </do_if>
                <do_else>
                  <debug_text text="$DebugText + 'ship unable to be requested for job ' + $Jobs.{1}" context="false" chance="$DebugChance"/>
                  <remove_value name="$Jobs.{1}"/>
                </do_else>
              </do_while>
            </do_if>
            <do_else>
              <debug_text text="$DebugText + ' No job ships defined for this purpose - ' + $Ware + ' . Abort'" context="false" chance="$DebugChance"/>
            </do_else>

            <do_if value="$Ship">
              <set_value name="$ActionDefinition.$Ship" exact="$Ship"/>
            </do_if>
            <do_else>
              <cancel_cue cue="Request_Freighter"/>
            </do_else>
          </actions>
          <patch sinceversion="2">
            <do_if value="not $Requester?">
              <set_value name="$Requester" exact="$RequestSector"/>
            </do_if>
          </patch>
          <patch sinceversion="3">
            <set_value name="$Salvager" exact="false"/>
          </patch>
          <cues>
            <cue name="Request_Freighter_Disregarded">
              <conditions>
                <event_object_signalled object="$Ship" param="'factionlogic_econ_disregard'"/>
                <check_value value="(not $Priority and event.param2 == '$request_freighter') or ($Priority and event.param2 == '$request_priority_freighter')"/>
              </conditions>
              <actions>
                <debug_text text="$DebugText + ' Requested ship ' + $Ship.knownname + ' ' + $Ship  + ' for ware ' + $Ware + ' was disregarded by economic faction logic'" context="false" chance="$DebugChance"/>
                <remove_job_ship_request ship="$Ship"/>
                <cancel_cue cue="Request_Freighter"/>
              </actions>
            </cue>
            <cue name="Request_Freighter_Destroyed">
              <conditions>
                <event_object_destroyed object="$Ship"/>
              </conditions>
              <actions>
                <debug_text text="$DebugText + ' Requested ship ' + $Ship.knownname + ' ' + $Ship  + ' for ware ' + $Ware + ' was destroyed by ' + event.param + ' ' + @event.param.knownname + ' (' + event.param2 + ') in ' + @$Ship.sector.knownname + ' ' + @$Ship.sector" context="false" chance="$DebugChance"/>
                <cancel_cue cue="Request_Freighter"/>
              </actions>
            </cue>
            <cue name="Request_Freighter_Spawned">
              <conditions>
                <!--TODO @Owen, better condition?-->
                <event_object_docked object="$Ship"/>
              </conditions>
              <actions>
                <debug_text text="$DebugText + ' Requested ship ' + $Ship.knownname + ' ' + $Ship  + ' for ware ' + $Ware + ' spawned in ' + if $Ship.container then $Ship.container.knownname else ' space of ' + $Ship.sector.knownname + ' ' + $Ship.sector" context="false" chance="$DebugChance"/>
                <set_value name="$ActionDefinition.$SpawnTime" exact="player.age"/>
              </actions>
            </cue>
            <!--HACK TODO @Owen event for unregistering a requested ship-->
            <cue name="Request_Freighter_Not_Requested" checkinterval="1s">
              <conditions>
                <check_value value="not $Ship.isrequestedjobship"/>
              </conditions>
              <actions>
                <debug_text text="$DebugText + ' Requested ship ' + $Ship.knownname + ' ' + $Ship  + ' for ware ' + $Ware + ' had its request removed.'" context="false" chance="$DebugChance"/>
                <cancel_cue cue="Request_Freighter"/>
              </actions>
            </cue>
            <cue name="Request_Freighter_Built">
              <conditions>
                <event_object_signalled object="$Ship" param="'build.shiptrader'" param2="'requested_ship_built'"/>
              </conditions>
              <actions>
                <debug_text text="$DebugText + player.age + ': Ship ' + $Ship.knownname + ' ' + $Ship + ' built in ' + $Ship.zone.knownname + ' ' + $Ship.zone" context="false" chance="$DebugChance"/>

                <set_value name="$ActionDefinition.$LaunchTime" exact="player.age"/>
                <set_value name="$Duration" exact="if $Priority then 4h else 2h"/>
                <set_value name="$Timeout" exact="player.age + $Duration"/>
                <set_requested_job_ship_timeout ship="$Ship" timeout="$Timeout"/>
                <do_if value="$Priority and $Requester.isclass.container">
                  <!--Queue up order to remove commander when order is done (order in reverse due to immediate inserting order at the front) -->
                  <create_order id="'AssignCommander'" object="$Ship" immediate="true">
                    <param name="cancelorders" value="false"/>
                    <param name="debugchance" value="$AIDebugChance"/>
                  </create_order>
                </do_if>
                <do_if value="$Miner">
                  <!-- Miner -->
                  <create_order id="'MiningRoutine'" object="$Ship" immediate="true">
                    <param name="warebasket" value="[$Ware]"/>
                    <param name="range" value="$RequestSector"/>
                    <param name="minbuy" value="0" />
                    <param name="maxbuy" value="5" />
                    <param name="minsell" value="0" />
                    <param name="maxsell" value="0" />
                    <param name="endtime" value="$Timeout"/>
                    <param name="debugchance" value="$AIDebugChance"/>
                  </create_order>
                </do_if>
                <do_elseif value="$Salvager">
                  <!--Salvage vessel-->
                  <create_order id="'SalvageRoutine'" object="$Ship" immediate="true">
                    <param name="warebasket" value="[$Ware]"/>
                    <param name="anchorspace" value="$RequestSector"/>
                    <param name="range" value="5"/>
                    <param name="duration" value="$Duration"/>
                    <param name="debugchance" value="$AIDebugChance"/>
                  </create_order>
                </do_elseif>
                <do_else>
                  <!-- Trader -->
                  <create_order id="'TradeRoutine'" object="$Ship" immediate="true">
                    <param name="warebasket" value="[$Ware]"/>
                    <param name="range" value="$RequestSector"/>
                    <param name="maxbuy" value="5"/>
                    <param name="endtime" value="$Timeout"/>
                    <param name="debugchance" value="$AIDebugChance"/>
                  </create_order>
                </do_else>
                <do_if value="$Priority and $Requester.isclass.container">
                  <!--Set commander -->
                  <create_order id="'AssignCommander'" object="$Ship" immediate="true">
                    <param name="commander" value="$Requester"/>
                    <param name="assignment" value="if $Miner then assignment.mining else (if $Salvager then assignment.salvage else assignment.trade)"/>
                    <param name="cancelorders" value="false"/>
                    <param name="debugchance" value="$AIDebugChance"/>
                  </create_order>
                </do_if>
                <cancel_cue cue="Request_Freighter"/>
              </actions>
            </cue>
          </cues>
        </cue>

        <!--event.param [$ActionDef, $Sector, $Product, $Station(optional)]-->
        <cue name="Pause_Production_Module" instantiate="true" namespace="this">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>

            <set_value name="$DebugChance" exact="0"/>
            <set_value name="$ActionDefinition" exact="event.param.{1}"/>
            <set_value name="$RequestSector" exact="event.param.{2}"/>
            <set_value name="$Product" exact="event.param.{3}"/>
            <set_value name="$Faction" exact="parent.$Faction"/>
            <set_value name="$Station" exact="null"/>

            <set_value name="$DebugText" exact="parent.$DebugText + ' (Pause_Production_Module) '" chance="$DebugChance"/>

            <debug_text text="$DebugText + player.age + ': Sector ' + $RequestSector + ' ' + $RequestSector.knownname + ' requested to PAUSE a production module for product: ' + $Product" context="false" chance="$DebugChance"/>

            <do_if value="not $RequestSector.isclass.sector and typeof $Product != datatype.ware and typeof $Faction != datatype.faction">
              <debug_text text="'Invalid parameters for Pause_Production_Module action. Sector : ' + $RequestSector + ' Product: ' + $Product + ' Faction: ' + $Faction" filter="error"/>
              <cancel_cue cue="Pause_Production_Module"/>
            </do_if>
            <do_elseif value="$Product.hastag.minable">
              <debug_text text="$DebugText + player.age + ': Sector ' + $RequestSector + ' ' + $RequestSector.knownname + ' disregarding production module PAUSE request for minable ware: ' + $Product" context="false" chance="$DebugChance"/>
              <cancel_cue cue="Pause_Production_Module"/>
            </do_elseif>
            <do_else>
              <do_if value="@event.param.{4}">
                <set_value name="$Station" exact="event.param.{4}"/>
              </do_if>
              <do_else>
                <!-- find a station in this sector that has a production for $Product that we can pause -->
                <find_station_by_true_owner name="$Station" faction="$Faction" space="$RequestSector" checkoperational="true" canequipships="false" tradestation="false" headquarters="false">
                  <match_child class="class.production" pausedmanually="false">
                    <match_products wares="$Product"/>
                  </match_child>
                </find_station_by_true_owner>
              </do_else>

              <do_if value="$Station">
                <debug_text text="$DebugText + player.age + ' ' + $Station + ' ' + $Station.knownname + ' selected as the factory to pause a production for ' + $Product" context="false" chance="$DebugChance"/>
                <find_object_component object="$Station" name="$ProductionModule" checkoperational="true" class="class.production" pausedmanually="false">
                  <match_products wares="$Product"/>
                </find_object_component>
                <do_if value="$ProductionModule">
                  <set_production_paused object="$ProductionModule" paused="true"/>
                  <set_value name="$ActionDefinition.$Station" exact="$Station"/>
                  <set_value name="$ActionDefinition.$PauseModule" exact="$ProductionModule"/>
                  <set_value name="$ActionDefinition.$PauseTime" exact="player.age"/>
                </do_if>
                <do_else>
                  <debug_text text="$DebugText + player.age + ' unable to find suitable production module'" context="false" chance="$DebugChance"/>
                  <cancel_cue cue="Pause_Production_Module"/>
                </do_else>
              </do_if>
              <do_else>
                <debug_text text="$DebugText + player.age + ' no station could be selected as the factory to pause a production for ' + $Product" context="false" chance="$DebugChance"/>
                <cancel_cue cue="Pause_Production_Module"/>
              </do_else>
            </do_else>
          </actions>
          <cues>
            <cue name="Pause_Production_Module_Disregarded">
              <conditions>
                <event_object_signalled object="$Station" param="'factionlogic_econ_disregard'" param2="'$pause_production'" param3="$ProductionModule"/>
              </conditions>
              <actions>
                <debug_text text="$DebugText + ' Paused production of ' + $Station.knownname + ' ' + $Station + ' for production ' + $Product + ' was disregarded by economic faction logic. Unpausing'" context="false" chance="$DebugChance"/>
                <do_if value="$ProductionModule.exists">
                  <set_production_paused object="$ProductionModule" paused="false"/>
                </do_if>
                <cancel_cue cue="Pause_Production_Module"/>
              </actions>
            </cue>

            <cue name="Pause_Production_Module_Destoryed">
              <conditions>
                <event_object_destroyed object="$Station"/>
              </conditions>
              <actions>
                <debug_text text="$DebugText + player.age + ': Factory ' + $Station.knownname + ' ' + $Station + ' was destroyed.'" context="false" chance="$DebugChance"/>
                <cancel_cue cue="Pause_Production_Module"/>
              </actions>
            </cue>
          </cues>
        </cue>

        <!--event.param [$ActionDef, $Sector, $Product, $NeighbouringSectorTable, $Station(optional)]-->
        <cue name="Request_Production_Module" instantiate="true" namespace="this" version="3">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>

            <set_value name="$DebugChance" exact="0"/>
            <set_value name="$ActionDefinition" exact="event.param.{1}"/>
            <set_value name="$RequestSector" exact="event.param.{2}"/>
            <set_value name="$Product" exact="event.param.{3}"/>
            <!--Reference to $NeighbouringSectorTable will be removed at the end of this cue as it's no longer needed-->
            <set_value name="$NeighbouringSectorTable" exact="event.param.{4}"/>
            <set_value name="$Faction" exact="parent.$Faction"/>
            <set_value name="$BusyStations" exact="parent.$BusyStations"/>
            <set_value name="$Station" exact="null"/>

            <!--Some extensions may set this flag for certain factions. Base-game factions do not respect compatibility when expanding.-->
            <set_value name="$CheckProductionCompatibility" exact="false"/>

            <set_value name="$DebugText" exact="parent.$DebugText + ' (Request_Production_Module) '" chance="$DebugChance"/>

            <debug_text text="$DebugText + player.age + ': Sector ' + $RequestSector + ' ' + $RequestSector.knownname + ' requested a new production module for product: ' + $Product" context="false" chance="$DebugChance"/>

            <do_if value="not $RequestSector.isclass.sector and typeof $Product != datatype.ware and typeof $Faction != datatype.faction">
              <debug_text text="'Invalid parameters for Request_Production_Module action. Sector : ' + $RequestSector + ' Product: ' + $Product + ' Faction: ' + $Faction" filter="error"/>
              <cancel_cue cue="Request_Production_Module"/>
            </do_if>
            <do_elseif value="$Product.hastag.minable">
              <debug_text text="$DebugText + player.age + ': Sector ' + $RequestSector + ' ' + $RequestSector.knownname + ' disregarding production module request for minable ware: ' + $Product" context="false" chance="$DebugChance"/>
              <cancel_cue cue="Request_Production_Module"/>
            </do_elseif>
            <do_else>
              <do_if value="@event.param.{5}">
                <set_value name="$Station" exact="event.param.{5}"/>
              </do_if>
              <do_else>
                <!-- Step 1: find all stations in this and neighbouring sectors that have a paused production for $Product -->
                <set_value name="$NeighbouringSectorDistanceKeys" exact="$NeighbouringSectorTable.keys.list"/>
                <do_all exact="$NeighbouringSectorDistanceKeys.count" counter="$NSDK_i">
                  <set_value name="$JumpDist" exact="$NeighbouringSectorDistanceKeys.{$NSDK_i}"/>
                  <shuffle_list list="$NeighbouringSectorTable.{$JumpDist}"/>
                  <do_all exact="$NeighbouringSectorTable.{$JumpDist}.count" counter="$NS_i">
                    <find_station_by_true_owner name="$PausedStation" faction="$Faction" space="$NeighbouringSectorTable.{$JumpDist}.{$NS_i}" checkoperational="true">
                      <match_child class="class.production" pausedmanually="true">
                        <match_products wares="$Product"/>
                      </match_child>
                    </find_station_by_true_owner>
                    <do_if value="$PausedStation.exists">
                      <break/>
                    </do_if>
                  </do_all>
                  <do_if value="$PausedStation.exists">
                    <break/>
                  </do_if>
                </do_all>
                <remove_value name="$NeighbouringSectorTable"/>
                <remove_value name="$NeighbouringSectorDistanceKeys"/>
                <do_if value="$PausedStation.exists">
                  <find_object_component object="$PausedStation" name="$PausedProductionModule" checkoperational="true" class="class.production" pausedmanually="true">
                    <match_products wares="$Product"/>
                  </find_object_component>
                </do_if>
                <run_actions ref="Check_Production_Location_Suitablility" result="$IsProductionSuitable">
                  <param name="Sector" value="$RequestSector"/>
                  <param name="Ware" value="$Product"/>
                  <param name="Faction" value="$Faction"/>
                </run_actions>
                <do_if value="@$PausedStation.exists and @$PausedProductionModule.exists">
                  <!-- if we found something to unpause, we're good and can stop here -->
                  <set_production_paused object="$PausedProductionModule" paused="false"/>
                  <set_value name="$ActionDefinition.$Station" exact="$PausedStation"/>
                  <set_value name="$ActionDefinition.$UnpausedProduction" exact="true"/>
                  <set_value name="$ActionDefinition.$ProductionEntries" exact="[$PausedProductionModule]"/>
                  <set_value name="$ActionDefinition.$StartBuildTime" exact="player.age"/>
                  <set_value name="$ActionDefinition.$BuiltTime" exact="player.age"/>
                  <set_value name="$ActionDefinition.$LastBuildTime" exact="player.age"/>
                </do_if>
                <do_elseif value="not $IsProductionSuitable">
                  <set_value name="$Station" exact="null"/>
                  <debug_text text="$DebugText + player.age + ': Sector ' + $RequestSector + ' ' + $RequestSector.knownname + ' disregarding new production request for ' + $Product + ' production as the sectors environment is not suitable'" context="false" chance="$DebugChance"/>
                </do_elseif>
                <do_else>
                  <!--Step 2: find all stations with productions in the sector and check if they are suitable to expand. May include those which have not yet been constructed.-->
                  <!-- make sure there cannot be a $station variable left over from the Step 1 search -->
                  <set_value name="$Station" exact="null"/>
                  <find_station_by_true_owner name="$Stations" faction="$Faction" space="$RequestSector" checkoperational="false" multiple="true" excluded="$BusyStations"/>
                  <!--TODO @Owen - new filters for construction sequence contents e.g. filter out those with more than 5 productions in the plan?-->

                  <set_value name="$StationsTable" exact="table[]"/>
                  <!--TODO @Owen - better evaluate which station to expand-->
                  <!--TODO @Owen - take module compatibilities into account?-->

                  <set_value name="$ProductionPlanned" exact="false"/>

                  <!--$CheckProductionCompatibility being set will lead to check_production_allowed being called which enforces compatibilities defined in modules.xml and quotas in god.xml-->
                  <do_if value="$CheckProductionCompatibility">
                    <do_for_each name="$CheckedStation" in="$Stations">
                      <do_if value="$CheckedStation.buildstorage">
                        <set_value name="$HasProduction" exact="false"/>
                        <set_value name="$ConstructionPlan" exact="null"/>

                        <check_object result="$HasProduction" object="$CheckedStation">
                          <match_child class="class.production" min="1"/>
                        </check_object>
                        <do_if value="not $HasProduction">
                          <set_value name="$ConstructionPlan" exact="$CheckedStation.plannedconstruction.sequence"/>
                          <do_if value="$ConstructionPlan">
                            <do_all exact="$ConstructionPlan.count" counter="$plan_i">
                              <do_if value="$ConstructionPlan.{$plan_i}.macro.isclass.production">
                                <set_value name="$HasProduction" exact="true"/>
                                <break/>
                              </do_if>
                            </do_all>
                          </do_if>
                        </do_if>
                      </do_if>
                      <do_if value="$HasProduction">
                        <check_production_allowed result="$IsAllowed" object="$CheckedStation" ware="$Product"/>
                        <do_if value="$IsAllowed">
                          <!--Prefer expanding smaller stations-->
                          <set_value name="$StationsTable.{$CheckedStation}" operation="add" exact="100 - (if $ConstructionPlan then $ConstructionPlan.count else $CheckedStation.plannedconstruction.sequence.count)"/>
                        </do_if>
                      </do_if>
                    </do_for_each>
                    <remove_value name="$HasProduction"/>
                  </do_if>
                  <do_else>
                    <!--If $CheckProductionCompatibility is not set, use the old behaviour which counts the number of productions to prevent huge stations and prefers stations with similar productions-->
                    <do_all exact="$Stations.count" counter="$i" reverse="true">
                      <set_value name="$Remove" exact="false"/>
                      <set_value name="$ProductionCount" exact="0"/>
                      <set_value name="$ProductionsMatched" exact="false"/>

                      <do_if value="$Stations.{$i}.buildstorage">
                        <set_value name="$ConstructionPlan" exact="$Stations.{$i}.plannedconstruction.sequence"/>
                        <do_if value="$ConstructionPlan">
                          <do_all exact="$ConstructionPlan.count" counter="$plan_i">
                            <do_if value="$ConstructionPlan.{$plan_i}.macro.isclass.production">
                              <set_value name="$ProductionCount" operation="add"/>
                              <!--TODO @Owen get the module limit from parameters.xml-->
                              <do_if value="$ProductionCount ge 5">
                                <!--Too many productions planned. Disregard-->
                                <set_value name="$Remove" exact="true"/>
                                <break/>
                              </do_if>
                              <do_if value="$ConstructionPlan.{$plan_i}.macro.products.{$Product}.exists">
                                <do_if value="not $Stations.{$i}.planmodule.{$ConstructionPlan.{$plan_i}.id}.isoperational">
                                  <set_value name="$ProductionPlanned" exact="true"/>
                                  <debug_text text="$DebugText + 'Station ' + $Stations.{$i} + ' ' + $Stations.{$i}.knownname + ' in sector ' + $RequestSector + ' ' + $RequestSector.knownname + ' already has a planned production module for ' + $Product + ' in its construction plan (may be planned, under construction or wrecked). Do not attempt to build another just yet.'" context="false" chance="$DebugChance"/>
                                  <break/>
                                </do_if>
                                <do_else>
                                  <set_value name="$ProductionsMatched" exact="true"/>
                                </do_else>
                              </do_if>
                            </do_if>
                          </do_all>
                        </do_if>
                        <do_else>
                          <set_value name="$Remove" exact="true"/>
                        </do_else>
                      </do_if>
                      <do_else>
                        <set_value name="$Remove" exact="true"/>
                      </do_else>

                      <do_if value="$ProductionPlanned">
                        <break/>
                      </do_if>
                      <do_elseif value="$Remove or $ProductionCount == 0">
                        <!--Station was not suitable or is not a planned factory-->
                        <remove_value name="$Stations.{$i}"/>
                      </do_elseif>
                      <do_else>
                        <do_if value="$ProductionsMatched">
                          <!--station is already producing this ware, give it a higher score-->
                          <set_value name="$StationsTable.{$Stations.{$i}}" operation="add" exact="50"/>
                        </do_if>
                        <do_else>
                          <set_value name="$StationsTable.{$Stations.{$i}}" operation="add" exact="20"/>
                        </do_else>
                      </do_else>
                    </do_all>
                  </do_else>

                  <do_if value="not $ProductionPlanned">
                    <!--TODO @Owen this isn't selecting via weighting but just a preferred order.-->
                    <set_value name="$StationKeys" exact="$StationsTable.keys.sorted"/>
                    <do_if value="$StationKeys.count">
                      <set_value name="$StationIndex" min="1" max="$StationKeys.count" profile="increasing"/>
                      <set_value name="$Station" exact="$StationKeys.{$StationIndex}"/>
                    </do_if>
                  </do_if>
                  <remove_value name="$Stations"/>
                  <remove_value name="$ConstructionPlan"/>
                  <remove_value name="$StationsTable"/>
                </do_else>
              </do_else>

              <do_if value="@$PausedProductionModule">
                <debug_text text="$DebugText + player.age + ' ' + $PausedStation + ' ' + $PausedStation.knownname + ' selected as the factory to unpause production for product ' + $Product" context="false" chance="$DebugChance"/>
                <cancel_cue cue="Request_Production_Module"/>
              </do_if>
              <do_elseif value="$Station">
                <debug_text text="$DebugText + player.age + ' ' + $Station + ' ' + $Station.knownname + ' selected as the factory to expand for product ' + $Product" context="false" chance="$DebugChance"/>

                <set_value name="$ModuleSet" exact="$Station.modulesets.{1}" />
                <set_value name="$WantedProductions" exact="[]"/>

                <get_module_definition macro="$ProductionMacro" tags="[tag.production, tag.module]" set="$ModuleSet" faction="$Faction" ware="$Product"/>
                <do_if value="$ProductionMacro">
                  <append_to_list name="$WantedProductions" exact="$ProductionMacro"/>
                </do_if>
                <do_else>
                  <debug_text text="'Unable to create a production module for ware ' + $Product" chance="$DebugChance"/>
                </do_else>

                <do_if value="$WantedProductions.count">
                  <do_all chance="$DebugChance">
                    <debug_text text="'Wants productions:'"/>
                    <do_all exact="$WantedProductions.count" counter="$i">
                      <debug_text text="' - ' + $WantedProductions.{$i}"/>
                    </do_all>
                  </do_all>

                  <!--Calculate what other modules should be added to the station-->
                  <set_value name="$CurrentlyPlanned" exact="$Station.plannedconstruction.sequence"/>
                  <!--The requested productions are the starting entries of several lists-->
                  <set_value name="$NewModules" exact="$WantedProductions.clone"/>
                  <set_value name="$ResultingProductions" exact="$WantedProductions.clone"/>
                  <set_value name="$LatestPlannedModules" exact="$WantedProductions.clone"/>
                  <set_value name="$ExistingStorage" exact="[]"/>
                  <debug_text text="'Stations current plan has ' + $CurrentlyPlanned.count + ' entries'" chance="$DebugChance"/>
                  <do_all exact="$CurrentlyPlanned.count" counter="$i">
                    <append_to_list name="$LatestPlannedModules" exact="$CurrentlyPlanned.{$i}.macro"/>
                    <do_if value="$CurrentlyPlanned.{$i}.macro.isclass.production">
                      <append_to_list name="$ResultingProductions" exact="$CurrentlyPlanned.{$i}.macro"/>
                    </do_if>
                    <do_elseif value="$CurrentlyPlanned.{$i}.macro.isclass.storage">
                      <append_to_list name="$ExistingStorage" exact="$CurrentlyPlanned.{$i}.macro"/>
                    </do_elseif>
                  </do_all>

                  <!--Using the production modules in the current plan in addition to the newly requested productions, calculate storage requirements-->
                  <get_module_definition macro="$ViableStorageModules" faction="$Station.owner" tags="[tag.storage, tag.module]" set="$ModuleSet" multiple="true" />
                  <get_suitable_storage_modules result="$NewStorageModules" production="$ResultingProductions" storage="$ExistingStorage" macros="$ViableStorageModules"/>
                  <do_all exact="$NewStorageModules.count" counter="$i">
                    <debug_text text="'Wants additional storage ' + $NewStorageModules.{$i}" chance="$DebugChance"/>
                    <append_to_list name="$NewModules" exact="$NewStorageModules.{$i}"/>
                    <append_to_list name="$LatestPlannedModules" exact="$NewStorageModules.{$i}"/>
                  </do_all>

                  <!--Run FinaliseStations libraries-->
                  <set_value name="$DebugFileName" exact="md.$SystemTimeAtGamestart + '_' + $Station" comment="The name of the file to which the log will be saved. This is 'faction_logic.txt'" />
                  <set_value name="$DebugDirectory" exact="'faction_logic'" comment="The directory under which log files should be kept" />
                  <set_value name="$DebugOutput" exact="false" comment="Should the log file also be printed to VS output? - Make sure this is false for release builds" />

                  <set_value name="$AddModules" exact="table[]" />
                  <set_value name="$PlannedModules" exact="$LatestPlannedModules.clone"/>

                  <!--Additional docks-->
                  <include_actions ref="md.FinaliseStations.DefaultCalculateDocks"/>
                  <!--Additional piers-->
                  <do_if value="$Station.owner != faction.xenon">
                    <!-- Xenon do not use capital trading ships, no need for piers -->
                    <include_actions ref="md.FinaliseStations.DefaultCalculatePiers"/>
                  </do_if>
                  <!--Additional defence modules-->
                  <set_value name="$Def_UseModules" exact="true"/>
                  <include_actions ref="md.FinaliseStations.DefaultCalculateDefence"/>

                  <do_all exact="$AddModules.keys.count" counter="$ModuleCounter">
                    <set_value name="$ModuleToAdd" exact="$AddModules.keys.{$ModuleCounter}" />
                    <set_value name="$NumberToAdd" exact="$AddModules.{$ModuleToAdd}" />

                    <do_all exact="$NumberToAdd">
                      <append_to_list name="$NewModules" exact="$ModuleToAdd" />
                    </do_all>
                  </do_all>

                  <get_module_definition macro="$ViableConnectionModules" faction="$Station.owner" tags="[tag.connection, tag.module]" set="$ModuleSet" multiple="true" />
                  <!-- add $Station to $BusyStations group so it won't be found as a potential station for another production module while the construction sequence generation is in progress -->
                  <add_to_group groupname="$BusyStations" object="$Station"/>
                  <!-- Processing continues in Request_Production_Module_Generate_Sequence IFF $CreateConstructionSequence has been set.  -->
                  <set_value name="$CreateConstructionSequence"/>
                </do_if>
                <do_else>
                  <debug_text text="$DebugText + player.age + ' unable to find suitable production modules'" context="false" chance="$DebugChance"/>
                  <cancel_cue cue="Request_Production_Module"/>
                </do_else>
              </do_elseif>
              <do_else>
                <debug_text text="$DebugText + player.age + ' no station could be selected as the factory to expand for product ' + $Product" context="false" chance="$DebugChance"/>
                <cancel_cue cue="Request_Production_Module"/>
              </do_else>
            </do_else>
          </actions>
          <patch sinceversion="2" state="complete">
            <set_value name="$Product" exact="$Products.{1}"/>
            <remove_value name="$Products"/>
          </patch>
          <patch sinceversion="3" state="complete">
            <do_if value="@$PausedProductionModule or not $Station.isoperational">
              <debug_text text="'cleaning up dead instance related to ' + $Product + ' for ' + $Faction + ' in ' + $RequestSector.knownname" filter="savegame"/>
              <cancel_cue cue="Request_Production_Module"/>
            </do_if>
          </patch>
          <cues>
            <cue name="Request_Production_Module_Generate_Sequence" onfail="cancel">
              <conditions>
                <!-- patch compatibility: only generate sequence if this variable exists
                before this cue and its children were introduced (3.00 Beta 6) <create_construction_sequence /> happened immediately in Request_Production_Module, sometimes causing noticeable stutters
                and we do not want older versions to generate the sequence again -->
                <check_value value="$CreateConstructionSequence?"/>
              </conditions>
              <actions>
                <!-- This will start the process of generating a construction sequence on a different thread. This action returns immediately. -->
                <do_if value="$Station and $NewModules.count and $ViableConnectionModules">
                  <create_construction_sequence station="$Station" base="$Station.plannedconstruction.sequence" macros="$NewModules" connectors="$ViableConnectionModules" />
                  <debug_text filter="economy_verbose" text="'#FLE#;%1;RequestNewProduction;%2;%3;%4;%5;%6;%7'.[player.age, $Station.knownname, $Station, $Station.idcode, $RequestSector.knownname, $Faction.id, $Product, '', '']" context="false"/>
                </do_if>
                <do_else>
                  <debug_text text="$DebugText + player.age + ' missing required data to generate construction sequence'" context="false" chance="$DebugChance"/>
                  <cancel_cue cue="Request_Production_Module"/>
                </do_else>
              </actions>
              <cues>
                <cue name="Request_Production_Module_Sequence_Generated">
                  <conditions>
                    <event_object_construction_sequence_created object="$Station" />
                    <debug_text text="$DebugText + player.age + ' Generated construction sequence for: ' + $Station + ' sequence: ' + event.param + ' success: '+ event.param2" source="false" debugchance="$DebugChance"/>
                  </conditions>
                  <actions>
                    <remove_from_group group="$BusyStations" object="$Station"/>
                    <do_if value="event.param and event.param2">
                      <cancel_cue cue="Request_Production_Module_Sequence_Aborted"/>
                      <!--Successful construction sequence generation-->
                      <set_value name="$ConstructionSequence" exact="event.param"/>
                      <set_value name="$ActionDefinition.$Station" exact="$Station"/>

                      <set_value name="$ProductionEntries" exact="[]"/>
                      <do_all exact="$ConstructionSequence.count" counter="$i">
                        <do_if value="$i == ($CurrentlyPlanned.count + 1)">
                          <debug_text text="'New modules:'" chance="$DebugChance" />
                        </do_if>
                        <debug_text text="$ConstructionSequence.{$i}.macro" chance="$DebugChance" />

                        <do_if value="$i gt $CurrentlyPlanned.count and $WantedProductions.indexof.{$ConstructionSequence.{$i}.macro}">
                          <append_to_list name="$ProductionEntries" exact="$ConstructionSequence.{$i}.id"/>
                          <debug_text text="'Production entry to track: ' + $ConstructionSequence.{$i}.id" chance="$DebugChance" />
                        </do_if>
                      </do_all>
                      <do_if value="$ProductionEntries.count == 0 and player.debug">
                        <debug_text text="'\n\tObject: %1 (%2, %3)\n\t$CurrentlyPlanned = %4'.[$Station.knownname, $Station.idcode, $Station, $CurrentlyPlanned]"/>
                        <do_all exact="$CurrentlyPlanned.count" counter="$e">
                          <debug_text text="'\t\t' + $CurrentlyPlanned.{$e}.macro" context="false" />
                        </do_all>
                        <debug_text text="'\t$WantedProductions = ' + $WantedProductions" context="false"/>
                        <do_for_each name="$WantedMacro" in="$WantedProductions">
                          <debug_text text="'\t\t' + $WantedMacro" context="false" />
                        </do_for_each>
                        <debug_text text="'\t$NewModules = ' + $NewModules" context="false"/>
                        <do_for_each name="$ModuleMacro" in="$NewModules">
                          <debug_text text="'\t\t' + $ModuleMacro" context="false" />
                        </do_for_each>
                        <debug_text text="'\t$ConstructionSequence = ' + $ConstructionSequence" context="false"/>
                        <do_all exact="$ConstructionSequence.count" counter="$e">
                          <debug_text text="'\t\t' + $ConstructionSequence.{$e}.macro" context="false" />
                        </do_all>
                      </do_if>
                      <assert value="$ProductionEntries.count" text="'No prodution entries present [Owen]'" break="1"/>
                      <!--The list of production entry IDs are not cloned. This library may modify them-->
                      <set_value name="$ActionDefinition.$ProductionEntries" exact="$ProductionEntries"/>
                      <add_build_to_expand_station result="$BuildTask" buildobject="$Station" object="$Station.buildstorage" constructionplan="$ConstructionSequence"/>
                      <remove_value name="$NewModules"/>
                      <remove_value name="$CreateConstructionSequence"/>
                      <remove_value name="$ConstructionSequence"/>
                    </do_if>
                    <do_else>
                      <!-- Failed to generate construction sequence -->
                      <cancel_cue cue="Request_Production_Module"/>
                    </do_else>
                  </actions>
                </cue>

                <cue name="Request_Production_Module_Sequence_Aborted">
                  <conditions>
                    <event_game_loaded/>
                  </conditions>
                  <actions>
                    <!-- a pending construction sequence generation would be lost, reset to try again  -->
                    <do_if value="$Station and @$NewModules.count and @$ViableConnectionModules">
                      <reset_cue cue="Request_Production_Module_Generate_Sequence"/>
                    </do_if>
                    <do_else>
                      <!-- Failed to generate construction sequence -->
                      <remove_from_group group="$BusyStations" object="$Station"/>
                      <cancel_cue cue="Request_Production_Module"/>
                    </do_else>
                  </actions>
                </cue>
              </cues>
            </cue>

            <cue name="Request_Production_Module_Disregarded">
              <conditions>
                <event_object_signalled object="$Station" param="'factionlogic_econ_disregard'" param2="'$request_production'"/>
              </conditions>
              <actions>
                <debug_text text="$DebugText + ' Station expansion of  ' + $Station.knownname + ' ' + $Station + ' for production ' + $Product + ' was disregarded by economic faction logic'" context="false" chance="$DebugChance"/>
                <!--TODO @Owen - halt construction?-->
                <cancel_cue cue="Request_Production_Module"/>
              </actions>
            </cue>

            <cue name="Request_Production_Module_Destoryed">
              <conditions>
                <event_object_destroyed object="$Station"/>
              </conditions>
              <actions>
                <debug_text text="$DebugText + player.age + ': Factory ' + $Station.knownname + ' ' + $Station + ' was destroyed.'" context="false" chance="$DebugChance"/>
                <cancel_cue cue="Request_Production_Module"/>
              </actions>
            </cue>

            <!--Wait for when a build has started where the construction sequence includes one of the production components-->
            <cue name="Request_Production_Module_Started">
              <conditions>
                <event_build_started object="$Station.buildstorage"/>
                <check_value value="event.param2.count"/>
                <check_value value="$ProductionEntries?"/>
                <check_any exact="$ProductionEntries.count" counter="$i">
                  <check_value value="event.param2.{$ProductionEntries.{$i}}.exists"/>
                </check_any>
              </conditions>
              <actions>
                <set_value name="$ActionDefinition.$StartBuildTime" exact="player.age"/>
                <debug_text text="$DebugText + player.age + ': Factory ' + $Station.knownname + ' ' + $Station + ' started construction related to new productions.'" context="false" chance="$DebugChance"/>
              </actions>
              <cues>
                <!--Keep the list of production entries in the action definition up to date-->
                <cue name="Request_Production_Module_Evaluate_Build" instantiate="true">
                  <conditions>
                    <event_build_finished_components object="$Station.buildstorage"/>
                  </conditions>
                  <actions>
                    <set_value name="$PlannedSequence" exact="$Station.plannedconstruction.sequence"/>

                    <do_all exact="$ProductionEntries.count" counter="$i" reverse="true">
                      <do_if value="not $PlannedSequence.{$ProductionEntries.{$i}}.exists">
                        <remove_value name="$ProductionEntries.{$i}"/>
                        <continue/>
                      </do_if>

                      <do_if value="$Station.planmodule.{$ProductionEntries.{$i}}.isoperational">
                        <signal_objects object="player.galaxy" param="'station expanded'" param2="$Station"/>
                        <do_if value="not $ActionDefinition.$FinishedProductionEntries?">
                          <set_value name="$ActionDefinition.$FinishedProductionEntries" exact="[]"/>
                        </do_if>
                        <append_to_list name="$ActionDefinition.$FinishedProductionEntries" exact="$ProductionEntries.{$i}"/>
                        <set_value name="$ActionDefinition.$LastBuildTime" exact="player.age"/>

                        <do_if value="$ActionDefinition.$FinishedProductionEntries.count ge $ProductionEntries.count">
                          <!--All production modules built-->
                          <debug_text text="$DebugText + player.age + ': Factory ' + $Station.knownname + ' ' + $Station + ' all productions built.'" context="false" chance="$DebugChance"/>
                          <set_value name="$ActionDefinition.$BuiltTime" exact="player.age"/>
                          <!-- request a ship that works for this station to ensure it gets up and running fast -->
                          <signal_cue_instantly cue="RequestProductionFreighter" param="[$ActionDefinition, $Station, $Product, true]"/>
                          <cancel_cue cue="Request_Production_Module_Started"/>
                        </do_if>
                      </do_if>
                    </do_all>
                  </actions>
                </cue>
              </cues>
            </cue>
          </cues>
        </cue>

        <!--event.param [$ActionDef, $Sector, $Ware, $NeighbouringSectorTable, $Zone(optional)]-->
        <cue name="Request_Factory" instantiate="true" namespace="this">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <set_value name="$DebugChance" exact="0"/>
            <set_value name="$GeneratorDebugChance" exact="0"/>
            <set_value name="$ActionDefinition" exact="event.param.{1}"/>
            <set_value name="$RequestSector" exact="event.param.{2}"/>
            <set_value name="$Ware" exact="event.param.{3}"/>
            <!--Reference to $NeighbouringSectorTable will be removed at the end of this cue as it's no longer needed-->
            <set_value name="$NeighbouringSectorTable" exact="event.param.{4}"/>
            <set_value name="$Faction" exact="parent.$Faction"/>
            <set_value name="$Zone" exact="null"/>

            <set_value name="$Station" exact="null"/>
            <set_value name="$DebugText" exact="parent.$DebugText + ' (Request_Factory) '" chance="$DebugChance"/>
            <debug_text text="$DebugText + 'Checking if it is viable to construct a new factory for ware ' + $Ware + ' in sector ' + $RequestSector.knownname" context="false" chance="$DebugChance"/>

            <set_value name="$StuckStations" exact="0"/>
            <set_value name="$StuckStationLimit" exact="2"/>
            <set_value name="$PausedStation" exact="null"/>
            <set_value name="$PausedProductionModule" exact="null"/>
            <run_actions ref="Check_Production_Location_Suitablility" result="$IsProductionSuitable">
              <param name="Sector" value="$RequestSector"/>
              <param name="Ware" value="$Ware"/>
              <param name="Faction" value="$Faction"/>
            </run_actions>
            <do_if value="$Ware.hastag.minable">
              <debug_text text="$DebugText + player.age + ': Sector ' + $RequestSector + ' ' + $RequestSector.knownname + ' disregarding factory request for minable ware: ' + $Ware" context="false" chance="$DebugChance"/>
            </do_if>
            <do_elseif value="not $IsProductionSuitable">
              <debug_text text="$DebugText + player.age + ': Sector ' + $RequestSector + ' ' + $RequestSector.knownname + ' disregarding factory request for ' + $Ware + ' production as the sectors environment is not suitable'" context="false" chance="$DebugChance"/>
            </do_elseif>
            <do_else>
              <!-- Step 1: find all stations in this and neighbouring sectors that have a paused production for $Ware -->
              <set_value name="$NeighbouringSectorDistanceKeys" exact="$NeighbouringSectorTable.keys.list"/>
              <do_all exact="$NeighbouringSectorDistanceKeys.count" counter="$NSDK_i">
                <set_value name="$JumpDist" exact="$NeighbouringSectorDistanceKeys.{$NSDK_i}"/>
                <shuffle_list list="$NeighbouringSectorTable.{$JumpDist}"/>
                <do_for_each name="$SearchSector" in="$NeighbouringSectorTable.{$JumpDist}">
                  <!--If checking the request sector, also check if any factories are having trouble producing this ware. If so, we may not request a new factory-->
                  <do_if value="$SearchSector == $RequestSector">
                    <find_station_by_true_owner name="$CheckedStations" faction="$Faction" space="$SearchSector" checkoperational="true" multiple="true"/>
                    <shuffle_list list="$CheckedStations"/>
                    <do_for_each name="$CheckedStation" in="$CheckedStations">
                      <set_value name="$InsufficientReport" exact="null"/>
                      <set_value name="$FoundStuckProduction" exact="false"/>
                      <set_value name="$ProducingModules" exact="$CheckedStation.productions"/>
                      <append_list_elements name="$ProducingModules" other="$CheckedStation.processingmodules"/>
                      <do_for_each name="$CheckedProduction" in="$ProducingModules">
                        <!--NOTE: $CheckedProduction can be a production or processing module-->
                        <do_if value="$CheckedProduction.products.{$Ware}.exists">
                          <!--Check if paused, and if not, check if the resources are insufficient-->
                          <do_if value="@$CheckedProduction.ispausedmanually">
                            <set_value name="$PausedStation" exact="$CheckedStation"/>
                            <set_value name="$PausedProductionModule" exact="$CheckedProduction"/>
                            <break/>
                          </do_if>
                          <do_elseif value="not $InsufficientReport">
                            <generate_shortage_reports object="$CheckedStation" insufficient="$InsufficientReport" type="class.production" includeprocessed="true"/>
                            <do_for_each name="$Resource" in="$CheckedProduction.resources.list">
                              <do_if value="$InsufficientReport.{$Resource}?">
                                <set_value name="$FoundStuckProduction" exact="true"/>
                                <break/>
                              </do_if>
                            </do_for_each>
                            <do_if value="$FoundStuckProduction">
                              <!--If a stuck production is found, continue checking other factories-->
                              <set_value name="$StuckStations" operation="add"/>
                              <break/>
                            </do_if>
                          </do_elseif>
                        </do_if>
                      </do_for_each>
                      <do_if value="$PausedProductionModule.exists">
                        <!--If a paused production is found, don't check any other stations-->
                        <break/>
                      </do_if>
                      <do_elseif value="$StuckStations ge $StuckStationLimit">
                        <!--If too many factories are stuck with this ware, no need to check more-->
                        <break/>
                      </do_elseif>
                    </do_for_each>
                  </do_if>
                  <do_else>
                    <find_station_by_true_owner name="$PausedStation" faction="$Faction" space="$SearchSector" checkoperational="true">
                      <match_child class="class.production" pausedmanually="true">
                        <match_products wares="$Ware"/>
                      </match_child>
                    </find_station_by_true_owner>
                  </do_else>
                  <do_if value="$PausedStation.exists">
                    <break/>
                  </do_if>
                </do_for_each>
                <do_if value="$PausedStation.exists">
                  <break/>
                </do_if>
              </do_all>
              <remove_value name="$NeighbouringSectorTable"/>
              <remove_value name="$NeighbouringSectorDistanceKeys"/>
              <remove_value name="$ProducingModules"/>
              <do_if value="$PausedStation.exists and not @$PausedProductionModule">
                <find_object_component object="$PausedStation" name="$PausedProductionModule" checkoperational="true" class="class.production" pausedmanually="true">
                  <match_products wares="$Ware"/>
                </find_object_component>
              </do_if>

              <do_if value="@$PausedStation.exists and @$PausedProductionModule.exists">
                <!-- if we found something to unpause, we're good and can stop here -->
                <set_production_paused object="$PausedProductionModule" paused="false"/>
                <set_value name="$ActionDefinition.$Station" exact="$PausedStation"/>
                <set_value name="$ActionDefinition.$UnpausedProduction" exact="$PausedProductionModule"/>
                <set_value name="$ActionDefinition.$StartBuildTime" exact="player.age"/>
                <set_value name="$ActionDefinition.$BuiltTime" exact="player.age"/>
                <set_value name="$ActionDefinition.$LastBuildTime" exact="player.age"/>
                <debug_text text="$DebugText + player.age + ' ' + $PausedStation + ' ' + $PausedStation.knownname + ' selected as the factory to unpause production for product ' + $Ware" context="false" chance="$DebugChance"/>
              </do_if>
              <do_elseif value="$StuckStations ge $StuckStationLimit">
                <debug_text text="$DebugText + player.age + ' there are already too many factories having resource issues for product ' + $Ware + ' do not add another factory'" context="false" chance="$DebugChance"/>
              </do_elseif>
              <do_else>
                <remove_value name="$StuckStations"/>
                <remove_value name="$StuckStationLimit"/>
                <remove_value name="$PausedStation"/>
                <remove_value name="$PausedProductionModule"/>

                <!--TODO @Owen - support requesting allies for productions if $Faction can't build it themselves-->
                <set_value name="$ExtraTags" exact="[]"/>
                <do_if value="$RequestSector.containsthewave">
                  <append_to_list name="$ExtraTags" exact="tag.condensate"/>
                </do_if>
                <get_module_definition reference="$ModuleDefinition" ware="$Ware" tags="$ExtraTags" faction="$Faction"/>

                <do_if value="$ModuleDefinition">
                  <debug_text text="$DebugText + player.age + ': Sector ' + $RequestSector + ' ' + $RequestSector.knownname + ' requested a factory for ' + $Ware" context="false" chance="$DebugChance"/>
                  <do_if value="@event.param.{5}">
                    <set_value name="$Zone" exact="event.param.{5}"/>
                  </do_if>
                  <do_else>
                    <find_zone name="$Zone" space="$RequestSector" chance="50">
                      <match_child class="class.station" owner="$Faction" checkoperational="true" max="3"/>
                    </find_zone>
                    <do_if value="not $Zone">
                      <set_value name="$BuildInSector" exact="true"/>
                    </do_if>
                  </do_else>
                </do_if>
                <do_else>
                  <debug_text text="$DebugText + player.age + ': Sector ' + $RequestSector + ' ' + $RequestSector.knownname + ' requested a factory for ' + $Ware + ' but is unable to produce the ware'" context="false" chance="$DebugChance"/>
                </do_else>
                <remove_value name="$ModuleDefinition"/>

                <do_if value="$Zone or @$BuildInSector">
                  <!--Find all stations with productions in the sector and check if they have any planned production modules for this product-->
                  <find_station_by_true_owner name="$Stations" faction="$Faction" space="$RequestSector" hasbuildingtask="true" checkoperational="false" multiple="true"/>

                  <set_value name="$ProductionPlanned" exact="false"/>

                  <do_for_each name="$ExistingStation" in="$Stations">
                    <do_if value="$ExistingStation.buildstorage">
                      <set_value name="$ConstructionPlan" exact="$ExistingStation.plannedconstruction.sequence"/>
                      <do_if value="$ConstructionPlan">
                        <do_all exact="$ConstructionPlan.count" counter="$plan_i">
                          <do_if value="$ConstructionPlan.{$plan_i}.macro.isclass.production">
                            <do_if value="$ConstructionPlan.{$plan_i}.macro.products.{$Ware}.exists">
                              <do_if value="not $ExistingStation.planmodule.{$ConstructionPlan.{$plan_i}.id}.isoperational">
                                <set_value name="$ProductionPlanned" exact="true"/>
                                <debug_text text="$DebugText + 'Station ' + $ExistingStation + ' ' + $ExistingStation.knownname + ' in sector ' + $RequestSector + ' ' + $RequestSector.knownname + ' already has a planned production module for ' + $Ware + ' in its construction plan (may be planned, under construction or wrecked). Do not attempt to build another just yet.'" context="false" chance="$DebugChance"/>
                                <break/>
                              </do_if>
                            </do_if>
                          </do_if>
                        </do_all>
                      </do_if>
                    </do_if>

                    <do_if value="$ProductionPlanned">
                      <break/>
                    </do_if>
                  </do_for_each>
                  <remove_value name="$Stations"/>

                  <do_if value="not $ProductionPlanned">
                    <!--############# Disabled.
                    Limit the production modules to a 1-5 bell curve. Module compatibilities defined in modules.xml remain. Should the value here exceed the value in modules.xml, this value is ignored.-->
                    <!--<set_value name="$ProductionLimit" min="1" max="5" profile="bell"/>
                    ##############-->

                    <!--Only request a small factory at first.-->
                    <!-- NOTE: if the ware is the result of processing a recycling ware, we need to increase the production limit to account for the auto-combined productions that are part of the module definitions for the ware. -->
                    <set_value name="$ProductionLimit" exact="if $Ware.hastag.recycling then 3 else 1"/>
                    <do_if value="@$BuildInSector">
                      <set_value name="$SectorCentre" exact="$RequestSector.coreposition"/>
                      <set_value name="$SectorCoreSize" exact="$RequestSector.coresize / 2"/>
                      <set_value name="$Yaw" min="0deg" max="360deg"/>
                      <set_value name="$Y" min="$SectorCentre.y - 10km" max="$SectorCentre.y + 10km"/>
                      <set_value name="$PlacementDist" min="0km" max="$SectorCoreSize" profile="bell" scale="2"/>
                      <create_factory name="$Station" modules="$Modules" resultbasesequence="$BaseSequence" sector="$RequestSector" race="$Faction.primaryrace" owner="$Faction" originalproduct="$Ware">
                        <compatibilities>
                          <limits production="$ProductionLimit"/>
                        </compatibilities>
                        <select ware="$Ware" faction="$Faction" tags="$ExtraTags"/>
                        <safepos x="$SectorCentre.x + sin($Yaw) * $PlacementDist" y="$Y" z="$SectorCentre.z + cos($Yaw) * $PlacementDist" includeplotbox="true" radius="3km"/>
                      </create_factory>
                      <remove_value name="$SectorCentre"/>
                      <remove_value name="$SectorCoreSize"/>
                      <remove_value name="$Yaw"/>
                      <remove_value name="$Y"/>
                      <remove_value name="$PlacementDist"/>
                    </do_if>
                    <do_else>
                      <create_factory name="$Station" modules="$Modules" resultbasesequence="$BaseSequence" zone="$Zone" race="$Faction.primaryrace" owner="$Faction" originalproduct="$Ware">
                        <compatibilities>
                          <limits production="$ProductionLimit"/>
                        </compatibilities>
                        <select ware="$Ware" faction="$Faction" tags="$ExtraTags"/>
                        <safepos max="40km" allowyaxis="false" includeplotbox="true" radius="3km"/>
                      </create_factory>
                    </do_else>
                  </do_if>
                </do_if>
              </do_else>
            </do_else>

            <do_if value="$Station">
              <set_value name="$ActionDefinition.$Station" exact="$Station"/>
              <debug_text text="$DebugText + player.age + ': Factory ' + $Station + ' was placed in ' + $Station.zone.knownname + ' ' + $Station + ' of sector ' + $Station.sector.knownname + ' ' + $Station.sector + ' to help produce ' + $Ware" context="false" chance="$DebugChance"/>
            </do_if>
            <do_else>
              <cancel_cue cue="Request_Factory"/>
            </do_else>
          </actions>
          <cues>
            <cue name="Request_Factory_Finalise" ref="md.FinaliseStations.NewStation_GenerateFactory">
              <param name="Station" value="$Station" comment="Existing and bare station, already placed in universe"/>
              <param name="NewPlannedModules" value="$Modules" comment="List of module macros"/>
              <param name="BaseSequence" value="$BaseSequence" comment="Base construction sequence to add $PlannedModules to"/>
              <param name="ModuleSet" value="$Station.modulesets.{1}" comment="Module set to be used"/>
              <param name="AddHabitation" value="false"/>
              <param name="AddBuild" value="true" comment="Add a build task for the station on its build storage?"/>
              <param name="ReportCue" value="Request_Factory_Finalised" comment="Cue to be signalled when this library wants to inform the caller"/>
              <param name="DebugOutput" value="$GeneratorDebugChance == 100"/>
            </cue>

            <cue name="Request_Factory_Finalised">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <debug_text text="$DebugText + player.age + ': Factory ' + $Station.knownname + ' ' + $Station + ' has finished finalising its construction plan. In ' + $Station.sector.knownname + ' for ' + $Ware" context="false" chance="$DebugChance"/>
                <set_value name="$ActionDefinition.$SpawnTime" exact="player.age"/>
                <add_to_group groupname="md.FactionLogic_Economy.Habitation_Helper.$Factories" object="$Station"/>
              </actions>
            </cue>

            <cue name="Request_Factory_Disregarded">
              <conditions>
                <event_object_signalled object="$Station" param="'factionlogic_econ_disregard'" param2="'$request_factory'"/>
              </conditions>
              <actions>
                <debug_text text="$DebugText + ' Station construction of ' + $Station.knownname + ' ' + $Station + ' for ware ' + $Ware + ' was disregarded by economic faction logic'" context="false" chance="$DebugChance"/>
                <!--Whatever disregarded this action will take care of the remaining station-->
                <cancel_cue cue="Request_Factory"/>
              </actions>
            </cue>

            <!--TODO @Owen an event for when a build step actually starts (not event_build_started)-->
            <cue name="Request_Factory_Construction_Started" checkinterval="10s">
              <conditions>
                <check_any>
                  <check_object object="$Station">
                    <match_child class="class.module" state="componentstate.operational" min="1"/>
                  </check_object>
                  <check_value value="@$Station.buildingmodule.isbuilding"/>
                </check_any>
              </conditions>
              <actions>
                <set_value name="$ActionDefinition.$StartBuildTime" exact="player.age"/>
              </actions>
            </cue>

            <cue name="Request_Factory_Destroyed">
              <conditions>
                <event_object_destroyed object="$Station"/>
              </conditions>
              <actions>
                <debug_text text="$DebugText + player.age + ': Factory ' + $Station.knownname + ' ' + $Station + ' was destroyed.'" context="false" chance="$DebugChance"/>
                <cancel_cue cue="Request_Factory"/>
              </actions>
            </cue>

            <cue name="Request_Factory_Finished">
              <conditions>
                <event_build_finished object="$Station.buildstorage"/>
              </conditions>
              <actions>
                <debug_text text="$DebugText + player.age + ': Factory ' + $Station.knownname + ' ' + $Station + ' has finished building.'" context="false" chance="$DebugChance"/>
                <set_value name="$ActionDefinition.$BuiltTime" exact="player.age"/>
                <!-- request a ship that works for this station to ensure it gets up and running fast -->
                <signal_cue_instantly cue="RequestProductionFreighter" param="[$ActionDefinition, $Station, $Ware, false]"/>
                <cancel_cue cue="Request_Factory"/>
              </actions>
            </cue>
          </cues>
        </cue>

        <!--event.param [$ActionDef, $Station, $Ware, $IsProduction]-->
        <cue name="RequestProductionFreighter" instantiate="true" namespace="this">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <set_value name="$DebugChance" exact="0"/>
            <set_value name="$ActionDefinition" exact="event.param.{1}"/>
            <set_value name="$Station" exact="event.param.{2}"/>
            <set_value name="$Ware" exact="event.param.{3}"/>
            <set_value name="$IsProduction" exact="event.param.{4}"/>
            <set_value name="$Faction" exact="parent.$Faction"/>

            <do_if value="not $Station.exists or not $Ware">
              <assert value="false" text="'Cue RequestProductionFreighter signalled with invalid parameters, $Station(%1) and $Ware(%2) must be valid! [Michael]'.[$Station, $Ware]" />
              <cancel_cue cue="RequestProductionFreighter"/>
            </do_if>

            <set_value name="$WareResources" exact="$Ware.raceresources.{$Faction.primaryrace}.list"/>
            <set_value name="$ResourceTags" exact="table[]" />
            <set_value name="$ResourceTags.$Container" exact="tag.container" />
            <set_value name="$ResourceTags.$Gas" exact="tag.gas" />
            <set_value name="$ResourceTags.$Mineral" exact="tag.mineral" />
            <set_value name="$ResourceTagKeys" exact="$ResourceTags.keys.list" />
            <set_value name="$ResourceTypes" exact="table[]" />
            <do_all exact="$WareResources.count" counter="$resources_i">
              <set_value name="$WareResource" exact="$WareResources.{$resources_i}"/>
              <do_all exact="$ResourceTagKeys.count" counter="$RTK_i">
                <set_value name="$ResourceKey" exact="$ResourceTagKeys.{$RTK_i}"/>
                <set_value name="$ResourceTag" exact="$ResourceTags.{$ResourceKey}"/>
                <do_if value="$WareResource.hastag.{$ResourceTag}">
                  <do_if value="not $ResourceTypes.{$ResourceKey}?">
                    <set_value name="$ResourceTypes.{$ResourceKey}" exact="[$WareResource]"/>
                  </do_if>
                  <do_else>
                    <append_to_list name="$ResourceTypes.{$ResourceKey}" exact="$WareResource"/>
                  </do_else>
                </do_if>
              </do_all>
            </do_all>
            <remove_value name="$ResourceKey"/>
            <remove_value name="$ResourceTag"/>

            <set_value name="$ResourceTypeKeys" exact="$ResourceTypes.keys.list"/>
            <do_all exact="$ResourceTypeKeys.count" counter="$RTK_j">
              <set_value name="$WareList" exact="$ResourceTypes.{$ResourceTypeKeys.{$RTK_j}}"/>
              <do_if value="$WareList.count gt 0">
                <set_value name="$NewActionDef" exact="table[]"/>
                <set_value name="$Commandeered" exact="false"/>
                <do_if value="$IsProduction">
                  <!-- try commandeering first -->
                  <set_value name="$NewActionDef.$Type" exact="'$request_prio_commandeerable_freighter'"/>
                  <signal_cue_instantly cue="Request_Commandeerable_Freighter" param="[$NewActionDef, $Station, $WareList.{1}, true]"/>
                  <set_value name="$Commandeered" exact="if $NewActionDef.$Ship? then true else false"/>
                </do_if>
                <do_if value="not $IsProduction or not $NewActionDef.$Ship?">
                  <set_value name="$NewActionDef.$Type" exact="'$request_priority_freighter'"/>
                  <signal_cue_instantly cue="Request_Freighter" param="[$NewActionDef, $Station, $WareList.{1}, true, null]"/>
                </do_if>
                <do_if value="$NewActionDef.$Ship?">
                  <do_if value="not $ActionDefinition.$SubActionDefs?">
                    <set_value name ="$ActionDefinition.$SubActionDefs" exact="[$NewActionDef]" />
                  </do_if>
                  <do_else>
                    <append_to_list name="$ActionDefinition.$SubActionDefs" exact="$NewActionDef" />
                  </do_else>
                  <!--curtime, object_name, object_id, object_idcode, sector_name, faction_id, ware, station_id, station_idcode-->
                  <do_if value="@$Commandeered">
                    <debug_text filter="economy_verbose" text="'#FLE#;%1;RequestCommandeeredStationTransporter;%2;%3;%4;%5;%6;%7;%8;%9'.[player.age, $NewActionDef.$Ship.knownname, $NewActionDef.$Ship, $NewActionDef.$Ship.idcode, $Station.sector.knownname, $Faction.id, $WareList.{1}, $Station, $Station.idcode]" context="false"/>
                  </do_if>
                  <do_else>
                    <debug_text filter="economy_verbose" text="'#FLE#;%1;RequestStationTransporter;%2;%3;%4;%5;%6;%7;%8;%9'.[player.age, $NewActionDef.$Ship.knownname, $NewActionDef.$Ship, $NewActionDef.$Ship.idcode, $Station.sector.knownname, $Faction.id, $WareList.{1}, $Station, $Station.idcode]" context="false"/>
                  </do_else>
                </do_if>
              </do_if>
            </do_all>
          </actions>
        </cue>

        <!--event.param [$ActionDef, $Sector, $Ware, $Zone(optional)]-->
        <cue name="Remove_Factory" instantiate="true" namespace="this">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <set_value name="$DebugChance" exact="0"/>
            <set_value name="$AIDebugChance" exact="0"/>
            <set_value name="$GeneratorDebugChance" exact="0"/>
            <set_value name="$ActionDefinition" exact="event.param.{1}"/>
            <set_value name="$RequestSector" exact="event.param.{2}"/>
            <set_value name="$Ware" exact="event.param.{3}"/>
            <set_value name="$Station" exact="null"/>
            <do_if value="@event.param.{4}">
              <set_value name="$Station" exact="event.param.{4}"/>
            </do_if>
            <set_value name="$Faction" exact="parent.$Faction"/>

            <do_if value="not $Station.exists">
              <!-- TODO: find an appropriate station -->
            </do_if>

            <set_value name="$DebugText" exact="parent.$DebugText + ' (Remove_Factory) '" chance="$DebugChance"/>
            <do_if value="$Station.isoperational">
              <do_if value="$Station.istradestation or $Station.canequipships">
                <debug_text text="$DebugText + player.age + ': Factory %1 (%2, %3) in %4 is not a valid target for deconstruction because it is either a trade station, shipyard or equipment dock.'.[$Station.knownname, $Station, $Station.idcode, $Station.sector.knownname]" context="false" chance="$DebugChance"/>
                <set_value name="$Station" exact="null"/>
              </do_if>
              <do_else>
                <check_object result="$IsIndestructible" object="$Station">
                  <match_child class="class.module" indestructible="true"/>
                </check_object>
                <do_if value="$IsIndestructible">
                  <debug_text text="$DebugText + player.age + ': Factory %1 (%2, %3) in %4 is not a valid target for deconstruction because it has indestructible modules.'.[$Station.knownname, $Station, $Station.idcode, $Station.sector.knownname]" context="false" chance="$DebugChance"/>
                  <set_value name="$Station" exact="null"/>
                </do_if>
                <do_else>
                  <find_object_component name="$ActiveProduction" object="$Station" class="class.production" pausedmanually="false" checkoperational="true" />
                  <do_if value="not $ActiveProduction.exists">
                    <!-- make sure this station is not the last producer of any of its products for $Faction -->
                    <set_value name="$Products" exact="$Station.products.list"/>
                    <do_all exact="$Products.count" counter="$p">
                      <!-- search for all producers of the product ware owned by $Faction within a 5-jump distance so far away territory doesn't interfere -->
                      <find_station_by_true_owner name="$ProducerStations" space="player.galaxy" faction="$Faction" checkoperational="true" indestructible="false" multiple="true">
                        <match_products wares="$Products.{$p}"/>
                        <match_gate_distance object="$RequestSector" max="5" />
                      </find_station_by_true_owner>
                      <do_if value="$ProducerStations.count le 1">
                        <!-- there needs to be at least one more station aside from this one that produces the ware within the specified distance, otherwise this station must not be deconstructed -->
                        <debug_text text="$DebugText + player.age + ': Factory %1 (%2, %3) in %4 is not a valid target for deconstruction because it is the last producer of %5.'.[$Station.knownname, $Station, $Station.idcode, $Station.sector.knownname, $Products.{$p}]" context="false" chance="$DebugChance"/>
                        <set_value name="$Station" exact="null"/>
                        <break/>
                      </do_if>
                    </do_all>
                  </do_if>
                  <do_else>
                    <debug_text text="$DebugText + player.age + ': Factory %1 (%2, %3) in %4 is not a valid target for deconstruction because it has active productions.'.[$Station.knownname, $Station, $Station.idcode, $Station.sector.knownname]" context="false" chance="$DebugChance"/>
                    <set_value name="$Station" exact="null"/>
                  </do_else>
                </do_else>
              </do_else>
            </do_if>

            <do_if value="$Station.exists">
              <!-- All productions of this station have been paused and we are not the sole producer of any of our products. Begin Evacuation and dismantle the station. -->
              <set_value name="$ActionDefinition.$Station" exact="$Station"/>
              <set_value name="$ActionDefinition.$EvacStartTime" exact="player.age"/>
              <debug_text text="$DebugText + player.age + ': Factory %1 (%2, %3) in %4 beginning evacuation to be deconstructed.'.[$Station.knownname, $Station, $Station.idcode, $Station.sector.knownname]" context="false" chance="$DebugChance"/>

              <!-- 1. trigger red warning lights -->
              <find_object_component object="$Station" name="$StationModules" class="class.module" multiple="true" checkoperational="true" />
              <do_all exact="$StationModules.count" counter="$m">
                <add_effect object="$StationModules.{$m}" effect="'hack_deactivated_l'" />
              </do_all>

              <!-- 2. release all subordinates -->
              <do_all exact="$Station.subordinates.count" counter="$s" reverse="true">
                <release_commandeered_object object="$Station.subordinates.{$s}"/>
                <create_order id="'AssignCommander'" object="$Station.subordinates.{$s}" immediate="true">
                  <param name="cancelorders" value="false"/>
                  <param name="debugchance" value="$AIDebugChance"/>
                </create_order>
              </do_all>

              <!-- 3. order ships to evacuate station (the order is also given to player ships!) -->
              <find_object_component name="$DockedShips" object="$Station" class="class.ship" docked="true" checkoperational="true" multiple="true" />
              <!--<find_ship name="$DockedShips" space="$Station" docked="true" checkoperational="true" multiple="true" />-->
              <set_value name="$EcavuationShipOrders" exact="table[]"/>
              <do_all exact="$DockedShips.count" counter="$d">
                <set_value name="$Ship" exact="$DockedShips.{$d}"/>
                <get_safe_pos result="$SafePos" sector="$RequestSector" min="$Station.size" max="$Station.size * 2" object="$Station"/>
                <create_order id="'MoveWait'" immediate="true" object="$Ship" name="$Order">
                  <param name="destination" value="[$RequestSector, $SafePos]"/>
                  <param name="timeout" value="5min"/>
                  <param name="debugchance" value="$AIDebugChance"/>
                </create_order>
                <set_value name="$EcavuationShipOrders.{$Ship}" exact="$Order"/>
              </do_all>

              <!-- 4. set station to faction ownerless so we stop tracking it -->
              <set_owner object="$Station" faction="faction.ownerless" overridenpc="true"/>

              <do_if value="$Station.tradenpc.exists">
                <!-- 5. remove manager to stop all trading activity -->
                <!-- TODO: instead of removing the manager, try to sell all wares in storage first? -->
                <destroy_object object="$Station.tradenpc"/>
              </do_if>
            </do_if>
            <do_else>
              <cancel_cue cue="Remove_Factory"/>
            </do_else>
          </actions>
          <cues>
            <cue name="Remove_Factory_EvacStart" checkinterval="2min">
              <conditions>
                <count_object_components result="$DockedShips" object="$Station" class="class.ship" docked="true" checkoperational="true" min="1" />
                <!--<count_ships result="$DockedShips" space="$Station" docked="true" checkoperational="true" min="1" />-->
              </conditions>
              <actions>
                <do_all exact="$DockedShips.count" counter="$d">
                  <!-- check if the ship already has an order to leave and if not, issue a new one -->
                  <set_value name="$Ship" exact="$DockedShips.{$d}"/>
                  <do_if value="$Ship.isplayerowned or player.age - $ActionDefinition.$EvacStartTime lt 30min">
                    <do_if value="not @$EcavuationShipOrders.{$Ship} or not $Ship.orders.indexof.{$EcavuationShipOrders.{$Ship}}">
                      <get_safe_pos result="$SafePos" sector="$RequestSector" min="$Station.size" max="$Station.size * 2" object="$Station"/>
                      <create_order id="'MoveWait'" immediate="true" object="$Ship" name="$Order">
                        <param name="destination" value="[$RequestSector, $SafePos]"/>
                        <param name="timeout" value="5min"/>
                        <param name="debugchance" value="$AIDebugChance"/>
                      </create_order>
                      <set_value name="$EcavuationShipOrders.{$Ship}" exact="$Order"/>
                    </do_if>
                  </do_if>
                  <do_else>
                    <!-- fallback: if we haven't been able to evacuate NPC ships within half an hour, just destroy them -->
                    <destroy_object object="$Ship"/>
                  </do_else>
                </do_all>
              </actions>
            </cue>
            <cue name="Remove_Factory_EvacFinished" checkinterval="1min">
              <conditions>
                <count_object_components object="$Station" class="class.ship" docked="true" checkoperational="true" exact="0" />
                <!--<count_ships space="$Station" docked="true" checkoperational="true" exact="0" />-->
                <count_object_components object="$Station" owner="faction.player" exact="0" />
              </conditions>
              <actions>
                <remove_value name="$EcavuationShipOrders"/>
                <set_value name="$ActionDefinition.$EvacFinishTime" exact="player.age"/>
                <signal_cue cue="Remove_Factory_Begin_Recycling"/>
              </actions>
            </cue>
            <cue name="Remove_Factory_Begin_Recycling">
              <conditions>
                <event_cue_signalled/>
              </conditions>
              <actions>
                <debug_text text="$DebugText + player.age + ': Factory %1 (%2, %3) in %4 beginning recycling process.'.[$Station.knownname, $Station, $Station.idcode, $Station.sector.knownname]" context="false" chance="$DebugChance"/>
                <set_value name="$ActionDefinition.$RecycleStartTime" exact="player.age"/>
                <get_control_entities name="$ControlEntities" object="$Station"/>
                <debug_text text="$DebugText + 'Killing ' + $ControlEntities.count + ' control entities on recycling station ' + $Station.knownname + ' ' + $Station" context="false" chance="$DebugChance"/>
                <do_for_each name="$ControlEntity" in="$ControlEntities">
                  <!-- destroy_object doesn't happen in the same frame so we abort the scripts immediately to prevent errors while the station is already deconstructing and the entities haven't been killed yet -->
                  <abort_scripts entity="$ControlEntity"/>
                  <destroy_object object="$ControlEntity"/>
                </do_for_each>
                <remove_value name="$ControlEntities"/>
                <!-- this starts the actual recycling process of the entire station -->
                <add_build_to_expand_station object="$Station.buildstorage" buildobject="$Station" />
              </actions>
            </cue>
            <cue name="Remove_Factory_Disregarded" version="2">
              <conditions>
                <event_object_signalled object="$Station" param="'factionlogic_econ_disregard'" param2="'$remove_factory'"/>
              </conditions>
              <actions>
                <debug_text text="$DebugText + player.age + ': Factory %1 (%2, %3) in %4 has been disregarded and no longer tracks deconstruction progress.'.[$Station.knownname, $Station, $Station.idcode, $Station.sector.knownname]" context="false" chance="$DebugChance"/>
                <cancel_cue cue="Remove_Factory"/>
              </actions>
              <patch sinceversion="2" state="waiting">
                <do_if value="Remove_Factory_Begin_Recycling.state != cuestate.waiting">
                  <get_control_entities name="$ControlEntities" object="$Station"/>
                  <debug_text text="'Killing ' + $ControlEntities.count + ' control entities on recycling station ' + $Station.knownname + ' ' + $Station" filter="savegame"/>
                  <do_for_each name="$ControlEntity" in="$ControlEntities">
                    <destroy_object object="$ControlEntity"/>
                  </do_for_each>
                  <remove_value name="$ControlEntities"/>
                </do_if>
              </patch>
            </cue>
            <cue name="Remove_Factory_Destroyed">
              <conditions>
                <event_object_destroyed object="$Station"/>
              </conditions>
              <actions>
                <debug_text text="$DebugText + player.age + ': Factory %1 (%2, %3) in %4 has been destroyed.'.[$Station.knownname, $Station, $Station.idcode, $Station.sector.knownname]" context="false" chance="$DebugChance"/>
                <cancel_cue cue="Remove_Factory"/>
              </actions>
            </cue>
            <cue name="Remove_Factory_Finished">
              <conditions>
                <event_build_finished object="$Station.buildstorage"/>
              </conditions>
              <actions>
                <debug_text text="$DebugText + player.age + ': Factory %1 (%2, %3) in %4 has been deconstructed.'.[$Station.knownname, $Station, $Station.idcode, $Station.sector.knownname]" context="false" chance="$DebugChance"/>
                <set_value name="$ActionDefinition.$RecycleEndTime" exact="player.age"/>
                <cancel_cue cue="Remove_Factory"/>
              </actions>
            </cue>
          </cues>
        </cue>
      </cues>
    </library>

    <cue name="GenerateShortageData_Delay" instantiate="true">
      <conditions>
        <event_cue_signalled/>
      </conditions>
      <delay exact="5s"/>
      <actions>
        <signal_cue cue="GenerateShortageData"/>
      </actions>
    </cue>

    <cue name="GlobalStorageData">
      <actions>
        <set_value name="$DebugChance" exact="0"/>
        <set_value name="$Reports" exact="table[]"/>
        <set_value name="$NextShortageDelay" min="25min" max="30min"/>
        <set_value name="$NextProductionConsumptionDelay" min="30s" max="120s"/>
        <!-- 
          The top-most table has faction as key and a table as value. 
            The table in the above value has sector as key and a table as value. 
              The table in the above value has ware as key and production or consumption rate in wares/hour as value.
        -->
        <set_value name="$ProductionTables" exact="table[]"/>
        <set_value name="$ConsumptionTables" exact="table[]"/>
      </actions>
      <cues>
        <cue name="GenerateShortageData_Ticker">
          <delay exact="$NextShortageDelay"/>
          <actions>
            <do_if value="GenerateShortageData.state == cuestate.waiting and (not GlobalStorageData.$LastRunTime? or player.age gt GlobalStorageData.$LastRunTime + 15s)">
              <signal_cue cue="GenerateShortageData"/>
            </do_if>
            <set_value name="$NextShortageDelay" min="15min" max="20min"/>
            <reset_cue cue="GenerateShortageData_Ticker"/>
          </actions>
        </cue>

        <cue name="GenerateProductionConsumptionData_Ticker">
          <delay exact="$NextProductionConsumptionDelay"/>
          <actions>
            <do_if value="GenerateProductionConsumptionData.state == cuestate.waiting">
              <signal_cue cue="GenerateProductionConsumptionData"/>
            </do_if>
            <set_value name="$NextProductionConsumptionDelay" min="15min" max="20min"/>
            <reset_cue cue="GenerateProductionConsumptionData_Ticker"/>
          </actions>
        </cue>

        <cue name="GenerateProductionConsumptionData" namespace="this">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <set_value name="$DebugChance" exact="100"/>
            <debug_to_file chance="$DebugChance" directory="'FactionTradeRoutes'" name="'FactionTradeRoutes.log'" text="'Beginning production and consumption table generation.'"/>
            <set_value name="$Objects" exact="[]"/>
            <set_value name="$Faction" exact="if @event.param.count ge 1 then event.param.{1} else null"/>
            <set_value name="$FactionTable" exact="null"/>

            <do_if value="$Faction">

              <debug_to_file chance="$DebugChance" directory="'FactionTradeRoutes'" name="'FactionTradeRoutes.log'" text="'Table generation for %s'.[$Faction.knownname]"/>
              <!--Report for faction. Only clear that faction's entries in production and consumption tables -->
              <set_value name="$FactionProductionTable" exact="@GlobalStorageData.$ProductionTables.{$Faction}"/>
              <set_value name="$FactionConsumptionTable" exact="@GlobalStorageData.$ConsumptionTables.{$Faction}"/>

              <do_if value="not $FactionProductionTable">
                <set_value name="$FactionProductionTable" exact="table[]"/>
                <set_value name="GlobalStorageData.$ProductionTables.{$Faction}" exact="$FactionProductionTable"/>
              </do_if>

              <do_if value="not $FactionConsumptionTable">
                <set_value name="$FactionConsumptionTable" exact="table[]"/>
                <set_value name="GlobalStorageData.$ConsumptionTables.{$Faction}" exact="$FactionConsumptionTable"/>
              </do_if>

              <!-- find sectors owned by faction -->
              <find_sector name="$Objects" owner="$Faction" space="player.galaxy" multiple="true"/>

            </do_if>
            <do_else>

              <debug_to_file chance="$DebugChance" directory="'FactionTradeRoutes'" name="'FactionTradeRoutes.log'" text="'Global table generation.'"/>
              <!--Global report. Clear all-->
              <set_value name="GlobalStorageData.$ProductionTables" exact="table[]"/>

              <do_if value="@global.$FactionManagers">

                <set_value name="$Factions" exact="global.$FactionManagers.keys.list"/>

                <do_all exact="$Factions.count" counter="$f">

                  <!-- find all sectors -->
                  <find_sector name="$Objects" owner="$Factions.{$f}" space="player.galaxy" multiple="true" append="true"/>

                </do_all>

                <remove_value name="$Factions"/>

              </do_if>

            </do_else>

          </actions>
          <cues>

            <cue name="ProcessSectors" instantiate="true" checkinterval="100ms">
              <actions>

                <debug_to_file chance="0" directory="'FactionTradeRoutes'" name="'FactionTradeRoutes.log'" text="'Running ProcessSectors with %s remaining'.[$Objects.count]"/>
                <!-- Let's do one sector at a time, since the other data generates 15 stations at a time this should be approximately the same load -->
                <set_value name="$NumToProcess" exact="1"/>
                <set_value name="$SectorCounter" exact="0"/>
                <do_all exact="$Objects.count" counter="$i" reverse="true">
                  <set_value name="$Sector" exact="$Objects.{$i}"/>
                  <debug_to_file chance="0" directory="'FactionTradeRoutes'" name="'FactionTradeRoutes.log'" text="'Processing %s'.[$Sector.knownname]"/>

                  <!-- Get stations in sector -->
                  <find_station_by_true_owner name="$Stations" faction="$Sector.owner" space="$Sector" multiple="true" />
                  <debug_to_file chance="0" directory="'FactionTradeRoutes'" name="'FactionTradeRoutes.log'" text="'%s stations in sector'.[$Stations.count]"/>

                  <!-- Get operational production modules for each station -->
                  <!-- Get theoretical production and consumption rates on the modules, add to tables with ware as key, rates as value -->
                  <set_value name="$ProductionRateTable" exact="table[]"/>
                  <set_value name="$ConsumptionRateTable" exact="table[]"/>
                  <do_for_each name="$Station" in="$Stations">
                    <debug_to_file chance="0" directory="'FactionTradeRoutes'" name="'FactionTradeRoutes.log'" text="'Processing station %s'.[$Station.knownname]"/>
                    <do_for_each name="$ProductionModule" in="$Station.productions">
                      <do_if value="$ProductionModule.isoperational">

                        <debug_to_file chance="0" directory="'FactionTradeRoutes'" name="'FactionTradeRoutes.log'" text="'\tProcessing module %s'.[$ProductionModule.knownname]"/>

                        <!-- The amount calculation for products assumes single product production modules -->
                        <do_for_each name="$Product" in="$ProductionModule.products.list">
                          
                          <set_value name="$ProductionVolumePerHour" exact="$ProductionModule.macro.productionvolume"/>
                          <set_value name="$ProductWareVolume" exact="$Product.volume"/>
                          <set_value name="$ProductionAmountPerHour" exact="$ProductionVolumePerHour / $ProductWareVolume"/>

                          <debug_to_file chance="0" directory="'FactionTradeRoutes'" name="'FactionTradeRoutes.log'" text="'\t\tThis module produces %s of %s per hour'.[$ProductionAmountPerHour, $Product.name]"/>
                          <do_if value="@$ProductionRateTable.{$Product}">
                            <set_value name="$ProductionRateTable.{$Product}" exact="$ProductionAmountPerHour" operation="add"/>
                          </do_if>
                          <do_else>
                            <set_value name="$ProductionRateTable.{$Product}" exact="$ProductionAmountPerHour"/>
                          </do_else>

                          <set_value name="$ResourcesAmountTable" exact="$Product.raceresources.{$Station.trueowner.primaryrace}.table"/>
                          <set_value name="$ResourceSum" exact="0"/>
                          <do_all counter="$j" exact="$ResourcesAmountTable.keys.count">
                            <set_value name="$ResourceSum" exact="$ResourcesAmountTable.{$ResourcesAmountTable.keys.{$j}}" operation="add"/>
                          </do_all>
                          <set_value name="$ConsumptionVolumePerHour" exact="$ProductionModule.macro.consumptionvolume"/>
                          <do_all counter="$j" exact="$ResourcesAmountTable.keys.count">
                            <set_value name="$WareRatio" exact="($ResourcesAmountTable.{$ResourcesAmountTable.keys.{$j}})f / ($ResourceSum)f"/>
                            <set_value name="$WareVolumeConsumedPerHour" exact="($ConsumptionVolumePerHour * $WareRatio)L"/>
                            <set_value name="$WareAmountConsumedPerHour" exact="$WareVolumeConsumedPerHour / $ResourcesAmountTable.keys.{$j}.volume"/>
                            <debug_to_file chance="0" directory="'FactionTradeRoutes'" name="'FactionTradeRoutes.log'" text="'\t\tThis module consumes %s of %s per hour'.[$WareAmountConsumedPerHour, $ResourcesAmountTable.keys.{$j}.name]"/>
                            <do_if value="@$ConsumptionRateTable.{$ResourcesAmountTable.keys.{$j}}">
                              <set_value name="$ConsumptionRateTable.{$ResourcesAmountTable.keys.{$j}}" exact="$WareAmountConsumedPerHour" operation="add"/>
                            </do_if>
                            <do_else>
                              <set_value name="$ConsumptionRateTable.{$ResourcesAmountTable.keys.{$j}}" exact="$WareAmountConsumedPerHour"/>
                            </do_else>  
                          </do_all>

                        </do_for_each>

                      </do_if>

                    </do_for_each>

                  </do_for_each>

                  <!-- Update value of table with faction as key of top-most, sector as key of first nested table, and ware as the key of innermost nested table -->

                  <do_if value="GlobalStorageData.$ProductionTables.keys.list.indexof.{$Sector.trueowner} ==0">
                    <set_value name="GlobalStorageData.$ProductionTables.{$Sector.trueowner}" exact="table[]"/>
                  </do_if>
                  <set_value name="GlobalStorageData.$ProductionTables.{$Sector.trueowner}.{$Sector}" exact="$ProductionRateTable"/>
                  
                  <do_if value="GlobalStorageData.$ConsumptionTables.keys.list.indexof.{$Sector.trueowner} == 0">
                    <set_value name="GlobalStorageData.$ConsumptionTables.{$Sector.trueowner}" exact="table[]"/>
                  </do_if>
                  <set_value name="GlobalStorageData.$ConsumptionTables.{$Sector.trueowner}.{$Sector}" exact="$ConsumptionRateTable"/>

                  <debug_to_file chance="0" directory="'FactionTradeRoutes'" name="'FactionTradeRoutes.log'" text="'Sector owned by %s, sectors processed so far: %s'.[$Sector.trueowner, GlobalStorageData.$ConsumptionTables.{$Sector.trueowner}.keys.count]"/>

                  <remove_from_list name="$Objects" exact="$Sector" />
                  <set_value name="$SectorCounter" exact="1" operation="add"/>
                  <do_if value="$SectorCounter ge $NumToProcess">
                    <break/>
                  </do_if>
                </do_all>

                <do_if value="$Objects.count == 0">

                  <do_if value="$DebugChance == 100">

                    <do_if value="$Faction">

                      <debug_to_file directory="'FactionTradeRoutes'" name="'FactionTradeRoutes.log'" text="'Production Tables for %s'.[$Faction.knownname]"/>
                      <do_for_each name="$Sector" in="GlobalStorageData.$ProductionTables.{$Faction}.keys.list">

                        <debug_to_file directory="'FactionTradeRoutes'" name="'FactionTradeRoutes.log'" text="'\tSector %s:'.[$Sector.knownname]"/>

                        <do_for_each name="$Ware" in="GlobalStorageData.$ProductionTables.{$Faction}.{$Sector}.keys.list">

                          <debug_to_file directory="'FactionTradeRoutes'" name="'FactionTradeRoutes.log'" text="'\t\tWare: %s\tAmount: %s'.[$Ware.name, GlobalStorageData.$ProductionTables.{$Faction}.{$Sector}.{$Ware}]"/>

                        </do_for_each>

                      </do_for_each>

                      <debug_to_file directory="'FactionTradeRoutes'" name="'FactionTradeRoutes.log'" text="'Consumption Tables for %s'.[$Faction.knownname]"/>

                      <do_for_each name="$Sector" in="GlobalStorageData.$ConsumptionTables.{$Faction}.keys.list">

                        <debug_to_file directory="'FactionTradeRoutes'" name="'FactionTradeRoutes.log'" text="'\tSector %s:'.[$Sector.knownname]"/>

                        <do_for_each name="$Ware" in="GlobalStorageData.$ConsumptionTables.{$Faction}.{$Sector}.keys.list">

                          <debug_to_file directory="'FactionTradeRoutes'" name="'FactionTradeRoutes.log'" text="'\t\tWare: %s\tAmount: %s'.[$Ware.name, GlobalStorageData.$ConsumptionTables.{$Faction}.{$Sector}.{$Ware}]"/>

                        </do_for_each>

                      </do_for_each>

                    </do_if>
                    <do_else>

                      <debug_to_file directory="'FactionTradeRoutes'" name="'FactionTradeRoutes.log'" text="'Done generating production reports for ' + GlobalStorageData.$ProductionTables.keys.count + ' factions'"/>
                      <debug_to_file directory="'FactionTradeRoutes'" name="'FactionTradeRoutes.log'" text="'Done generating consumption reports for ' + GlobalStorageData.$ConsumptionTables.keys.count + ' factions'"/>

                      <do_for_each name="$Faction" in="GlobalStorageData.$ProductionTables.keys.list">

                        <debug_to_file directory="'FactionTradeRoutes'" name="'FactionTradeRoutes.log'" text="'Production Tables for %s'.[$Faction.knownname]"/>
                        
                        <do_for_each name="$Sector" in="GlobalStorageData.$ProductionTables.{$Faction}.keys.list">

                          <debug_to_file directory="'FactionTradeRoutes'" name="'FactionTradeRoutes.log'" text="'\tSector %s:'.[$Sector.knownname]"/>

                          <do_for_each name="$Ware" in="GlobalStorageData.$ProductionTables.{$Faction}.{$Sector}.keys.list">

                            <debug_to_file directory="'FactionTradeRoutes'" name="'FactionTradeRoutes.log'" text="'\t\tWare: %s\tAmount: %s'.[$Ware.name, GlobalStorageData.$ProductionTables.{$Faction}.{$Sector}.{$Ware}]"/>
                            <set_value name="$random" min="0L" max="0x7FFFFFFFFFFFFFFFL"/>
                          </do_for_each>

                        </do_for_each>

                      </do_for_each>

                      <do_for_each name="$Faction" in="GlobalStorageData.$ConsumptionTables.keys.list">

                        <debug_to_file directory="'FactionTradeRoutes'" name="'FactionTradeRoutes.log'" text="'Consumption Tables for %s'.[$Faction.knownname]"/>

                        <do_for_each name="$Sector" in="GlobalStorageData.$ConsumptionTables.{$Faction}.keys.list">
                          
                          <debug_to_file directory="'FactionTradeRoutes'" name="'FactionTradeRoutes.log'" text="'\tSector %s:'.[$Sector.knownname]"/>

                          <do_for_each name="$Ware" in="GlobalStorageData.$ConsumptionTables.{$Faction}.{$Sector}.keys.list">
                            <debug_to_file directory="'FactionTradeRoutes'" name="'FactionTradeRoutes.log'" text="'\t\tWare: %s\tAmount: %s'.[$Ware.name, GlobalStorageData.$ConsumptionTables.{$Faction}.{$Sector}.{$Ware}]"/>
                          </do_for_each>

                        </do_for_each>

                      </do_for_each>

                    </do_else>

                  </do_if>

                  <signal_cue cue="ProductionConsumptionDataGenerated" check="false"/>
                  <reset_cue cue="GenerateProductionConsumptionData"/>

                </do_if>

              </actions>
            </cue>

          </cues>
        </cue>

        <cue name="ProductionConsumptionDataGenerated"/>

        <!--event.param = [$faction(optional)]-->
        <cue name="GenerateShortageData" namespace="this">
          <conditions>
            <event_cue_signalled/>
          </conditions>
          <actions>
            <set_value name="$DebugChance" exact="100"/>

            <set_value name="$Objects" exact="[]"/>
            <set_value name="$Faction" exact="if @event.param.count ge 1 then event.param.{1} else null"/>
            <set_value name="$FactionTable" exact="null"/>
            <do_if value="$Faction">
              <!--Report for faction. Only clear that faction's entry-->
              <set_value name="$FactionTable" exact="@GlobalStorageData.$Reports.{$Faction}"/>
              <do_if value="not $FactionTable">
                <set_value name="$FactionTable" exact="table[]"/>
                <set_value name="GlobalStorageData.$Reports.{$Faction}" exact="$FactionTable"/>
              </do_if>
              <!--TODO @Owen @Michael check for stations under construction? Do NOT find offers for those. generate_shortage_reports does not work for constructions.-->
              <find_station_by_true_owner name="$Objects" faction="$Faction" space="player.galaxy" multiple="true"/>
            </do_if>
            <do_else>
              <!--Global report. Clear all-->
              <set_value name="GlobalStorageData.$Reports" exact="table[]"/>
              <do_if value="@global.$FactionManagers">
                <set_value name="$Factions" exact="global.$FactionManagers.keys.list"/>
                <do_all exact="$Factions.count" counter="$f">
                  <find_station_by_true_owner name="$Objects" faction="$Factions.{$f}" space="player.galaxy" multiple="true" append="true"/>
                </do_all>
                <remove_value name="$Factions"/>
              </do_if>
            </do_else>

            <set_value name="$ObjectCount" exact="$Objects.count"/>
            <resize_list list="$Objects" count="$ObjectCount * 2"/>
            <do_all exact="$ObjectCount" counter="$i">
              <set_value name="$Objects.{$ObjectCount + $i}" exact="$Objects.{$i}.buildstorage"/>
            </do_all>
            <remove_value name="$ObjectCount"/>
          </actions>
          <cues>
            <cue name="ProcessStations" instantiate="true" checkinterval="100ms">
              <actions>
                <set_value name="$NumToProcess" exact="[15, $Objects.count].min"/>
                <do_all exact="$NumToProcess" counter="$i" reverse="true">
                  <set_value name="$Object" exact="$Objects.{$i}"/>

                  <do_if value="$Object.isoperational">
                    <!--Prepare a report table-->
                    <set_value name="$Report" exact="table[]"/>

                    <do_if value="not $Object.tradenpc.exists">
                      <set_value name="$controllable" exact="$Object"/>
                      <include_actions ref="md.InitUniverse.CreateTradeManagerEntity"/>
                      <!--TODO @Owen stop this happening to the HQ in the discovery plot-->
                      <debug_text text="'%s missing manager on %s (%s) in %s'.[if $Object.tradenpc.exists then 'Successfully restored' else 'FAILED to restore', $Object.knownname, $Object.idcode, @$Object.sector.knownname]" context="false"/>
                      <remove_value name="$controllable"/>
                    </do_if>
                    <do_if value="not $Object.shiptrader.exists and $Object.canequipships">
                      <set_value name="$controllable" exact="$Object"/>
                      <include_actions ref="md.InitUniverse.CreateShipDealerEntity" />
                      <debug_text text="'%s missing shiptrader on %s (%s) in %s'.[if $Object.shiptrader.exists then 'Successfully restored' else 'FAILED to restore', $Object.knownname, $Object.idcode, @$Object.sector.knownname]" context="false"/>
                      <remove_value name="$controllable"/>
                    </do_if>

                    <!--Only stations process production and workforce-->
                    <do_if value="$Object.isclass.station">
                      <generate_shortage_reports object="$Object" insufficient="$InsufficientReport" shortage="$ShortageReport" overflow="$OverflowReport" type="class.production" log="true"/>
                      <debug_text text="'Production reports for ' + $Object + ' ' + $Object.knownname + ' Insufficient: ' + $InsufficientReport + ' Shortage: ' + $ShortageReport + ' Overflow: ' + $OverflowReport" context="false" chance="$DebugChance"/>

                      <do_if value="$InsufficientReport.keys.count">
                        <set_value name="$Report.$InsufficientProductionWares" exact="$InsufficientReport"/>
                      </do_if>
                      <!--<do_if value="$ShortageReport.keys.count">
                        <set_value name="$Report.$ShortageProductionWares" exact="$ShortageReport"/>
                      </do_if>-->
                      <do_if value="$OverflowReport.keys.count">
                        <set_value name="$Report.$OverflowProductionWares" exact="$OverflowReport"/>
                      </do_if>

                      <generate_shortage_reports object="$Object" insufficient="$InsufficientReport" shortage="$ShortageReport" type="class.habitation" log="true"/>
                      <debug_text text="'Workforce reports for ' + $Object + ' ' + $Object.knownname + ' Insufficient: ' + $InsufficientReport + ' Shortage: ' + $ShortageReport" context="false" chance="$DebugChance"/>

                      <do_if value="$InsufficientReport.keys.count">
                        <set_value name="$Report.$InsufficientWorkforceWares" exact="$InsufficientReport"/>
                      </do_if>
                      <!--<do_if value="$ShortageReport.keys.count">
                        <set_value name="$Report.$ShortageWorkforceWares" exact="$ShortageReport"/>
                      </do_if>-->
                    </do_if>

                    <!--Both stations and buildstorage-->
                    <generate_shortage_reports object="$Object" insufficient="$InsufficientReport" shortage="$ShortageReport" type="class.buildmodule" log="true"/>
                    <debug_text text="'Build reports for ' + $Object + ' ' + $Object.knownname + ' Insufficient: ' + $InsufficientReport + ' Shortage: ' + $ShortageReport" context="false" chance="$DebugChance"/>

                    <do_if value="$InsufficientReport.keys.count">
                      <set_value name="$Report.$InsufficientBuildWares" exact="$InsufficientReport"/>
                    </do_if>
                    <!--<do_if value="$ShortageReport.keys.count">
                      <set_value name="$Report.$ShortageBuildWares" exact="$ShortageReport"/>
                    </do_if>-->

                    <find_buy_offer result="$BuyOffers" buyer="$Object" multiple="true" />
                    <do_if value="$BuyOffers.count">
                      <set_value name="$Report.$BuyOfferAmounts" exact="table[]"/>
                      <do_for_each name="$BuyOffer" in="$BuyOffers">
                        <set_value name="$Report.$BuyOfferAmounts.{$BuyOffer.ware}" exact="$BuyOffer.offeramount" operation="add"/>
                      </do_for_each>
                    </do_if>

                    <find_sell_offer result="$SellOffers" seller="$Object" multiple="true" />
                    <do_if value="$SellOffers.count">
                      <set_value name="$Report.$SellOfferAmounts" exact="table[]"/>
                      <do_for_each name="$SellOffer" in="$SellOffers">
                        <set_value name="$SellOfferWare" exact="$SellOffer.ware"/>
                        <!--If the sell offer ware is overflowing, boost the amount score by a factor-->
                        <do_if value="$OverflowReport.{$SellOfferWare}?">
                          <set_value name="$OverflowMaxBonus" exact="0.2"/>
                          <set_value name="$OverflowMaxBonusTime" exact="3000f"/>
                          <do_if value="$OverflowReport.{$SellOfferWare} gt $OverflowMaxBonusTime">
                            <set_value name="$Report.$SellOfferAmounts.{$SellOfferWare}" exact="$SellOffer.offeramount * (1.0 + $OverflowMaxBonus)" operation="add"/>
                            <debug_text text="'Overflow for ware ' + $SellOfferWare + ' on ' + $Object + ' ' + $Object.knownname + ', overflowing for ' + $OverflowReport.{$SellOfferWare} + ', sell score changed from ' + $SellOffer.offeramount + ' to ' + $SellOffer.offeramount * (1.0 + $OverflowMaxBonus)" chance="$DebugChance"/>
                          </do_if>
                          <do_else>
                            <set_value name="$Report.$SellOfferAmounts.{$SellOfferWare}" exact="$SellOffer.offeramount * (1.0 + ($OverflowMaxBonus * (($OverflowReport.{$SellOfferWare})f / $OverflowMaxBonusTime)))" operation="add"/>
                            <debug_text text="'Overflow for ware ' + $SellOfferWare + ' on ' + $Object + ' ' + $Object.knownname + ', overflowing for ' + $OverflowReport.{$SellOfferWare} + ', sell score changed from ' + $SellOffer.offeramount + ' to ' + ($SellOffer.offeramount * (1.0 + ($OverflowMaxBonus * (($OverflowReport.{$SellOfferWare})f / $OverflowMaxBonusTime))))" chance="$DebugChance"/>
                          </do_else>
                        </do_if>
                        <do_else>
                          <set_value name="$Report.$SellOfferAmounts.{$SellOfferWare}" exact="$SellOffer.offeramount" operation="add"/>
                        </do_else>
                      </do_for_each>
                    </do_if>

                    <do_if value="$Report.keys.count">
                      <do_if value="$FactionTable">
                        <set_value name="$FactionTable.{$Object}" exact="$Report"/>
                      </do_if>
                      <do_else>
                        <set_value name="$Owner" exact="$Object.owner"/>
                        <set_value name="$TempFactionTable" exact="@GlobalStorageData.$Reports.{$Owner}"/>
                        <do_if value="not $TempFactionTable">
                          <set_value name="$TempFactionTable" exact="table[]"/>
                          <set_value name="GlobalStorageData.$Reports.{$Owner}" exact="$TempFactionTable"/>
                        </do_if>
                        <set_value name="GlobalStorageData.$Reports.{$Owner}.{$Object}" exact="$Report"/>
                      </do_else>
                      <set_value name="$Report.$Time" exact="player.age"/>
                      <debug_text text="'Report for ' + $Object.knownname + ' is ' + $Report" context="false" chance="$DebugChance"/>
                    </do_if>
                  </do_if>

                  <remove_value name="$Objects.{$i}"/>

                  <!--<debug_text text="$Faction + ' ' + $Reports.keys.count + ' reports. New: ' + $Report" context="false"/>-->
                </do_all>

                <do_if value="$Objects.count == 0">
                  <do_if value="$DebugChance == 100">
                    <do_if value="$Faction and $FactionTable">
                      <debug_text text="'Done generating for faction: ' + $Faction + ' ' + $FactionTable.keys.count + ' reports'" context="false"/>
                    </do_if>
                    <do_else>
                      <debug_text text="'Done generating for ' + GlobalStorageData.$Reports.keys.count + ' factions'" context="false"/>
                      <set_value name="$ReportsKeys" exact="GlobalStorageData.$Reports.keys.list"/>
                      <do_all exact="$ReportsKeys.count" counter="$i">
                        <debug_text text="GlobalStorageData.$Reports.{$ReportsKeys.{$i}}.keys.count + ' reports for faction ' + $ReportsKeys.{$i}.id" context="false"/>
                      </do_all>
                    </do_else>
                    <debug_text text="'Done generating ' + GlobalStorageData.$Reports.keys.count + ' reports\n'" context="false"/>
                  </do_if>
                  <set_value name="GlobalStorageData.$LastRunTime" exact="player.age"/>
                  <signal_cue cue="ShortageDataGenerated" check="false"/>
                  <reset_cue cue="GenerateShortageData"/>
                </do_if>
              </actions>
            </cue>
          </cues>
        </cue>

        <cue name="ShortageDataGenerated"/>

        <cue name="EvaluateGlobalShortages" instantiate="true" namespace="this">
          <conditions>
            <event_cue_signalled/>
            <check_value value="GenerateShortageData.state == cuestate.waiting"/>
          </conditions>
          <actions>
            <set_value name="$DebugChance" exact="0"/>

            <do_if value="@GlobalStorageData.$Reports">
              <set_value name="$InsufficientProductsTable" exact="table[]"/>
              <set_value name="$ShortageProductsTable" exact="table[]"/>
              <set_value name="$OverflowProductsTable" exact="table[]"/>
              <set_value name="$InsufficientWorkforceTable" exact="table[]"/>
              <set_value name="$ShortageWorkforceTable" exact="table[]"/>
              <set_value name="$InsufficientBuildTable" exact="table[]"/>
              <set_value name="$ShortageBuildTable" exact="table[]"/>
              <set_value name="$BuyOfferAmountsTable" exact="table[]"/>
              <set_value name="$SellOfferAmountsTable" exact="table[]"/>
              <set_value name="$OwnerKeys" exact="@GlobalStorageData.$Reports.keys.list"/>

              <do_all exact="$OwnerKeys.count" counter="$o">
                <set_value name="$OwnerReports" exact="@GlobalStorageData.$Reports.{$OwnerKeys.{$o}}"/>
                <set_value name="$TableRef" exact="null"/>
                <set_value name="$TableRefKeys" exact="null"/>
                <set_value name="$ReportKeys" exact="$OwnerReports.keys.list"/>
                <do_all exact="$ReportKeys.count" counter="$i">
                  <do_if value="$OwnerReports.{$ReportKeys.{$i}}.$InsufficientProductionWares?">
                    <do_for_each name="$TableWare" valuename="$TableWareAmount" in="$OwnerReports.{$ReportKeys.{$i}}.$InsufficientProductionWares">
                      <set_value name="$InsufficientProductsTable.{$TableWare}" exact="$TableWareAmount" operation="add"/>
                    </do_for_each>
                  </do_if>
                  <!--<do_if value="$OwnerReports.{$ReportKeys.{$i}}.$ShortageProductionWares?">
                    <set_value name="$TableRef" exact="$OwnerReports.{$ReportKeys.{$i}}.$ShortageProductionWares"/>
                    <set_value name="$TableRefKeys" exact="$TableRef.keys.list"/>
                    <do_all exact="$TableRefKeys.count" counter="$k">
                      <set_value name="$ShortageProductsTable.{$TableRefKeys.{$k}}" exact="$TableRef.{$TableRefKeys.{$k}}" operation="add"/>
                    </do_all>
                  </do_if>-->
                  <do_if value="$OwnerReports.{$ReportKeys.{$i}}.$OverflowProductionWares?">
                    <do_for_each name="$TableWare" valuename="$TableWareAmount" in="$OwnerReports.{$ReportKeys.{$i}}.$OverflowProductionWares">
                      <set_value name="$OverflowProductsTable.{$TableWare}" exact="$TableWareAmount" operation="add"/>
                    </do_for_each>
                  </do_if>
                  <do_if value="$OwnerReports.{$ReportKeys.{$i}}.$InsufficientWorkforceWares?">
                    <do_for_each name="$TableWare" valuename="$TableWareAmount" in="$OwnerReports.{$ReportKeys.{$i}}.$InsufficientWorkforceWares">
                      <set_value name="$InsufficientWorkforceTable.{$TableWare}" exact="$TableWareAmount" operation="add"/>
                    </do_for_each>
                  </do_if>
                  <!--<do_if value="$OwnerReports.{$ReportKeys.{$i}}.$ShortageWorkforceWares?">
                    <set_value name="$TableRef" exact="$OwnerReports.{$ReportKeys.{$i}}.$ShortageWorkforceWares"/>
                    <set_value name="$TableRefKeys" exact="$TableRef.keys.list"/>
                    <do_all exact="$TableRefKeys.count" counter="$k">
                      <set_value name="$ShortageWorkforceTable.{$TableRefKeys.{$k}}" exact="$TableRef.{$TableRefKeys.{$k}}" operation="add"/>
                    </do_all>
                  </do_if>-->
                  <debug_text text="@$OwnerReports.{$ReportKeys.{$i}}.$InsufficientBuildWares"/>
                  <do_if value="$OwnerReports.{$ReportKeys.{$i}}.$InsufficientBuildWares?">
                    <do_for_each name="$TableWare" valuename="$TableWareAmount" in="$OwnerReports.{$ReportKeys.{$i}}.$InsufficientBuildWares">
                      <set_value name="$InsufficientBuildTable.{$TableWare}" exact="$TableWareAmount" operation="add"/>
                    </do_for_each>
                  </do_if>
                  <!--<do_if value="$OwnerReports.{$ReportKeys.{$i}}.$ShortageBuildWares?">
                    <set_value name="$TableRef" exact="$OwnerReports.{$ReportKeys.{$i}}.$ShortageBuildWares"/>
                    <set_value name="$TableRefKeys" exact="$TableRef.keys.list"/>
                    <do_all exact="$TableRefKeys.count" counter="$k">
                      <set_value name="$ShortageWorkforceTable.{$TableRefKeys.{$k}}" exact="$TableRef.{$TableRefKeys.{$k}}" operation="add"/>
                    </do_all>
                  </do_if>-->
                  <do_if value="$OwnerReports.{$ReportKeys.{$i}}.$BuyOfferAmounts?">
                    <do_for_each name="$BuyOfferWare" valuename="$BuyOfferAmount" in="$OwnerReports.{$ReportKeys.{$i}}.$BuyOfferAmounts">
                      <set_value name="$BuyOfferAmountsTable.{$BuyOfferWare}" exact="$BuyOfferAmount" operation="add"/>
                    </do_for_each>
                  </do_if>
                  <do_if value="$OwnerReports.{$ReportKeys.{$i}}.$SellOfferAmounts?">
                    <do_for_each name="$SellOfferWare" valuename="$SellOfferAmount" in="$OwnerReports.{$ReportKeys.{$i}}.$SellOfferAmounts">
                      <set_value name="$SellOfferAmountsTable.{$SellOfferWare}" exact="$SellOfferAmount" operation="add"/>
                    </do_for_each>
                  </do_if>
                </do_all>
              </do_all>
              <remove_value name="$ReportKeys"/>
              <remove_value name="$OwnerReports"/>

              <debug_text text="'Insufficient products'" context="false"/>
              <set_value name="$TableRef" exact="$InsufficientProductsTable"/>
              <set_value name="$TableRefKeys" exact="$TableRef.keys.sorted"/>
              <do_all exact="$TableRefKeys.count" counter="$i" reverse="true">
                <debug_text text="'Ware: ' + $TableRefKeys.{$i} + ' value: ' + $TableRef.{$TableRefKeys.{$i}}" context="false"/>
              </do_all>

              <!--<debug_text text="'Shortage products'" context="false"/>
              <set_value name="$TableRef" exact="$ShortageProductsTable"/>
              <set_value name="$TableRefKeys" exact="$TableRef.keys.sorted"/>
              <do_all exact="$TableRefKeys.count" counter="$i" reverse="true">
                <debug_text text="'Ware: ' + $TableRefKeys.{$i} + ' value: ' + $TableRef.{$TableRefKeys.{$i}}" context="false"/>
              </do_all>-->

              <debug_text text="'Overflow products'" context="false"/>
              <set_value name="$TableRef" exact="$OverflowProductsTable"/>
              <set_value name="$TableRefKeys" exact="$TableRef.keys.sorted"/>
              <do_all exact="$TableRefKeys.count" counter="$i" reverse="true">
                <debug_text text="'Ware: ' + $TableRefKeys.{$i} + ' value: ' + $TableRef.{$TableRefKeys.{$i}}" context="false"/>
              </do_all>

              <debug_text text="'Insufficient workforce res.'" context="false"/>
              <set_value name="$TableRef" exact="$InsufficientWorkforceTable"/>
              <set_value name="$TableRefKeys" exact="$TableRef.keys.sorted"/>
              <do_all exact="$TableRefKeys.count" counter="$i" reverse="true">
                <debug_text text="'Ware: ' + $TableRefKeys.{$i} + ' value: ' + $TableRef.{$TableRefKeys.{$i}}" context="false"/>
              </do_all>

              <!--<debug_text text="'Shortage workforce res.'" context="false"/>
              <set_value name="$TableRef" exact="$ShortageWorkforceTable"/>
              <set_value name="$TableRefKeys" exact="$TableRef.keys.sorted"/>
              <do_all exact="$TableRefKeys.count" counter="$i" reverse="true">
                <debug_text text="'Ware: ' + $TableRefKeys.{$i} + ' value: ' + $TableRef.{$TableRefKeys.{$i}}" context="false"/>
              </do_all>-->

              <debug_text text="'Insufficient build res.'" context="false"/>
              <set_value name="$TableRef" exact="$InsufficientBuildTable"/>
              <set_value name="$TableRefKeys" exact="$TableRef.keys.sorted"/>
              <do_all exact="$TableRefKeys.count" counter="$i" reverse="true">
                <debug_text text="'Ware: ' + $TableRefKeys.{$i} + ' value: ' + $TableRef.{$TableRefKeys.{$i}}" context="false"/>
              </do_all>

              <!--<debug_text text="'Shortage build res.'" context="false"/>
              <set_value name="$TableRef" exact="$ShortageBuildTable"/>
              <set_value name="$TableRefKeys" exact="$TableRef.keys.sorted"/>
              <do_all exact="$TableRefKeys.count" counter="$i" reverse="true">
                <debug_text text="'Ware: ' + $TableRefKeys.{$i} + ' value: ' + $TableRef.{$TableRefKeys.{$i}}" context="false"/>
              </do_all>-->

              <debug_text text="'Buy offers'" context="false"/>
              <set_value name="$TableRef" exact="$BuyOfferAmountsTable"/>
              <set_value name="$TableRefKeys" exact="$TableRef.keys.sorted"/>
              <do_all exact="$TableRefKeys.count" counter="$i" reverse="true">
                <debug_text text="'Ware: ' + $TableRefKeys.{$i} + ' value: ' + $TableRef.{$TableRefKeys.{$i}}" context="false"/>
              </do_all>

              <debug_text text="'Sell offers'" context="false"/>
              <set_value name="$TableRef" exact="$SellOfferAmountsTable"/>
              <set_value name="$TableRefKeys" exact="$TableRef.keys.sorted"/>
              <do_all exact="$TableRefKeys.count" counter="$i" reverse="true">
                <debug_text text="'Ware: ' + $TableRefKeys.{$i} + ' value: ' + $TableRef.{$TableRefKeys.{$i}}" context="false"/>
              </do_all>

            </do_if>
          </actions>
        </cue>
      </cues>
    </cue>

  </cues>
</mdscript>
