<?xml version="1.0" encoding="utf-8"?>
<mdscript name="LIB_trade_routes" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
    <cues>
        <cue name="GlobalTradeRouteTables">
            <actions>

                <!-- 
                    The master table with UUID as key, structured as follows:
                    table[ {$UUID} = 
                        table[
                            {$'SectorA'} = a sector,
                            {$'SectorB'} = a sector,
                            {$'WareMovedFromAToB'} = a ware,
                            {$'AmountMovedFromAToB'} = an integer,
                            {$'WareMovedFromBToA'} = a ware,
                            {$'AmountMovedFromAToB'} = an integer
                        ]
                    ]
                -->
                <set_value name="$MasterTable" exact="table[]"/>

                <!--
                This table will sector as key, for more efficient lookup of routes. Full table structure:
                table[ {Sector} = 
                    table[ {Ware} = 'UUID Of Route That Moves Given Ware' ]
                    ]
                -->
                <set_value name="$TradeRouteLookupBySectorAndWare" exact="table[]"/>

            </actions>
            <cues>

                <!-- add a route to the tables -->
                <library name="AddRoute" purpose="run_actions">
                    <params>
                        <param name="SectorA" comment="for one-way trade routes, this is usually the buyer"/>
                        <param name="SectorB" />
                        <param name="WareMovedFromAToB" comment="for one-way trade routes, this value will be null"/>
                        <param name="AmountMovedFromAToB" comment="for one-way trade routes, this value will be 0"/>
                        <param name="WareMovedFromBToA" />
                        <param name="AmountMovedFromBToA" />
                    </params>
                    <actions>
                        <!--
                            Check contraint:
                            Any sector can only have one UUID for any unique ware and trade partner combination
                            Log error and do not alter tables if constraint is violated
                        -->
                        <do_if value="@GlobalTradeRouteTables.$TradeRouteLookupBySectorAndWare.{ $SectorA }.{ $WareMovedFromAToB } or @GlobalTradeRouteTables.$TradeRouteLookupBySectorAndWare.{ $SectorA }.{ $WareMovedFromBToA }">
                            <debug_to_file directory="'FactionTradeRoutes'" name="'FactionTradeRoutes.log'" text="'Violated uniqueness constraint for route between %s and %s carrying %s or %s'.[$SectorA.knownname, $SectorB.knownname, $WareMovedFromAToB.name, $WareMovedFromBToA.name]"/>
                            <return></return>
                        </do_if>

                        <!--
                            Add up to four entries to $TradeRouteLookupBySectorAndWare-one for each sector for each ware in the route-and one entry to $MasterTable
                        -->
                        <run_actions ref="LIB_uuid_gen.GenerateUUID" result="$UUID"/>

                        <set_value name="GlobalTradeRouteTables.$MasterTable.$UUID" exact="table[
                                $'SectorA' = $SectorA,
                                $'SectorB' = $SectorB,
                                $'WareMovedFromAToB' = $WareMovedFromAToB,
                                $'AmountMovedFromAToB' = $AmountMovedFromAToB,
                                $'WareMovedFromBToA' = $WareMovedFromBToA,
                                $'AmountMovedFromAToB' = $AmountMovedFromBToA
                            ]"/>

                        <do_if value="@$WareMovedFromAToB">
                            <set_value name="GlobalTradeRouteTables.$TradeRouteLookupBySectorAndWare.$SectorA" exact="table[
                                $'WareMovedFromAToB' = $UUID
                            ]"/>
                            <set_value name="GlobalTradeRouteTables.$TradeRouteLookupBySectorAndWare.$SectorB" exact="table[
                                $'WareMovedFromAToB' = $UUID
                            ]"/>
                        </do_if>
                        <do_if value="@$WareMovedFromBToA">
                            <set_value name="GlobalTradeRouteTables.$TradeRouteLookupBySectorAndWare.$SectorA" exact="table[
                                $'WareMovedFromBToA' = $UUID
                            ]"/>
                            <set_value name="GlobalTradeRouteTables.$TradeRouteLookupBySectorAndWare.$SectorB" exact="table[
                                $'WareMovedFromBToA' = $UUID
                            ]"/>
                        </do_if>

                    </actions>
                </library>

                <!-- route removal  -->
                <library name="RemoveRouteByUUID" purpose="run_actions">
                    <params>
                        <param name="UUID" comment="The UUID of the route to remove from the routes manager"/>
                    </params>
                    <actions>
                        <remove_value name="GlobalTradeRouteTables.MasterTable.{ $UUID }"/>
                    </actions>
                </library>

                <!-- find trade route given a ware and the destination sector -->
                <library name="FindRouteBySectorAndWare" purpose="run_actions">
                    <params>
                        <param name="Sector" comment="The sector that is the destination of the ware"/>
                        <param name="Ware" comment="The ware in transit"/>
                    </params>
                    <actions>
                        <return>
                            <retval name="TradeRoute" value="GlobalTradeRouteTables.MasterTable.{ GlobalTradeRouteTables.$TradeRouteLookupBySectorAndWare.{ $Sector }.{ Ware } }" />
                        </return>
                    </actions>
                </library>

                <!-- find trade route given its UUID -->
                <library name="FindRouteByUUID" purpose="run_actions">
                    <params>
                        <param name="UUID" comment="The uuid of the route we want"/>
                    </params>
                    <actions>
                        <return>
                            <retval name="TradeRoute" value="GlobalTradeRouteTables.MasterTable.{ $UUID }" />
                        </return>
                    </actions>
                </library>

                <!-- make a csv file of trade routes -->
                <library name="DumpMasterTableToLog" purpose="run_actions">
                    <actions>

                        <debug_to_file directory="FactionTradeRoutes" name="'TradeRoutesDump%s.csv'.[player.age]" text="'%1, %2, %3, %4, %5, %6, %7\n'.['UUID', 'SectorA', 'SectorB', 'WareMovedFromAToB', 'AmountMovedFromAToB', 'WareMovedFromBToA', 'AmountMovedFromBToA']" />

                        <do_for_each name="$UUID" in="$GlobalTradeRouteTables.MasterTable.keys.list">
                            <debug_to_file directory="FactionTradeRoutes" name="'TradeRoutesDump%s.csv'.[player.age]" text="'%1, %2, %3, %4, %5, %6, %7\n'.[$UUID, $GlobalTradeRouteTables.MasterTable.$UUID.$'SectorA'.knownname, $GlobalTradeRouteTables.MasterTable.$UUID.$'SectorB'.knownname, $GlobalTradeRouteTables.MasterTable.$UUID.$'WareMovedFromAToB'.name, $GlobalTradeRouteTables.MasterTable.$UUID.$'AmountMovedFromAToB', $GlobalTradeRouteTables.MasterTable.$UUID.$'WareMovedFromBToA'.name, $GlobalTradeRouteTables.MasterTable.$UUID.$'AmountMovedFromBToA']" />
                        </do_for_each>

                    </actions>
                </library>

            </cues>
        </cue>
    </cues>
</mdscript>
