<?xml version="1.0" encoding="utf-8"?>
<mdscript name="LIB_trade_routes"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="md.xsd">
    <cues>
        <cue name="GlobalTradeRouteTables" namespace="static">
            <actions>

                <!-- 
                    The master table with UUID as key, structured as follows:
                    table[ {$UUID} = 
                        table[
                            {$'BuyerSector'} = a sector,
                            {$'SupplierSector'} = a sector,
                            {$'ContractedWare'} = a ware,
                            {$'ContractedAmount'} = an integer,
                        ]
                    ]
                -->
                <set_value name="$MasterTable" exact="table[]"/>

                <!--
                    The following table exists to facilitate the searching of routes by sector
                    Its contents are all the routes which are supplying the buyer in the key

                    table[ {$BuyerSector} = table[
                            {$SupplierSector} = table[
                                {$Ware} = UUID of route for ware between sectors
                            ]
                        ]
                    ]
                -->
                <set_value name="$TradeRouteLookupTableByBuyerSector" exact="table[]"/>

                <!--
                    The following table exists to facilitate the searching of routes by sector
                    Its contents are all the routes which are buying from the supplier in the key

                    table[ {$SupplierSector} = table[
                            {$BuyerSector} = table[
                                {$Ware} = UUID of route for ware between sectors
                            ]
                        ]
                    ]
                -->
                <set_value name="$TradeRouteLookupTableBySupplierSector" exact="table[]"/>

            </actions>
            <cues>

                <!-- add a route to the tables -->
                <library name="AddRoute" purpose="run_actions">
                    <params>
                        <param name="BuyerSector"/>
                        <param name="SupplierSector" />
                        <param name="ContractedWare" />
                        <param name="ContractedAmount" />
                    </params>
                    <actions>
                        <!--
                            Check constraint:
                            Any sector can only have one UUID for any unique ware and supplier combination
                            Log error and do not alter tables if constraint is violated
                        -->
                        <do_if value="@md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableByBuyerSector.{ $BuyerSector }.{ $SupplierSector }.{ $ContractedWare }">
                            <debug_to_file directory="'FactionTradeRoutes'" name="'FactionTradeRoutesErrors.log'" text="'Violated uniqueness constraint for route between Buyer: %s and Supplier: %s carrying Ware: %s'.[$BuyerSector.knownname, $SupplierSector.knownname, $ContractedWare.name]"/>
                            <return/>
                        </do_if>

                        <run_actions ref="md.LIB_uuid_gen.GenerateUUID" result="$UUID"/>

                        <!-- string keys must start with '$', add prefix to UUID -->
                        <set_value name="$UUIDKey" exact="'$%s'.[$UUID]"/>

                        <set_value name="md.LIB_trade_routes.GlobalTradeRouteTables.$MasterTable.{ $UUIDKey }" exact="table[ {'$BuyerSector'} = $BuyerSector, {'$SupplierSector'} = $SupplierSector, {'$ContractedWare'} = $ContractedWare, {'$ContractedAmount'} = $ContractedAmount ]"/>

                        <!-- Be sure tables exist before trying to set key-value pairs -->
                        <do_if value="not @md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableByBuyerSector.{$BuyerSector}">
                            <set_value name="md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableByBuyerSector.{$BuyerSector}" exact="table[]"/>
                        </do_if>
                        <do_if value="not @md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableByBuyerSector.{$BuyerSector}.{$SupplierSector}">
                            <set_value name="md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableByBuyerSector.{$BuyerSector}.{$SupplierSector}" exact="table[]"/>
                        </do_if>
                        <set_value name="md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableByBuyerSector.{$BuyerSector}.{$SupplierSector}.{$ContractedWare}" exact="$UUIDKey"/>
                        
                        <!-- Be sure tables exist before trying to set key-value pairs -->
                        <do_if value="not @md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableBySupplierSector.{$SupplierSector}">
                            <set_value name="md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableBySupplierSector.{$SupplierSector}" exact="table[]"/>
                        </do_if>
                        <do_if value="not @md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableBySupplierSector.{$SupplierSector}.{$BuyerSector}">
                            <set_value name="md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableBySupplierSector.{$SupplierSector}.{$BuyerSector}" exact="table[]"/>
                        </do_if>
                        <set_value name="md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableBySupplierSector.{$SupplierSector}.{$BuyerSector}.{$ContractedWare}" exact="$UUIDKey"/>

                        <return value="$UUIDKey"/>

                    </actions>
                </library>

                <!-- route removal  -->
                <library name="RemoveRouteByUUID" purpose="run_actions">
                    <params>
                        <param name="UUID" comment="The UUID of the route to remove from the route manager"/>
                    </params>
                    <actions>
                        <set_value name="$BuyerSector" exact="md.LIB_trade_routes.GlobalTradeRouteTables.$MasterTable.{ $UUID }.{ '$BuyerSector' }"/>
                        <set_value name="$SupplierSector" exact="md.LIB_trade_routes.GlobalTradeRouteTables.$MasterTable.{ $UUID }.{ '$SupplierSector' }"/>
                        <set_value name="$ContractedWare" exact="md.LIB_trade_routes.GlobalTradeRouteTables.$MasterTable.{ $UUID }.{ '$ContractedWare' }"/>

                        <!-- Remove key from MasterTable -->
                        <remove_value name="md.LIB_trade_routes.GlobalTradeRouteTables.$MasterTable.{ $UUID }"/>

                        <!-- Remove key from lookup tables -->
                        <remove_value name="md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableByBuyerSector.{ $BuyerSector }.{ $SupplierSector }.{ $ContractedWare }"/>

                        <!-- prune empty tables from the lookup -->
                        <do_if value="@md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableByBuyerSector.{ $BuyerSector }.{ $SupplierSector }.keys.count == 0">
                            <remove_value name="md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableByBuyerSector.{ $BuyerSector }.{ $SupplierSector }"/>
                        </do_if>
                        <do_if value="@md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableByBuyerSector.{ $BuyerSector }.keys.count == 0">
                            <remove_value name="md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableByBuyerSector.{ $BuyerSector }"/>
                        </do_if>

                        <!-- Remove key from lookup tables -->
                        <remove_value name="md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableBySupplierSector.{ $SupplierSector }.{ $BuyerSector }.{ $ContractedWare }"/>

                        <!-- prune empty tables from the lookup -->
                        <do_if value="@md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableBySupplierSector.{ $SupplierSector }.{ $BuyerSector }.keys.count == 0">
                            <remove_value name="md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableBySupplierSector.{ $SupplierSector }.{ $BuyerSector }"/>
                        </do_if>
                        <do_if value="@md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableByBuyerSector.{ $BuyerSector }.keys.count == 0">
                            <remove_value name="md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableBySupplierSector.{ $SupplierSector }"/>
                        </do_if>

                    </actions>
                </library>

                <!-- find trade routes given a ware and the destination sector -->
                <library name="GetRoutesByBuyerAndWare" purpose="run_actions">
                    <params>
                        <param name="BuyerSector" comment="The sector that is the buyer of the ware"/>
                        <param name="Ware" comment="The ware for search"/>
                    </params>
                    <actions>
                        <create_list name="$Routes"/>

                        <do_if value="@md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableByBuyerSector.{$BuyerSector}">
                            <do_for_each name="$SupplierSector" in="md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableByBuyerSector.{$BuyerSector}">
                                <do_for_each name="$ContractedWare" in="md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableByBuyerSector.{$BuyerSector}.{$SupplierSector}">
                                    <do_if value="$Ware == $ContractedWare">
                                        <append_to_list name="$Routes" exact="md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableByBuyerSector.{$BuyerSector}.{$SupplierSector}.{$ContractedWare}" />
                                    </do_if>
                                </do_for_each>
                            </do_for_each>
                        </do_if>

                        <return value="$Routes"/>
                    </actions>
                </library>

                <!-- find trade routes given a ware and the supplier sector -->
                <library name="GetRoutesBySupplierAndWare" purpose="run_actions">
                    <params>
                        <param name="SupplierSector" comment="The sector that is the supplier of the ware"/>
                        <param name="Ware" comment="The ware for search"/>
                    </params>
                    <actions>
                        <create_list name="$Routes"/>

                        <do_if value="@md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableBySupplierSector.{$SupplierSector}">
                            <do_for_each name="$BuyerSector" in="md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableBySupplierSector.{$SupplierSector}">
                                <do_for_each name="$ContractedWare" in="md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableBySupplierSector.{$SupplierSector}.{$BuyerSector}">
                                    <do_if value="$Ware == $ContractedWare">
                                        <append_to_list name="$Routes" exact="GlobalTradeRouteTables.$TradeRouteLookupTableBySupplierSector.{$SupplierSector}.{$BuyerSector}.{$ContractedWare}" />
                                    </do_if>
                                </do_for_each>
                            </do_for_each>
                        </do_if>

                        <return value="$Routes"/>
                    </actions>
                </library>

                <!-- find amount of ware already contracted for purchase, optionally only give amount imported from foreigners -->
                <library name="GetAmountContractedForPurchaseBySectorAndWare" purpose="run_actions">
                    <params>
                        <param name="BuyerSector" comment="The sector that is the buyer of the ware"/>
                        <param name="Ware" comment="The ware for search"/>
                        <param name="ForeignOnly" comment="boolean to search for only foreign contracts"/>
                    </params>
                    <actions>
                        <set_value name="$TotalContractedAmount" exact="0"/>

                        <run_actions ref="GetRoutesByBuyerAndWare" result="$TradeRoutes">
                            <param name="BuyerSector" value="$BuyerSector" />
                            <param name="Ware" value="$Ware" />
                        </run_actions>

                        <do_for_each name="$Route" in="$TradeRoutes">
                            <set_value name="$TradeTable" exact="@md.LIB_trade_routes.GlobalTradeRouteTables.$MasterTable.{$Route}"/>
                            <do_if value="$ForeignOnly">
                                <do_if value="@$TradeTable.{ '$SupplierSector' }.trueowner != $BuyerSector.trueowner">
                                    <set_value name="$TotalContractedAmount" exact="$TradeTable.{ '$ContractedAmount' }" operation="add"/>
                                </do_if>
                            </do_if>
                            <do_else>
                                <set_value name="$TotalContractedAmount" exact="$TradeTable.{ '$ContractedAmount' }" operation="add"/>
                            </do_else>
                        </do_for_each>

                        <return value="$TotalContractedAmount"/>
                    </actions>
                </library>

                <!-- find amount of ware already contracted for sale, optionally only give amount sold to foreigners -->
                <library name="GetAmountContractedForSaleBySectorAndWare" purpose="run_actions">
                    <params>
                        <param name="SupplierSector" comment="The sector that is the supplier of the ware"/>
                        <param name="Ware" comment="The ware for search"/>
                        <param name="ForeignOnly" comment="boolean to search for only foreign contracts"/>
                    </params>
                    <actions>
                        <set_value name="$TotalContractedAmount" exact="0"/>

                        <run_actions ref="GetRoutesBySupplierAndWare" result="$TradeRoutes">
                            <param name="SupplierSector" value="$SupplierSector" />
                            <param name="Ware" value="$Ware" />
                        </run_actions>

                        <do_for_each name="$Route" in="$TradeRoutes">
                            <set_value name="$TradeTable" exact="@md.LIB_trade_routes.GlobalTradeRouteTables.$MasterTable.{$Route}"/>
                            <do_if value="$ForeignOnly">
                                <do_if value="@$TradeTable.{ '$BuyerSector' }.trueowner != $SupplierSector.trueowner">
                                    <set_value name="$TotalContractedAmount" exact="$TradeTable.{ '$ContractedAmount' }" operation="add"/>
                                </do_if>
                            </do_if>
                            <do_else>
                                <set_value name="$TotalContractedAmount" exact="$TradeTable.{ '$ContractedAmount' }" operation="add"/>
                            </do_else>
                        </do_for_each>

                        <return value="$TotalContractedAmount"/>
                    </actions>
                </library>

                <!-- find trade route given its UUID -->
                <library name="FindRouteByUUID" purpose="run_actions">
                    <params>
                        <param name="UUID" comment="The uuid of the route we want"/>
                    </params>
                    <actions>
                        <return value="GlobalTradeRouteTables.MasterTable.{ $UUID }"/>
                    </actions>
                </library>

                <!-- make a csv file of trade routes -->
                <library name="DumpMasterTableToLog" purpose="run_actions">
                    <params>
                        <param name="directory" />
                        <param name="name" />
                    </params>
                    <actions>

                        <debug_to_file directory="$directory" name="$name" text="'%1, %2, %3, %4, %5'.['UUID', 'BuyerSector', 'SupplierSector', 'ContractedWare', 'ContractedAmount']" />

                        <do_for_each name="$UUID" in="md.LIB_trade_routes.GlobalTradeRouteTables.$MasterTable.keys.list">
                            <debug_to_file directory="$directory" name="$name" text="'%1, %2, %3, %4, %5'.[$UUID, md.LIB_trade_routes.GlobalTradeRouteTables.$MasterTable.{ $UUID }.{ '$BuyerSector' }.knownname, md.LIB_trade_routes.GlobalTradeRouteTables.$MasterTable.{ $UUID }.{ '$SupplierSector' }.knownname, md.LIB_trade_routes.GlobalTradeRouteTables.$MasterTable.{ $UUID }.{ '$ContractedWare' }.name, md.LIB_trade_routes.GlobalTradeRouteTables.$MasterTable.{ $UUID }.{ '$ContractedAmount' }]" />
                        </do_for_each>

                    </actions>
                </library>

                <!-- make a csv file of trade routes -->
                <library name="DumpTradeRouteLookupTableByBuyerSectorToLog" purpose="run_actions">
                    <params>
                        <param name="directory" />
                        <param name="name" />
                    </params>
                    <actions>

                        <debug_to_file directory="$directory" name="$name" text="'%1, %2, %3, %4'.['BuyerSector', 'SupplierSector', 'ContractedWare', 'UUID']" />

                        <do_for_each name="$Buyer" in="md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableByBuyerSector.keys.list">
                            <do_for_each name="$Supplier" in="md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableByBuyerSector.{$Buyer}.keys.list">
                                <do_for_each name="$Ware" in="md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableByBuyerSector.{$Buyer}.{$Supplier}.keys.list">
                                    <debug_to_file directory="$directory" name="$name" text="'%1, %2, %3, %4'.[$Buyer.knownname, $Supplier.knownname, $Ware.name, md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableByBuyerSector.{$Buyer}.{$Supplier}.{$Ware}]" />
                                </do_for_each>
                            </do_for_each>
                        </do_for_each>

                    </actions>
                </library>

                <!-- make a csv file of trade routes -->
                <library name="DumpTradeRouteLookupTableBySupplierSectorToLog" purpose="run_actions">
                    <params>
                        <param name="directory" />
                        <param name="name" />
                    </params>
                    <actions>

                        <debug_to_file directory="$directory" name="$name" text="'%1, %2, %3, %4'.['SupplierSector', 'BuyerSector', 'ContractedWare', 'UUID']" />

                        <do_for_each name="$Supplier" in="md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableBySupplierSector.keys.list">
                            <do_for_each name="$Buyer" in="md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableBySupplierSector.{$Supplier}.keys.list">
                                <do_for_each name="$Ware" in="md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableBySupplierSector.{$Supplier}.{$Buyer}.keys.list">
                                    <debug_to_file directory="$directory" name="$name" text="'%1, %2, %3, %4'.[$Supplier.knownname, $Buyer.knownname, $Ware.name, md.LIB_trade_routes.GlobalTradeRouteTables.$TradeRouteLookupTableBySupplierSector.{$Supplier}.{$Buyer}.{$Ware}]" />
                                </do_for_each>
                            </do_for_each>
                        </do_for_each>

                    </actions>
                </library>

            </cues>
        </cue>
    </cues>
</mdscript>
